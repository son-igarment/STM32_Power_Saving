
STM32_FreeRTOS_vTaskDelay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f2c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080040bc  080040bc  000140bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004148  08004148  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004148  08004148  00014148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004150  08004150  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004150  08004150  00014150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004154  08004154  00014154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004158  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004114  20000074  080041cc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004188  080041cc  00024188  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aecb  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d69  00000000  00000000  0002af6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008d0  00000000  00000000  0002ccd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007d8  00000000  00000000  0002d5a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000218b6  00000000  00000000  0002dd80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008646  00000000  00000000  0004f636  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca327  00000000  00000000  00057c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00121fa3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002528  00000000  00000000  00122020  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080040a4 	.word	0x080040a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080040a4 	.word	0x080040a4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	4a07      	ldr	r2, [pc, #28]	; (80005ac <vApplicationGetIdleTaskMemory+0x2c>)
 8000590:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	4a06      	ldr	r2, [pc, #24]	; (80005b0 <vApplicationGetIdleTaskMemory+0x30>)
 8000596:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2280      	movs	r2, #128	; 0x80
 800059c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800059e:	bf00      	nop
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	20000090 	.word	0x20000090
 80005b0:	200000e4 	.word	0x200000e4

080005b4 <main>:
static void MX_UART5_Init(void);

void led_task_handler(void* params);
void uart_task_handler(void* params);

int main(void){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af02      	add	r7, sp, #8

  HAL_Init();
 80005ba:	f000 fb2d 	bl	8000c18 <HAL_Init>


  SystemClock_Config();
 80005be:	f000 f829 	bl	8000614 <SystemClock_Config>

  MX_GPIO_Init();
 80005c2:	f000 f8b1 	bl	8000728 <MX_GPIO_Init>
  MX_UART5_Init();
 80005c6:	f000 f885 	bl	80006d4 <MX_UART5_Init>

  //3. lets create 2 tasks , task-1 and task-2
  xTaskCreate( uart_task_handler,"UART_TASK", 500,NULL,2,&uart_task );
 80005ca:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <main+0x48>)
 80005cc:	9301      	str	r3, [sp, #4]
 80005ce:	2302      	movs	r3, #2
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2300      	movs	r3, #0
 80005d4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005d8:	4909      	ldr	r1, [pc, #36]	; (8000600 <main+0x4c>)
 80005da:	480a      	ldr	r0, [pc, #40]	; (8000604 <main+0x50>)
 80005dc:	f002 f876 	bl	80026cc <xTaskCreate>
  xTaskCreate( led_task_handler,"LED_TASK", 500,NULL,3,&led_task );
 80005e0:	4b09      	ldr	r3, [pc, #36]	; (8000608 <main+0x54>)
 80005e2:	9301      	str	r3, [sp, #4]
 80005e4:	2303      	movs	r3, #3
 80005e6:	9300      	str	r3, [sp, #0]
 80005e8:	2300      	movs	r3, #0
 80005ea:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005ee:	4907      	ldr	r1, [pc, #28]	; (800060c <main+0x58>)
 80005f0:	4807      	ldr	r0, [pc, #28]	; (8000610 <main+0x5c>)
 80005f2:	f002 f86b 	bl	80026cc <xTaskCreate>

  //4. Start the scheduler.
  vTaskStartScheduler();
 80005f6:	f002 f9d3 	bl	80029a0 <vTaskStartScheduler>

  while (1);
 80005fa:	e7fe      	b.n	80005fa <main+0x46>
 80005fc:	200003e4 	.word	0x200003e4
 8000600:	080040bc 	.word	0x080040bc
 8000604:	08000965 	.word	0x08000965
 8000608:	200003e0 	.word	0x200003e0
 800060c:	080040c8 	.word	0x080040c8
 8000610:	08000945 	.word	0x08000945

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b094      	sub	sp, #80	; 0x50
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	f107 0320 	add.w	r3, r7, #32
 800061e:	2230      	movs	r2, #48	; 0x30
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f003 f939 	bl	800389a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000638:	2300      	movs	r3, #0
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	4b23      	ldr	r3, [pc, #140]	; (80006cc <SystemClock_Config+0xb8>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000640:	4a22      	ldr	r2, [pc, #136]	; (80006cc <SystemClock_Config+0xb8>)
 8000642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000646:	6413      	str	r3, [r2, #64]	; 0x40
 8000648:	4b20      	ldr	r3, [pc, #128]	; (80006cc <SystemClock_Config+0xb8>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000654:	2300      	movs	r3, #0
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	4b1d      	ldr	r3, [pc, #116]	; (80006d0 <SystemClock_Config+0xbc>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a1c      	ldr	r2, [pc, #112]	; (80006d0 <SystemClock_Config+0xbc>)
 800065e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000662:	6013      	str	r3, [r2, #0]
 8000664:	4b1a      	ldr	r3, [pc, #104]	; (80006d0 <SystemClock_Config+0xbc>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000670:	2302      	movs	r3, #2
 8000672:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000674:	2301      	movs	r3, #1
 8000676:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000678:	2310      	movs	r3, #16
 800067a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800067c:	2300      	movs	r3, #0
 800067e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000680:	f107 0320 	add.w	r3, r7, #32
 8000684:	4618      	mov	r0, r3
 8000686:	f000 fe05 	bl	8001294 <HAL_RCC_OscConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000690:	f000 f990 	bl	80009b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000694:	230f      	movs	r3, #15
 8000696:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000698:	2300      	movs	r3, #0
 800069a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006a0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f001 f85e 	bl	8001774 <HAL_RCC_ClockConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006be:	f000 f979 	bl	80009b4 <Error_Handler>
  }
}
 80006c2:	bf00      	nop
 80006c4:	3750      	adds	r7, #80	; 0x50
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40007000 	.word	0x40007000

080006d4 <MX_UART5_Init>:
/**
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0

  huart5.Instance = UART5;
 80006d8:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_UART5_Init+0x4c>)
 80006da:	4a12      	ldr	r2, [pc, #72]	; (8000724 <MX_UART5_Init+0x50>)
 80006dc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80006de:	4b10      	ldr	r3, [pc, #64]	; (8000720 <MX_UART5_Init+0x4c>)
 80006e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006e4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_UART5_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_UART5_Init+0x4c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <MX_UART5_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80006f8:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_UART5_Init+0x4c>)
 80006fa:	220c      	movs	r2, #12
 80006fc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fe:	4b08      	ldr	r3, [pc, #32]	; (8000720 <MX_UART5_Init+0x4c>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_UART5_Init+0x4c>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK){
 800070a:	4805      	ldr	r0, [pc, #20]	; (8000720 <MX_UART5_Init+0x4c>)
 800070c:	f001 fa24 	bl	8001b58 <HAL_UART_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_UART5_Init+0x46>
    Error_Handler();
 8000716:	f000 f94d 	bl	80009b4 <Error_Handler>
  }
}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20004140 	.word	0x20004140
 8000724:	40005000 	.word	0x40005000

08000728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08a      	sub	sp, #40	; 0x28
 800072c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072e:	f107 0314 	add.w	r3, r7, #20
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	613b      	str	r3, [r7, #16]
 8000742:	4b78      	ldr	r3, [pc, #480]	; (8000924 <MX_GPIO_Init+0x1fc>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a77      	ldr	r2, [pc, #476]	; (8000924 <MX_GPIO_Init+0x1fc>)
 8000748:	f043 0304 	orr.w	r3, r3, #4
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b75      	ldr	r3, [pc, #468]	; (8000924 <MX_GPIO_Init+0x1fc>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0304 	and.w	r3, r3, #4
 8000756:	613b      	str	r3, [r7, #16]
 8000758:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	4b71      	ldr	r3, [pc, #452]	; (8000924 <MX_GPIO_Init+0x1fc>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a70      	ldr	r2, [pc, #448]	; (8000924 <MX_GPIO_Init+0x1fc>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b6e      	ldr	r3, [pc, #440]	; (8000924 <MX_GPIO_Init+0x1fc>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	4b6a      	ldr	r3, [pc, #424]	; (8000924 <MX_GPIO_Init+0x1fc>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a69      	ldr	r2, [pc, #420]	; (8000924 <MX_GPIO_Init+0x1fc>)
 8000780:	f043 0302 	orr.w	r3, r3, #2
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b67      	ldr	r3, [pc, #412]	; (8000924 <MX_GPIO_Init+0x1fc>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0302 	and.w	r3, r3, #2
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	4b63      	ldr	r3, [pc, #396]	; (8000924 <MX_GPIO_Init+0x1fc>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a62      	ldr	r2, [pc, #392]	; (8000924 <MX_GPIO_Init+0x1fc>)
 800079c:	f043 0308 	orr.w	r3, r3, #8
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b60      	ldr	r3, [pc, #384]	; (8000924 <MX_GPIO_Init+0x1fc>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0308 	and.w	r3, r3, #8
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	603b      	str	r3, [r7, #0]
 80007b2:	4b5c      	ldr	r3, [pc, #368]	; (8000924 <MX_GPIO_Init+0x1fc>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a5b      	ldr	r2, [pc, #364]	; (8000924 <MX_GPIO_Init+0x1fc>)
 80007b8:	f043 0310 	orr.w	r3, r3, #16
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b59      	ldr	r3, [pc, #356]	; (8000924 <MX_GPIO_Init+0x1fc>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0310 	and.w	r3, r3, #16
 80007c6:	603b      	str	r3, [r7, #0]
 80007c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007ca:	2201      	movs	r2, #1
 80007cc:	2101      	movs	r1, #1
 80007ce:	4856      	ldr	r0, [pc, #344]	; (8000928 <MX_GPIO_Init+0x200>)
 80007d0:	f000 fd2c 	bl	800122c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007d4:	2200      	movs	r2, #0
 80007d6:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007da:	4854      	ldr	r0, [pc, #336]	; (800092c <MX_GPIO_Init+0x204>)
 80007dc:	f000 fd26 	bl	800122c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007e0:	2301      	movs	r3, #1
 80007e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e4:	2301      	movs	r3, #1
 80007e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ec:	2300      	movs	r3, #0
 80007ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	4619      	mov	r1, r3
 80007f6:	484c      	ldr	r0, [pc, #304]	; (8000928 <MX_GPIO_Init+0x200>)
 80007f8:	f000 fb66 	bl	8000ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80007fc:	2308      	movs	r3, #8
 80007fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000800:	2302      	movs	r3, #2
 8000802:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000808:	2300      	movs	r3, #0
 800080a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800080c:	2305      	movs	r3, #5
 800080e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	4619      	mov	r1, r3
 8000816:	4844      	ldr	r0, [pc, #272]	; (8000928 <MX_GPIO_Init+0x200>)
 8000818:	f000 fb56 	bl	8000ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800081c:	2301      	movs	r3, #1
 800081e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000820:	4b43      	ldr	r3, [pc, #268]	; (8000930 <MX_GPIO_Init+0x208>)
 8000822:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	4619      	mov	r1, r3
 800082e:	4841      	ldr	r0, [pc, #260]	; (8000934 <MX_GPIO_Init+0x20c>)
 8000830:	f000 fb4a 	bl	8000ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000834:	2304      	movs	r3, #4
 8000836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000838:	2300      	movs	r3, #0
 800083a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	4619      	mov	r1, r3
 8000846:	483c      	ldr	r0, [pc, #240]	; (8000938 <MX_GPIO_Init+0x210>)
 8000848:	f000 fb3e 	bl	8000ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800084c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000850:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000852:	2302      	movs	r3, #2
 8000854:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085a:	2300      	movs	r3, #0
 800085c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800085e:	2305      	movs	r3, #5
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	4619      	mov	r1, r3
 8000868:	4833      	ldr	r0, [pc, #204]	; (8000938 <MX_GPIO_Init+0x210>)
 800086a:	f000 fb2d 	bl	8000ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800086e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000872:	617b      	str	r3, [r7, #20]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000874:	2301      	movs	r3, #1
 8000876:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	2300      	movs	r3, #0
 800087e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	4619      	mov	r1, r3
 8000886:	4829      	ldr	r0, [pc, #164]	; (800092c <MX_GPIO_Init+0x204>)
 8000888:	f000 fb1e 	bl	8000ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800088c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000890:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000892:	2300      	movs	r3, #0
 8000894:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	4619      	mov	r1, r3
 80008a0:	4824      	ldr	r0, [pc, #144]	; (8000934 <MX_GPIO_Init+0x20c>)
 80008a2:	f000 fb11 	bl	8000ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80008a6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80008aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ac:	2302      	movs	r3, #2
 80008ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b4:	2300      	movs	r3, #0
 80008b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008b8:	230a      	movs	r3, #10
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	4619      	mov	r1, r3
 80008c2:	481c      	ldr	r0, [pc, #112]	; (8000934 <MX_GPIO_Init+0x20c>)
 80008c4:	f000 fb00 	bl	8000ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008c8:	2320      	movs	r3, #32
 80008ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	4619      	mov	r1, r3
 80008da:	4814      	ldr	r0, [pc, #80]	; (800092c <MX_GPIO_Init+0x204>)
 80008dc:	f000 faf4 	bl	8000ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SDA_Pin;
 80008e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008e6:	2312      	movs	r3, #18
 80008e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008ea:	2301      	movs	r3, #1
 80008ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008f2:	2304      	movs	r3, #4
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Audio_SDA_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	4619      	mov	r1, r3
 80008fc:	480e      	ldr	r0, [pc, #56]	; (8000938 <MX_GPIO_Init+0x210>)
 80008fe:	f000 fae3 	bl	8000ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000902:	2302      	movs	r3, #2
 8000904:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000906:	4b0d      	ldr	r3, [pc, #52]	; (800093c <MX_GPIO_Init+0x214>)
 8000908:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	4619      	mov	r1, r3
 8000914:	480a      	ldr	r0, [pc, #40]	; (8000940 <MX_GPIO_Init+0x218>)
 8000916:	f000 fad7 	bl	8000ec8 <HAL_GPIO_Init>

}
 800091a:	bf00      	nop
 800091c:	3728      	adds	r7, #40	; 0x28
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40023800 	.word	0x40023800
 8000928:	40020800 	.word	0x40020800
 800092c:	40020c00 	.word	0x40020c00
 8000930:	10110000 	.word	0x10110000
 8000934:	40020000 	.word	0x40020000
 8000938:	40020400 	.word	0x40020400
 800093c:	10120000 	.word	0x10120000
 8000940:	40021000 	.word	0x40021000

08000944 <led_task_handler>:

void led_task_handler(void* params){
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]

	while(1){
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 800094c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000950:	4803      	ldr	r0, [pc, #12]	; (8000960 <led_task_handler+0x1c>)
 8000952:	f000 fc84 	bl	800125e <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(1000));
 8000956:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800095a:	f001 ffed 	bl	8002938 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 800095e:	e7f5      	b.n	800094c <led_task_handler+0x8>
 8000960:	40020c00 	.word	0x40020c00

08000964 <uart_task_handler>:
	}

}

void uart_task_handler(void* params){
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]

	while(1){
		sprintf(usr_msg, "The state of the LED is %d\r\n", HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15));
 800096c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000970:	480c      	ldr	r0, [pc, #48]	; (80009a4 <uart_task_handler+0x40>)
 8000972:	f000 fc43 	bl	80011fc <HAL_GPIO_ReadPin>
 8000976:	4603      	mov	r3, r0
 8000978:	461a      	mov	r2, r3
 800097a:	490b      	ldr	r1, [pc, #44]	; (80009a8 <uart_task_handler+0x44>)
 800097c:	480b      	ldr	r0, [pc, #44]	; (80009ac <uart_task_handler+0x48>)
 800097e:	f002 ff95 	bl	80038ac <siprintf>
		HAL_UART_Transmit(&huart5, (uint8_t *) usr_msg, strlen(usr_msg), 999);
 8000982:	480a      	ldr	r0, [pc, #40]	; (80009ac <uart_task_handler+0x48>)
 8000984:	f7ff fc24 	bl	80001d0 <strlen>
 8000988:	4603      	mov	r3, r0
 800098a:	b29a      	uxth	r2, r3
 800098c:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000990:	4906      	ldr	r1, [pc, #24]	; (80009ac <uart_task_handler+0x48>)
 8000992:	4807      	ldr	r0, [pc, #28]	; (80009b0 <uart_task_handler+0x4c>)
 8000994:	f001 f92d 	bl	8001bf2 <HAL_UART_Transmit>
		vTaskDelay(pdMS_TO_TICKS(1000));
 8000998:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800099c:	f001 ffcc 	bl	8002938 <vTaskDelay>
		sprintf(usr_msg, "The state of the LED is %d\r\n", HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15));
 80009a0:	e7e4      	b.n	800096c <uart_task_handler+0x8>
 80009a2:	bf00      	nop
 80009a4:	40020c00 	.word	0x40020c00
 80009a8:	080040d4 	.word	0x080040d4
 80009ac:	200002e4 	.word	0x200002e4
 80009b0:	20004140 	.word	0x20004140

080009b4 <Error_Handler>:
	}
}

void Error_Handler(void){
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b8:	b672      	cpsid	i

  __disable_irq();
  while (1);
 80009ba:	e7fe      	b.n	80009ba <Error_Handler+0x6>

080009bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <HAL_MspInit+0x54>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ca:	4a11      	ldr	r2, [pc, #68]	; (8000a10 <HAL_MspInit+0x54>)
 80009cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d0:	6453      	str	r3, [r2, #68]	; 0x44
 80009d2:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <HAL_MspInit+0x54>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	603b      	str	r3, [r7, #0]
 80009e2:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <HAL_MspInit+0x54>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e6:	4a0a      	ldr	r2, [pc, #40]	; (8000a10 <HAL_MspInit+0x54>)
 80009e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ec:	6413      	str	r3, [r2, #64]	; 0x40
 80009ee:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <HAL_MspInit+0x54>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f6:	603b      	str	r3, [r7, #0]
 80009f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009fa:	2200      	movs	r2, #0
 80009fc:	210f      	movs	r1, #15
 80009fe:	f06f 0001 	mvn.w	r0, #1
 8000a02:	f000 fa38 	bl	8000e76 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800

08000a14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08a      	sub	sp, #40	; 0x28
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a28      	ldr	r2, [pc, #160]	; (8000ad4 <HAL_UART_MspInit+0xc0>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d14a      	bne.n	8000acc <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	613b      	str	r3, [r7, #16]
 8000a3a:	4b27      	ldr	r3, [pc, #156]	; (8000ad8 <HAL_UART_MspInit+0xc4>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3e:	4a26      	ldr	r2, [pc, #152]	; (8000ad8 <HAL_UART_MspInit+0xc4>)
 8000a40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000a44:	6413      	str	r3, [r2, #64]	; 0x40
 8000a46:	4b24      	ldr	r3, [pc, #144]	; (8000ad8 <HAL_UART_MspInit+0xc4>)
 8000a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a4e:	613b      	str	r3, [r7, #16]
 8000a50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	4b20      	ldr	r3, [pc, #128]	; (8000ad8 <HAL_UART_MspInit+0xc4>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a1f      	ldr	r2, [pc, #124]	; (8000ad8 <HAL_UART_MspInit+0xc4>)
 8000a5c:	f043 0304 	orr.w	r3, r3, #4
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
 8000a62:	4b1d      	ldr	r3, [pc, #116]	; (8000ad8 <HAL_UART_MspInit+0xc4>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f003 0304 	and.w	r3, r3, #4
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60bb      	str	r3, [r7, #8]
 8000a72:	4b19      	ldr	r3, [pc, #100]	; (8000ad8 <HAL_UART_MspInit+0xc4>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	4a18      	ldr	r2, [pc, #96]	; (8000ad8 <HAL_UART_MspInit+0xc4>)
 8000a78:	f043 0308 	orr.w	r3, r3, #8
 8000a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7e:	4b16      	ldr	r3, [pc, #88]	; (8000ad8 <HAL_UART_MspInit+0xc4>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	f003 0308 	and.w	r3, r3, #8
 8000a86:	60bb      	str	r3, [r7, #8]
 8000a88:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a90:	2302      	movs	r3, #2
 8000a92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a94:	2301      	movs	r3, #1
 8000a96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000a9c:	2308      	movs	r3, #8
 8000a9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	480d      	ldr	r0, [pc, #52]	; (8000adc <HAL_UART_MspInit+0xc8>)
 8000aa8:	f000 fa0e 	bl	8000ec8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000aac:	2304      	movs	r3, #4
 8000aae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab8:	2303      	movs	r3, #3
 8000aba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000abc:	2308      	movs	r3, #8
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4806      	ldr	r0, [pc, #24]	; (8000ae0 <HAL_UART_MspInit+0xcc>)
 8000ac8:	f000 f9fe 	bl	8000ec8 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8000acc:	bf00      	nop
 8000ace:	3728      	adds	r7, #40	; 0x28
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40005000 	.word	0x40005000
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	40020800 	.word	0x40020800
 8000ae0:	40020c00 	.word	0x40020c00

08000ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <NMI_Handler+0x4>

08000aea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aee:	e7fe      	b.n	8000aee <HardFault_Handler+0x4>

08000af0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <MemManage_Handler+0x4>

08000af6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000afa:	e7fe      	b.n	8000afa <BusFault_Handler+0x4>

08000afc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <UsageFault_Handler+0x4>

08000b02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b14:	f000 f8d2 	bl	8000cbc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000b18:	f002 fa2e 	bl	8002f78 <xTaskGetSchedulerState>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d001      	beq.n	8000b26 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b22:	f002 fc61 	bl	80033e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
	...

08000b2c <_sbrk>:
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	4a14      	ldr	r2, [pc, #80]	; (8000b88 <_sbrk+0x5c>)
 8000b36:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <_sbrk+0x60>)
 8000b38:	1ad3      	subs	r3, r2, r3
 8000b3a:	617b      	str	r3, [r7, #20]
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	613b      	str	r3, [r7, #16]
 8000b40:	4b13      	ldr	r3, [pc, #76]	; (8000b90 <_sbrk+0x64>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d102      	bne.n	8000b4e <_sbrk+0x22>
 8000b48:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <_sbrk+0x64>)
 8000b4a:	4a12      	ldr	r2, [pc, #72]	; (8000b94 <_sbrk+0x68>)
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <_sbrk+0x64>)
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4413      	add	r3, r2
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d207      	bcs.n	8000b6c <_sbrk+0x40>
 8000b5c:	f002 fe68 	bl	8003830 <__errno>
 8000b60:	4602      	mov	r2, r0
 8000b62:	230c      	movs	r3, #12
 8000b64:	6013      	str	r3, [r2, #0]
 8000b66:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6a:	e009      	b.n	8000b80 <_sbrk+0x54>
 8000b6c:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <_sbrk+0x64>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <_sbrk+0x64>)
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4413      	add	r3, r2
 8000b7a:	4a05      	ldr	r2, [pc, #20]	; (8000b90 <_sbrk+0x64>)
 8000b7c:	6013      	str	r3, [r2, #0]
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	4618      	mov	r0, r3
 8000b82:	3718      	adds	r7, #24
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20020000 	.word	0x20020000
 8000b8c:	00000400 	.word	0x00000400
 8000b90:	200003e8 	.word	0x200003e8
 8000b94:	20004188 	.word	0x20004188

08000b98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b9c:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <SystemInit+0x28>)
 8000b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ba2:	4a07      	ldr	r2, [pc, #28]	; (8000bc0 <SystemInit+0x28>)
 8000ba4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ba8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bac:	4b04      	ldr	r3, [pc, #16]	; (8000bc0 <SystemInit+0x28>)
 8000bae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bb2:	609a      	str	r2, [r3, #8]
#endif
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bfc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000bc8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000bca:	e003      	b.n	8000bd4 <LoopCopyDataInit>

08000bcc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000bce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000bd0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000bd2:	3104      	adds	r1, #4

08000bd4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000bd4:	480b      	ldr	r0, [pc, #44]	; (8000c04 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000bd6:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000bd8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000bda:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000bdc:	d3f6      	bcc.n	8000bcc <CopyDataInit>
  ldr  r2, =_sbss
 8000bde:	4a0b      	ldr	r2, [pc, #44]	; (8000c0c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000be0:	e002      	b.n	8000be8 <LoopFillZerobss>

08000be2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000be2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000be4:	f842 3b04 	str.w	r3, [r2], #4

08000be8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000be8:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000bea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000bec:	d3f9      	bcc.n	8000be2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bee:	f7ff ffd3 	bl	8000b98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bf2:	f002 fe23 	bl	800383c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bf6:	f7ff fcdd 	bl	80005b4 <main>
  bx  lr    
 8000bfa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bfc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000c00:	08004158 	.word	0x08004158
  ldr  r0, =_sdata
 8000c04:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c08:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000c0c:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000c10:	20004188 	.word	0x20004188

08000c14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c14:	e7fe      	b.n	8000c14 <ADC_IRQHandler>
	...

08000c18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c1c:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <HAL_Init+0x40>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a0d      	ldr	r2, [pc, #52]	; (8000c58 <HAL_Init+0x40>)
 8000c22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c28:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <HAL_Init+0x40>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a0a      	ldr	r2, [pc, #40]	; (8000c58 <HAL_Init+0x40>)
 8000c2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c34:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <HAL_Init+0x40>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a07      	ldr	r2, [pc, #28]	; (8000c58 <HAL_Init+0x40>)
 8000c3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c40:	2003      	movs	r0, #3
 8000c42:	f000 f90d 	bl	8000e60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c46:	200f      	movs	r0, #15
 8000c48:	f000 f808 	bl	8000c5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c4c:	f7ff feb6 	bl	80009bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40023c00 	.word	0x40023c00

08000c5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c64:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <HAL_InitTick+0x54>)
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <HAL_InitTick+0x58>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f000 f917 	bl	8000eae <HAL_SYSTICK_Config>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	e00e      	b.n	8000ca8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2b0f      	cmp	r3, #15
 8000c8e:	d80a      	bhi.n	8000ca6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c90:	2200      	movs	r2, #0
 8000c92:	6879      	ldr	r1, [r7, #4]
 8000c94:	f04f 30ff 	mov.w	r0, #4294967295
 8000c98:	f000 f8ed 	bl	8000e76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c9c:	4a06      	ldr	r2, [pc, #24]	; (8000cb8 <HAL_InitTick+0x5c>)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e000      	b.n	8000ca8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20000000 	.word	0x20000000
 8000cb4:	20000008 	.word	0x20000008
 8000cb8:	20000004 	.word	0x20000004

08000cbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <HAL_IncTick+0x20>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_IncTick+0x24>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4413      	add	r3, r2
 8000ccc:	4a04      	ldr	r2, [pc, #16]	; (8000ce0 <HAL_IncTick+0x24>)
 8000cce:	6013      	str	r3, [r2, #0]
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	20000008 	.word	0x20000008
 8000ce0:	20004180 	.word	0x20004180

08000ce4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce8:	4b03      	ldr	r3, [pc, #12]	; (8000cf8 <HAL_GetTick+0x14>)
 8000cea:	681b      	ldr	r3, [r3, #0]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	20004180 	.word	0x20004180

08000cfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <__NVIC_SetPriorityGrouping+0x44>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d12:	68ba      	ldr	r2, [r7, #8]
 8000d14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d18:	4013      	ands	r3, r2
 8000d1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d2e:	4a04      	ldr	r2, [pc, #16]	; (8000d40 <__NVIC_SetPriorityGrouping+0x44>)
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	60d3      	str	r3, [r2, #12]
}
 8000d34:	bf00      	nop
 8000d36:	3714      	adds	r7, #20
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d48:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <__NVIC_GetPriorityGrouping+0x18>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	0a1b      	lsrs	r3, r3, #8
 8000d4e:	f003 0307 	and.w	r3, r3, #7
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	6039      	str	r1, [r7, #0]
 8000d6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	db0a      	blt.n	8000d8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	490c      	ldr	r1, [pc, #48]	; (8000dac <__NVIC_SetPriority+0x4c>)
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	0112      	lsls	r2, r2, #4
 8000d80:	b2d2      	uxtb	r2, r2
 8000d82:	440b      	add	r3, r1
 8000d84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d88:	e00a      	b.n	8000da0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	4908      	ldr	r1, [pc, #32]	; (8000db0 <__NVIC_SetPriority+0x50>)
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	f003 030f 	and.w	r3, r3, #15
 8000d96:	3b04      	subs	r3, #4
 8000d98:	0112      	lsls	r2, r2, #4
 8000d9a:	b2d2      	uxtb	r2, r2
 8000d9c:	440b      	add	r3, r1
 8000d9e:	761a      	strb	r2, [r3, #24]
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000e100 	.word	0xe000e100
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b089      	sub	sp, #36	; 0x24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	f1c3 0307 	rsb	r3, r3, #7
 8000dce:	2b04      	cmp	r3, #4
 8000dd0:	bf28      	it	cs
 8000dd2:	2304      	movcs	r3, #4
 8000dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	3304      	adds	r3, #4
 8000dda:	2b06      	cmp	r3, #6
 8000ddc:	d902      	bls.n	8000de4 <NVIC_EncodePriority+0x30>
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	3b03      	subs	r3, #3
 8000de2:	e000      	b.n	8000de6 <NVIC_EncodePriority+0x32>
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43da      	mvns	r2, r3
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	401a      	ands	r2, r3
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	fa01 f303 	lsl.w	r3, r1, r3
 8000e06:	43d9      	mvns	r1, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e0c:	4313      	orrs	r3, r2
         );
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3724      	adds	r7, #36	; 0x24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
	...

08000e1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3b01      	subs	r3, #1
 8000e28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e2c:	d301      	bcc.n	8000e32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e00f      	b.n	8000e52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e32:	4a0a      	ldr	r2, [pc, #40]	; (8000e5c <SysTick_Config+0x40>)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3b01      	subs	r3, #1
 8000e38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e3a:	210f      	movs	r1, #15
 8000e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e40:	f7ff ff8e 	bl	8000d60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e44:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <SysTick_Config+0x40>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e4a:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <SysTick_Config+0x40>)
 8000e4c:	2207      	movs	r2, #7
 8000e4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	e000e010 	.word	0xe000e010

08000e60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f7ff ff47 	bl	8000cfc <__NVIC_SetPriorityGrouping>
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b086      	sub	sp, #24
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	60b9      	str	r1, [r7, #8]
 8000e80:	607a      	str	r2, [r7, #4]
 8000e82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e88:	f7ff ff5c 	bl	8000d44 <__NVIC_GetPriorityGrouping>
 8000e8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	68b9      	ldr	r1, [r7, #8]
 8000e92:	6978      	ldr	r0, [r7, #20]
 8000e94:	f7ff ff8e 	bl	8000db4 <NVIC_EncodePriority>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e9e:	4611      	mov	r1, r2
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff ff5d 	bl	8000d60 <__NVIC_SetPriority>
}
 8000ea6:	bf00      	nop
 8000ea8:	3718      	adds	r7, #24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b082      	sub	sp, #8
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f7ff ffb0 	bl	8000e1c <SysTick_Config>
 8000ebc:	4603      	mov	r3, r0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
	...

08000ec8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b089      	sub	sp, #36	; 0x24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61fb      	str	r3, [r7, #28]
 8000ee2:	e16b      	b.n	80011bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	697a      	ldr	r2, [r7, #20]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	f040 815a 	bne.w	80011b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d00b      	beq.n	8000f22 <HAL_GPIO_Init+0x5a>
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	d007      	beq.n	8000f22 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f16:	2b11      	cmp	r3, #17
 8000f18:	d003      	beq.n	8000f22 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	2b12      	cmp	r3, #18
 8000f20:	d130      	bne.n	8000f84 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	2203      	movs	r2, #3
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43db      	mvns	r3, r3
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	4013      	ands	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	68da      	ldr	r2, [r3, #12]
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f58:	2201      	movs	r2, #1
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	4013      	ands	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	091b      	lsrs	r3, r3, #4
 8000f6e:	f003 0201 	and.w	r2, r3, #1
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	2203      	movs	r2, #3
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	689a      	ldr	r2, [r3, #8]
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d003      	beq.n	8000fc4 <HAL_GPIO_Init+0xfc>
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	2b12      	cmp	r3, #18
 8000fc2:	d123      	bne.n	800100c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	08da      	lsrs	r2, r3, #3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3208      	adds	r2, #8
 8000fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	f003 0307 	and.w	r3, r3, #7
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	220f      	movs	r2, #15
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	691a      	ldr	r2, [r3, #16]
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	08da      	lsrs	r2, r3, #3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	3208      	adds	r2, #8
 8001006:	69b9      	ldr	r1, [r7, #24]
 8001008:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	2203      	movs	r2, #3
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4013      	ands	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f003 0203 	and.w	r2, r3, #3
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001048:	2b00      	cmp	r3, #0
 800104a:	f000 80b4 	beq.w	80011b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	4b5f      	ldr	r3, [pc, #380]	; (80011d0 <HAL_GPIO_Init+0x308>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001056:	4a5e      	ldr	r2, [pc, #376]	; (80011d0 <HAL_GPIO_Init+0x308>)
 8001058:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800105c:	6453      	str	r3, [r2, #68]	; 0x44
 800105e:	4b5c      	ldr	r3, [pc, #368]	; (80011d0 <HAL_GPIO_Init+0x308>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001062:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800106a:	4a5a      	ldr	r2, [pc, #360]	; (80011d4 <HAL_GPIO_Init+0x30c>)
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	089b      	lsrs	r3, r3, #2
 8001070:	3302      	adds	r3, #2
 8001072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001076:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	f003 0303 	and.w	r3, r3, #3
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	220f      	movs	r2, #15
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43db      	mvns	r3, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4013      	ands	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a51      	ldr	r2, [pc, #324]	; (80011d8 <HAL_GPIO_Init+0x310>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d02b      	beq.n	80010ee <HAL_GPIO_Init+0x226>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a50      	ldr	r2, [pc, #320]	; (80011dc <HAL_GPIO_Init+0x314>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d025      	beq.n	80010ea <HAL_GPIO_Init+0x222>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a4f      	ldr	r2, [pc, #316]	; (80011e0 <HAL_GPIO_Init+0x318>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d01f      	beq.n	80010e6 <HAL_GPIO_Init+0x21e>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a4e      	ldr	r2, [pc, #312]	; (80011e4 <HAL_GPIO_Init+0x31c>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d019      	beq.n	80010e2 <HAL_GPIO_Init+0x21a>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a4d      	ldr	r2, [pc, #308]	; (80011e8 <HAL_GPIO_Init+0x320>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d013      	beq.n	80010de <HAL_GPIO_Init+0x216>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a4c      	ldr	r2, [pc, #304]	; (80011ec <HAL_GPIO_Init+0x324>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d00d      	beq.n	80010da <HAL_GPIO_Init+0x212>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a4b      	ldr	r2, [pc, #300]	; (80011f0 <HAL_GPIO_Init+0x328>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d007      	beq.n	80010d6 <HAL_GPIO_Init+0x20e>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a4a      	ldr	r2, [pc, #296]	; (80011f4 <HAL_GPIO_Init+0x32c>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d101      	bne.n	80010d2 <HAL_GPIO_Init+0x20a>
 80010ce:	2307      	movs	r3, #7
 80010d0:	e00e      	b.n	80010f0 <HAL_GPIO_Init+0x228>
 80010d2:	2308      	movs	r3, #8
 80010d4:	e00c      	b.n	80010f0 <HAL_GPIO_Init+0x228>
 80010d6:	2306      	movs	r3, #6
 80010d8:	e00a      	b.n	80010f0 <HAL_GPIO_Init+0x228>
 80010da:	2305      	movs	r3, #5
 80010dc:	e008      	b.n	80010f0 <HAL_GPIO_Init+0x228>
 80010de:	2304      	movs	r3, #4
 80010e0:	e006      	b.n	80010f0 <HAL_GPIO_Init+0x228>
 80010e2:	2303      	movs	r3, #3
 80010e4:	e004      	b.n	80010f0 <HAL_GPIO_Init+0x228>
 80010e6:	2302      	movs	r3, #2
 80010e8:	e002      	b.n	80010f0 <HAL_GPIO_Init+0x228>
 80010ea:	2301      	movs	r3, #1
 80010ec:	e000      	b.n	80010f0 <HAL_GPIO_Init+0x228>
 80010ee:	2300      	movs	r3, #0
 80010f0:	69fa      	ldr	r2, [r7, #28]
 80010f2:	f002 0203 	and.w	r2, r2, #3
 80010f6:	0092      	lsls	r2, r2, #2
 80010f8:	4093      	lsls	r3, r2
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001100:	4934      	ldr	r1, [pc, #208]	; (80011d4 <HAL_GPIO_Init+0x30c>)
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	089b      	lsrs	r3, r3, #2
 8001106:	3302      	adds	r3, #2
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800110e:	4b3a      	ldr	r3, [pc, #232]	; (80011f8 <HAL_GPIO_Init+0x330>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	43db      	mvns	r3, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4013      	ands	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d003      	beq.n	8001132 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	4313      	orrs	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001132:	4a31      	ldr	r2, [pc, #196]	; (80011f8 <HAL_GPIO_Init+0x330>)
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001138:	4b2f      	ldr	r3, [pc, #188]	; (80011f8 <HAL_GPIO_Init+0x330>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	43db      	mvns	r3, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4013      	ands	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d003      	beq.n	800115c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	4313      	orrs	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800115c:	4a26      	ldr	r2, [pc, #152]	; (80011f8 <HAL_GPIO_Init+0x330>)
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001162:	4b25      	ldr	r3, [pc, #148]	; (80011f8 <HAL_GPIO_Init+0x330>)
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	43db      	mvns	r3, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4013      	ands	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	4313      	orrs	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001186:	4a1c      	ldr	r2, [pc, #112]	; (80011f8 <HAL_GPIO_Init+0x330>)
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800118c:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <HAL_GPIO_Init+0x330>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	43db      	mvns	r3, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4013      	ands	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d003      	beq.n	80011b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011b0:	4a11      	ldr	r2, [pc, #68]	; (80011f8 <HAL_GPIO_Init+0x330>)
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	3301      	adds	r3, #1
 80011ba:	61fb      	str	r3, [r7, #28]
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	2b0f      	cmp	r3, #15
 80011c0:	f67f ae90 	bls.w	8000ee4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011c4:	bf00      	nop
 80011c6:	3724      	adds	r7, #36	; 0x24
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	40023800 	.word	0x40023800
 80011d4:	40013800 	.word	0x40013800
 80011d8:	40020000 	.word	0x40020000
 80011dc:	40020400 	.word	0x40020400
 80011e0:	40020800 	.word	0x40020800
 80011e4:	40020c00 	.word	0x40020c00
 80011e8:	40021000 	.word	0x40021000
 80011ec:	40021400 	.word	0x40021400
 80011f0:	40021800 	.word	0x40021800
 80011f4:	40021c00 	.word	0x40021c00
 80011f8:	40013c00 	.word	0x40013c00

080011fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	460b      	mov	r3, r1
 8001206:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	691a      	ldr	r2, [r3, #16]
 800120c:	887b      	ldrh	r3, [r7, #2]
 800120e:	4013      	ands	r3, r2
 8001210:	2b00      	cmp	r3, #0
 8001212:	d002      	beq.n	800121a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001214:	2301      	movs	r3, #1
 8001216:	73fb      	strb	r3, [r7, #15]
 8001218:	e001      	b.n	800121e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800121a:	2300      	movs	r3, #0
 800121c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800121e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001220:	4618      	mov	r0, r3
 8001222:	3714      	adds	r7, #20
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	460b      	mov	r3, r1
 8001236:	807b      	strh	r3, [r7, #2]
 8001238:	4613      	mov	r3, r2
 800123a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800123c:	787b      	ldrb	r3, [r7, #1]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d003      	beq.n	800124a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001242:	887a      	ldrh	r2, [r7, #2]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001248:	e003      	b.n	8001252 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800124a:	887b      	ldrh	r3, [r7, #2]
 800124c:	041a      	lsls	r2, r3, #16
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	619a      	str	r2, [r3, #24]
}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800125e:	b480      	push	{r7}
 8001260:	b083      	sub	sp, #12
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
 8001266:	460b      	mov	r3, r1
 8001268:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	695a      	ldr	r2, [r3, #20]
 800126e:	887b      	ldrh	r3, [r7, #2]
 8001270:	401a      	ands	r2, r3
 8001272:	887b      	ldrh	r3, [r7, #2]
 8001274:	429a      	cmp	r2, r3
 8001276:	d104      	bne.n	8001282 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001278:	887b      	ldrh	r3, [r7, #2]
 800127a:	041a      	lsls	r2, r3, #16
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001280:	e002      	b.n	8001288 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001282:	887a      	ldrh	r2, [r7, #2]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	619a      	str	r2, [r3, #24]
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d101      	bne.n	80012a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e25b      	b.n	800175e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d075      	beq.n	800139e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012b2:	4ba3      	ldr	r3, [pc, #652]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f003 030c 	and.w	r3, r3, #12
 80012ba:	2b04      	cmp	r3, #4
 80012bc:	d00c      	beq.n	80012d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012be:	4ba0      	ldr	r3, [pc, #640]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012c6:	2b08      	cmp	r3, #8
 80012c8:	d112      	bne.n	80012f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ca:	4b9d      	ldr	r3, [pc, #628]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012d6:	d10b      	bne.n	80012f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d8:	4b99      	ldr	r3, [pc, #612]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d05b      	beq.n	800139c <HAL_RCC_OscConfig+0x108>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d157      	bne.n	800139c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e236      	b.n	800175e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012f8:	d106      	bne.n	8001308 <HAL_RCC_OscConfig+0x74>
 80012fa:	4b91      	ldr	r3, [pc, #580]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a90      	ldr	r2, [pc, #576]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 8001300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001304:	6013      	str	r3, [r2, #0]
 8001306:	e01d      	b.n	8001344 <HAL_RCC_OscConfig+0xb0>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001310:	d10c      	bne.n	800132c <HAL_RCC_OscConfig+0x98>
 8001312:	4b8b      	ldr	r3, [pc, #556]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a8a      	ldr	r2, [pc, #552]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 8001318:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800131c:	6013      	str	r3, [r2, #0]
 800131e:	4b88      	ldr	r3, [pc, #544]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a87      	ldr	r2, [pc, #540]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 8001324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001328:	6013      	str	r3, [r2, #0]
 800132a:	e00b      	b.n	8001344 <HAL_RCC_OscConfig+0xb0>
 800132c:	4b84      	ldr	r3, [pc, #528]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a83      	ldr	r2, [pc, #524]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 8001332:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	4b81      	ldr	r3, [pc, #516]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a80      	ldr	r2, [pc, #512]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 800133e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001342:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d013      	beq.n	8001374 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134c:	f7ff fcca 	bl	8000ce4 <HAL_GetTick>
 8001350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001352:	e008      	b.n	8001366 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001354:	f7ff fcc6 	bl	8000ce4 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b64      	cmp	r3, #100	; 0x64
 8001360:	d901      	bls.n	8001366 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e1fb      	b.n	800175e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001366:	4b76      	ldr	r3, [pc, #472]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d0f0      	beq.n	8001354 <HAL_RCC_OscConfig+0xc0>
 8001372:	e014      	b.n	800139e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001374:	f7ff fcb6 	bl	8000ce4 <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800137c:	f7ff fcb2 	bl	8000ce4 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b64      	cmp	r3, #100	; 0x64
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e1e7      	b.n	800175e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800138e:	4b6c      	ldr	r3, [pc, #432]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1f0      	bne.n	800137c <HAL_RCC_OscConfig+0xe8>
 800139a:	e000      	b.n	800139e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800139c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d063      	beq.n	8001472 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013aa:	4b65      	ldr	r3, [pc, #404]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	f003 030c 	and.w	r3, r3, #12
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d00b      	beq.n	80013ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013b6:	4b62      	ldr	r3, [pc, #392]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013be:	2b08      	cmp	r3, #8
 80013c0:	d11c      	bne.n	80013fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013c2:	4b5f      	ldr	r3, [pc, #380]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d116      	bne.n	80013fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ce:	4b5c      	ldr	r3, [pc, #368]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d005      	beq.n	80013e6 <HAL_RCC_OscConfig+0x152>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	68db      	ldr	r3, [r3, #12]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d001      	beq.n	80013e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e1bb      	b.n	800175e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e6:	4b56      	ldr	r3, [pc, #344]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	691b      	ldr	r3, [r3, #16]
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	4952      	ldr	r1, [pc, #328]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 80013f6:	4313      	orrs	r3, r2
 80013f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013fa:	e03a      	b.n	8001472 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d020      	beq.n	8001446 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001404:	4b4f      	ldr	r3, [pc, #316]	; (8001544 <HAL_RCC_OscConfig+0x2b0>)
 8001406:	2201      	movs	r2, #1
 8001408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800140a:	f7ff fc6b 	bl	8000ce4 <HAL_GetTick>
 800140e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001410:	e008      	b.n	8001424 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001412:	f7ff fc67 	bl	8000ce4 <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d901      	bls.n	8001424 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e19c      	b.n	800175e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001424:	4b46      	ldr	r3, [pc, #280]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	2b00      	cmp	r3, #0
 800142e:	d0f0      	beq.n	8001412 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001430:	4b43      	ldr	r3, [pc, #268]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	691b      	ldr	r3, [r3, #16]
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	4940      	ldr	r1, [pc, #256]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 8001440:	4313      	orrs	r3, r2
 8001442:	600b      	str	r3, [r1, #0]
 8001444:	e015      	b.n	8001472 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001446:	4b3f      	ldr	r3, [pc, #252]	; (8001544 <HAL_RCC_OscConfig+0x2b0>)
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800144c:	f7ff fc4a 	bl	8000ce4 <HAL_GetTick>
 8001450:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001452:	e008      	b.n	8001466 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001454:	f7ff fc46 	bl	8000ce4 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b02      	cmp	r3, #2
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e17b      	b.n	800175e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001466:	4b36      	ldr	r3, [pc, #216]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1f0      	bne.n	8001454 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0308 	and.w	r3, r3, #8
 800147a:	2b00      	cmp	r3, #0
 800147c:	d030      	beq.n	80014e0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d016      	beq.n	80014b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001486:	4b30      	ldr	r3, [pc, #192]	; (8001548 <HAL_RCC_OscConfig+0x2b4>)
 8001488:	2201      	movs	r2, #1
 800148a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800148c:	f7ff fc2a 	bl	8000ce4 <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001494:	f7ff fc26 	bl	8000ce4 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e15b      	b.n	800175e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014a6:	4b26      	ldr	r3, [pc, #152]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 80014a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d0f0      	beq.n	8001494 <HAL_RCC_OscConfig+0x200>
 80014b2:	e015      	b.n	80014e0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014b4:	4b24      	ldr	r3, [pc, #144]	; (8001548 <HAL_RCC_OscConfig+0x2b4>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ba:	f7ff fc13 	bl	8000ce4 <HAL_GetTick>
 80014be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014c2:	f7ff fc0f 	bl	8000ce4 <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e144      	b.n	800175e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d4:	4b1a      	ldr	r3, [pc, #104]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 80014d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014d8:	f003 0302 	and.w	r3, r3, #2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1f0      	bne.n	80014c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0304 	and.w	r3, r3, #4
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f000 80a0 	beq.w	800162e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014ee:	2300      	movs	r3, #0
 80014f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014f2:	4b13      	ldr	r3, [pc, #76]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d10f      	bne.n	800151e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	4a0e      	ldr	r2, [pc, #56]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 8001508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800150c:	6413      	str	r3, [r2, #64]	; 0x40
 800150e:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800151a:	2301      	movs	r3, #1
 800151c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800151e:	4b0b      	ldr	r3, [pc, #44]	; (800154c <HAL_RCC_OscConfig+0x2b8>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001526:	2b00      	cmp	r3, #0
 8001528:	d121      	bne.n	800156e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800152a:	4b08      	ldr	r3, [pc, #32]	; (800154c <HAL_RCC_OscConfig+0x2b8>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a07      	ldr	r2, [pc, #28]	; (800154c <HAL_RCC_OscConfig+0x2b8>)
 8001530:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001534:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001536:	f7ff fbd5 	bl	8000ce4 <HAL_GetTick>
 800153a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800153c:	e011      	b.n	8001562 <HAL_RCC_OscConfig+0x2ce>
 800153e:	bf00      	nop
 8001540:	40023800 	.word	0x40023800
 8001544:	42470000 	.word	0x42470000
 8001548:	42470e80 	.word	0x42470e80
 800154c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001550:	f7ff fbc8 	bl	8000ce4 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b02      	cmp	r3, #2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e0fd      	b.n	800175e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001562:	4b81      	ldr	r3, [pc, #516]	; (8001768 <HAL_RCC_OscConfig+0x4d4>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800156a:	2b00      	cmp	r3, #0
 800156c:	d0f0      	beq.n	8001550 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d106      	bne.n	8001584 <HAL_RCC_OscConfig+0x2f0>
 8001576:	4b7d      	ldr	r3, [pc, #500]	; (800176c <HAL_RCC_OscConfig+0x4d8>)
 8001578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800157a:	4a7c      	ldr	r2, [pc, #496]	; (800176c <HAL_RCC_OscConfig+0x4d8>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	6713      	str	r3, [r2, #112]	; 0x70
 8001582:	e01c      	b.n	80015be <HAL_RCC_OscConfig+0x32a>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	2b05      	cmp	r3, #5
 800158a:	d10c      	bne.n	80015a6 <HAL_RCC_OscConfig+0x312>
 800158c:	4b77      	ldr	r3, [pc, #476]	; (800176c <HAL_RCC_OscConfig+0x4d8>)
 800158e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001590:	4a76      	ldr	r2, [pc, #472]	; (800176c <HAL_RCC_OscConfig+0x4d8>)
 8001592:	f043 0304 	orr.w	r3, r3, #4
 8001596:	6713      	str	r3, [r2, #112]	; 0x70
 8001598:	4b74      	ldr	r3, [pc, #464]	; (800176c <HAL_RCC_OscConfig+0x4d8>)
 800159a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800159c:	4a73      	ldr	r2, [pc, #460]	; (800176c <HAL_RCC_OscConfig+0x4d8>)
 800159e:	f043 0301 	orr.w	r3, r3, #1
 80015a2:	6713      	str	r3, [r2, #112]	; 0x70
 80015a4:	e00b      	b.n	80015be <HAL_RCC_OscConfig+0x32a>
 80015a6:	4b71      	ldr	r3, [pc, #452]	; (800176c <HAL_RCC_OscConfig+0x4d8>)
 80015a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015aa:	4a70      	ldr	r2, [pc, #448]	; (800176c <HAL_RCC_OscConfig+0x4d8>)
 80015ac:	f023 0301 	bic.w	r3, r3, #1
 80015b0:	6713      	str	r3, [r2, #112]	; 0x70
 80015b2:	4b6e      	ldr	r3, [pc, #440]	; (800176c <HAL_RCC_OscConfig+0x4d8>)
 80015b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b6:	4a6d      	ldr	r2, [pc, #436]	; (800176c <HAL_RCC_OscConfig+0x4d8>)
 80015b8:	f023 0304 	bic.w	r3, r3, #4
 80015bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d015      	beq.n	80015f2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c6:	f7ff fb8d 	bl	8000ce4 <HAL_GetTick>
 80015ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015cc:	e00a      	b.n	80015e4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015ce:	f7ff fb89 	bl	8000ce4 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015dc:	4293      	cmp	r3, r2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e0bc      	b.n	800175e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015e4:	4b61      	ldr	r3, [pc, #388]	; (800176c <HAL_RCC_OscConfig+0x4d8>)
 80015e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d0ee      	beq.n	80015ce <HAL_RCC_OscConfig+0x33a>
 80015f0:	e014      	b.n	800161c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f2:	f7ff fb77 	bl	8000ce4 <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015f8:	e00a      	b.n	8001610 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015fa:	f7ff fb73 	bl	8000ce4 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	f241 3288 	movw	r2, #5000	; 0x1388
 8001608:	4293      	cmp	r3, r2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e0a6      	b.n	800175e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001610:	4b56      	ldr	r3, [pc, #344]	; (800176c <HAL_RCC_OscConfig+0x4d8>)
 8001612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1ee      	bne.n	80015fa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800161c:	7dfb      	ldrb	r3, [r7, #23]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d105      	bne.n	800162e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001622:	4b52      	ldr	r3, [pc, #328]	; (800176c <HAL_RCC_OscConfig+0x4d8>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	4a51      	ldr	r2, [pc, #324]	; (800176c <HAL_RCC_OscConfig+0x4d8>)
 8001628:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800162c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	2b00      	cmp	r3, #0
 8001634:	f000 8092 	beq.w	800175c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001638:	4b4c      	ldr	r3, [pc, #304]	; (800176c <HAL_RCC_OscConfig+0x4d8>)
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	f003 030c 	and.w	r3, r3, #12
 8001640:	2b08      	cmp	r3, #8
 8001642:	d05c      	beq.n	80016fe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	2b02      	cmp	r3, #2
 800164a:	d141      	bne.n	80016d0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800164c:	4b48      	ldr	r3, [pc, #288]	; (8001770 <HAL_RCC_OscConfig+0x4dc>)
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001652:	f7ff fb47 	bl	8000ce4 <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800165a:	f7ff fb43 	bl	8000ce4 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e078      	b.n	800175e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800166c:	4b3f      	ldr	r3, [pc, #252]	; (800176c <HAL_RCC_OscConfig+0x4d8>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1f0      	bne.n	800165a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	69da      	ldr	r2, [r3, #28]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6a1b      	ldr	r3, [r3, #32]
 8001680:	431a      	orrs	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001686:	019b      	lsls	r3, r3, #6
 8001688:	431a      	orrs	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800168e:	085b      	lsrs	r3, r3, #1
 8001690:	3b01      	subs	r3, #1
 8001692:	041b      	lsls	r3, r3, #16
 8001694:	431a      	orrs	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169a:	061b      	lsls	r3, r3, #24
 800169c:	4933      	ldr	r1, [pc, #204]	; (800176c <HAL_RCC_OscConfig+0x4d8>)
 800169e:	4313      	orrs	r3, r2
 80016a0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016a2:	4b33      	ldr	r3, [pc, #204]	; (8001770 <HAL_RCC_OscConfig+0x4dc>)
 80016a4:	2201      	movs	r2, #1
 80016a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a8:	f7ff fb1c 	bl	8000ce4 <HAL_GetTick>
 80016ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016b0:	f7ff fb18 	bl	8000ce4 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e04d      	b.n	800175e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016c2:	4b2a      	ldr	r3, [pc, #168]	; (800176c <HAL_RCC_OscConfig+0x4d8>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d0f0      	beq.n	80016b0 <HAL_RCC_OscConfig+0x41c>
 80016ce:	e045      	b.n	800175c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016d0:	4b27      	ldr	r3, [pc, #156]	; (8001770 <HAL_RCC_OscConfig+0x4dc>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d6:	f7ff fb05 	bl	8000ce4 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016de:	f7ff fb01 	bl	8000ce4 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e036      	b.n	800175e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016f0:	4b1e      	ldr	r3, [pc, #120]	; (800176c <HAL_RCC_OscConfig+0x4d8>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d1f0      	bne.n	80016de <HAL_RCC_OscConfig+0x44a>
 80016fc:	e02e      	b.n	800175c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d101      	bne.n	800170a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e029      	b.n	800175e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800170a:	4b18      	ldr	r3, [pc, #96]	; (800176c <HAL_RCC_OscConfig+0x4d8>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	69db      	ldr	r3, [r3, #28]
 800171a:	429a      	cmp	r2, r3
 800171c:	d11c      	bne.n	8001758 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001728:	429a      	cmp	r2, r3
 800172a:	d115      	bne.n	8001758 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800172c:	68fa      	ldr	r2, [r7, #12]
 800172e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001732:	4013      	ands	r3, r2
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001738:	4293      	cmp	r3, r2
 800173a:	d10d      	bne.n	8001758 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001746:	429a      	cmp	r2, r3
 8001748:	d106      	bne.n	8001758 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001754:	429a      	cmp	r2, r3
 8001756:	d001      	beq.n	800175c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e000      	b.n	800175e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3718      	adds	r7, #24
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40007000 	.word	0x40007000
 800176c:	40023800 	.word	0x40023800
 8001770:	42470060 	.word	0x42470060

08001774 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d101      	bne.n	8001788 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e0cc      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001788:	4b68      	ldr	r3, [pc, #416]	; (800192c <HAL_RCC_ClockConfig+0x1b8>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 030f 	and.w	r3, r3, #15
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	429a      	cmp	r2, r3
 8001794:	d90c      	bls.n	80017b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001796:	4b65      	ldr	r3, [pc, #404]	; (800192c <HAL_RCC_ClockConfig+0x1b8>)
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	b2d2      	uxtb	r2, r2
 800179c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800179e:	4b63      	ldr	r3, [pc, #396]	; (800192c <HAL_RCC_ClockConfig+0x1b8>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 030f 	and.w	r3, r3, #15
 80017a6:	683a      	ldr	r2, [r7, #0]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d001      	beq.n	80017b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e0b8      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d020      	beq.n	80017fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0304 	and.w	r3, r3, #4
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d005      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017c8:	4b59      	ldr	r3, [pc, #356]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	4a58      	ldr	r2, [pc, #352]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80017ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0308 	and.w	r3, r3, #8
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d005      	beq.n	80017ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017e0:	4b53      	ldr	r3, [pc, #332]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	4a52      	ldr	r2, [pc, #328]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80017e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017ec:	4b50      	ldr	r3, [pc, #320]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	494d      	ldr	r1, [pc, #308]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	2b00      	cmp	r3, #0
 8001808:	d044      	beq.n	8001894 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d107      	bne.n	8001822 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001812:	4b47      	ldr	r3, [pc, #284]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d119      	bne.n	8001852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e07f      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b02      	cmp	r3, #2
 8001828:	d003      	beq.n	8001832 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800182e:	2b03      	cmp	r3, #3
 8001830:	d107      	bne.n	8001842 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001832:	4b3f      	ldr	r3, [pc, #252]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d109      	bne.n	8001852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e06f      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001842:	4b3b      	ldr	r3, [pc, #236]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d101      	bne.n	8001852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e067      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001852:	4b37      	ldr	r3, [pc, #220]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f023 0203 	bic.w	r2, r3, #3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	4934      	ldr	r1, [pc, #208]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 8001860:	4313      	orrs	r3, r2
 8001862:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001864:	f7ff fa3e 	bl	8000ce4 <HAL_GetTick>
 8001868:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800186a:	e00a      	b.n	8001882 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800186c:	f7ff fa3a 	bl	8000ce4 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	f241 3288 	movw	r2, #5000	; 0x1388
 800187a:	4293      	cmp	r3, r2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e04f      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001882:	4b2b      	ldr	r3, [pc, #172]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	f003 020c 	and.w	r2, r3, #12
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	429a      	cmp	r2, r3
 8001892:	d1eb      	bne.n	800186c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001894:	4b25      	ldr	r3, [pc, #148]	; (800192c <HAL_RCC_ClockConfig+0x1b8>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 030f 	and.w	r3, r3, #15
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d20c      	bcs.n	80018bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018a2:	4b22      	ldr	r3, [pc, #136]	; (800192c <HAL_RCC_ClockConfig+0x1b8>)
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	b2d2      	uxtb	r2, r2
 80018a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018aa:	4b20      	ldr	r3, [pc, #128]	; (800192c <HAL_RCC_ClockConfig+0x1b8>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 030f 	and.w	r3, r3, #15
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d001      	beq.n	80018bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e032      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0304 	and.w	r3, r3, #4
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d008      	beq.n	80018da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018c8:	4b19      	ldr	r3, [pc, #100]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	4916      	ldr	r1, [pc, #88]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0308 	and.w	r3, r3, #8
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d009      	beq.n	80018fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018e6:	4b12      	ldr	r3, [pc, #72]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	691b      	ldr	r3, [r3, #16]
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	490e      	ldr	r1, [pc, #56]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018fa:	f000 f821 	bl	8001940 <HAL_RCC_GetSysClockFreq>
 80018fe:	4601      	mov	r1, r0
 8001900:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	091b      	lsrs	r3, r3, #4
 8001906:	f003 030f 	and.w	r3, r3, #15
 800190a:	4a0a      	ldr	r2, [pc, #40]	; (8001934 <HAL_RCC_ClockConfig+0x1c0>)
 800190c:	5cd3      	ldrb	r3, [r2, r3]
 800190e:	fa21 f303 	lsr.w	r3, r1, r3
 8001912:	4a09      	ldr	r2, [pc, #36]	; (8001938 <HAL_RCC_ClockConfig+0x1c4>)
 8001914:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001916:	4b09      	ldr	r3, [pc, #36]	; (800193c <HAL_RCC_ClockConfig+0x1c8>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff f99e 	bl	8000c5c <HAL_InitTick>

  return HAL_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40023c00 	.word	0x40023c00
 8001930:	40023800 	.word	0x40023800
 8001934:	080040fc 	.word	0x080040fc
 8001938:	20000000 	.word	0x20000000
 800193c:	20000004 	.word	0x20000004

08001940 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001946:	2300      	movs	r3, #0
 8001948:	607b      	str	r3, [r7, #4]
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	2300      	movs	r3, #0
 8001950:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001952:	2300      	movs	r3, #0
 8001954:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001956:	4b63      	ldr	r3, [pc, #396]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f003 030c 	and.w	r3, r3, #12
 800195e:	2b04      	cmp	r3, #4
 8001960:	d007      	beq.n	8001972 <HAL_RCC_GetSysClockFreq+0x32>
 8001962:	2b08      	cmp	r3, #8
 8001964:	d008      	beq.n	8001978 <HAL_RCC_GetSysClockFreq+0x38>
 8001966:	2b00      	cmp	r3, #0
 8001968:	f040 80b4 	bne.w	8001ad4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800196c:	4b5e      	ldr	r3, [pc, #376]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800196e:	60bb      	str	r3, [r7, #8]
       break;
 8001970:	e0b3      	b.n	8001ada <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001972:	4b5e      	ldr	r3, [pc, #376]	; (8001aec <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001974:	60bb      	str	r3, [r7, #8]
      break;
 8001976:	e0b0      	b.n	8001ada <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001978:	4b5a      	ldr	r3, [pc, #360]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001980:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001982:	4b58      	ldr	r3, [pc, #352]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d04a      	beq.n	8001a24 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800198e:	4b55      	ldr	r3, [pc, #340]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	099b      	lsrs	r3, r3, #6
 8001994:	f04f 0400 	mov.w	r4, #0
 8001998:	f240 11ff 	movw	r1, #511	; 0x1ff
 800199c:	f04f 0200 	mov.w	r2, #0
 80019a0:	ea03 0501 	and.w	r5, r3, r1
 80019a4:	ea04 0602 	and.w	r6, r4, r2
 80019a8:	4629      	mov	r1, r5
 80019aa:	4632      	mov	r2, r6
 80019ac:	f04f 0300 	mov.w	r3, #0
 80019b0:	f04f 0400 	mov.w	r4, #0
 80019b4:	0154      	lsls	r4, r2, #5
 80019b6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80019ba:	014b      	lsls	r3, r1, #5
 80019bc:	4619      	mov	r1, r3
 80019be:	4622      	mov	r2, r4
 80019c0:	1b49      	subs	r1, r1, r5
 80019c2:	eb62 0206 	sbc.w	r2, r2, r6
 80019c6:	f04f 0300 	mov.w	r3, #0
 80019ca:	f04f 0400 	mov.w	r4, #0
 80019ce:	0194      	lsls	r4, r2, #6
 80019d0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80019d4:	018b      	lsls	r3, r1, #6
 80019d6:	1a5b      	subs	r3, r3, r1
 80019d8:	eb64 0402 	sbc.w	r4, r4, r2
 80019dc:	f04f 0100 	mov.w	r1, #0
 80019e0:	f04f 0200 	mov.w	r2, #0
 80019e4:	00e2      	lsls	r2, r4, #3
 80019e6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80019ea:	00d9      	lsls	r1, r3, #3
 80019ec:	460b      	mov	r3, r1
 80019ee:	4614      	mov	r4, r2
 80019f0:	195b      	adds	r3, r3, r5
 80019f2:	eb44 0406 	adc.w	r4, r4, r6
 80019f6:	f04f 0100 	mov.w	r1, #0
 80019fa:	f04f 0200 	mov.w	r2, #0
 80019fe:	0262      	lsls	r2, r4, #9
 8001a00:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001a04:	0259      	lsls	r1, r3, #9
 8001a06:	460b      	mov	r3, r1
 8001a08:	4614      	mov	r4, r2
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	4621      	mov	r1, r4
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f04f 0400 	mov.w	r4, #0
 8001a14:	461a      	mov	r2, r3
 8001a16:	4623      	mov	r3, r4
 8001a18:	f7fe fc32 	bl	8000280 <__aeabi_uldivmod>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	460c      	mov	r4, r1
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	e049      	b.n	8001ab8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a24:	4b2f      	ldr	r3, [pc, #188]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	099b      	lsrs	r3, r3, #6
 8001a2a:	f04f 0400 	mov.w	r4, #0
 8001a2e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a32:	f04f 0200 	mov.w	r2, #0
 8001a36:	ea03 0501 	and.w	r5, r3, r1
 8001a3a:	ea04 0602 	and.w	r6, r4, r2
 8001a3e:	4629      	mov	r1, r5
 8001a40:	4632      	mov	r2, r6
 8001a42:	f04f 0300 	mov.w	r3, #0
 8001a46:	f04f 0400 	mov.w	r4, #0
 8001a4a:	0154      	lsls	r4, r2, #5
 8001a4c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a50:	014b      	lsls	r3, r1, #5
 8001a52:	4619      	mov	r1, r3
 8001a54:	4622      	mov	r2, r4
 8001a56:	1b49      	subs	r1, r1, r5
 8001a58:	eb62 0206 	sbc.w	r2, r2, r6
 8001a5c:	f04f 0300 	mov.w	r3, #0
 8001a60:	f04f 0400 	mov.w	r4, #0
 8001a64:	0194      	lsls	r4, r2, #6
 8001a66:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a6a:	018b      	lsls	r3, r1, #6
 8001a6c:	1a5b      	subs	r3, r3, r1
 8001a6e:	eb64 0402 	sbc.w	r4, r4, r2
 8001a72:	f04f 0100 	mov.w	r1, #0
 8001a76:	f04f 0200 	mov.w	r2, #0
 8001a7a:	00e2      	lsls	r2, r4, #3
 8001a7c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a80:	00d9      	lsls	r1, r3, #3
 8001a82:	460b      	mov	r3, r1
 8001a84:	4614      	mov	r4, r2
 8001a86:	195b      	adds	r3, r3, r5
 8001a88:	eb44 0406 	adc.w	r4, r4, r6
 8001a8c:	f04f 0100 	mov.w	r1, #0
 8001a90:	f04f 0200 	mov.w	r2, #0
 8001a94:	02a2      	lsls	r2, r4, #10
 8001a96:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001a9a:	0299      	lsls	r1, r3, #10
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4614      	mov	r4, r2
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	4621      	mov	r1, r4
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f04f 0400 	mov.w	r4, #0
 8001aaa:	461a      	mov	r2, r3
 8001aac:	4623      	mov	r3, r4
 8001aae:	f7fe fbe7 	bl	8000280 <__aeabi_uldivmod>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	460c      	mov	r4, r1
 8001ab6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ab8:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	0c1b      	lsrs	r3, r3, #16
 8001abe:	f003 0303 	and.w	r3, r3, #3
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001ac8:	68fa      	ldr	r2, [r7, #12]
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad0:	60bb      	str	r3, [r7, #8]
      break;
 8001ad2:	e002      	b.n	8001ada <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ad4:	4b04      	ldr	r3, [pc, #16]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001ad6:	60bb      	str	r3, [r7, #8]
      break;
 8001ad8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ada:	68bb      	ldr	r3, [r7, #8]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3714      	adds	r7, #20
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	00f42400 	.word	0x00f42400
 8001aec:	007a1200 	.word	0x007a1200

08001af0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001af4:	4b03      	ldr	r3, [pc, #12]	; (8001b04 <HAL_RCC_GetHCLKFreq+0x14>)
 8001af6:	681b      	ldr	r3, [r3, #0]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	20000000 	.word	0x20000000

08001b08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b0c:	f7ff fff0 	bl	8001af0 <HAL_RCC_GetHCLKFreq>
 8001b10:	4601      	mov	r1, r0
 8001b12:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	0a9b      	lsrs	r3, r3, #10
 8001b18:	f003 0307 	and.w	r3, r3, #7
 8001b1c:	4a03      	ldr	r2, [pc, #12]	; (8001b2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b1e:	5cd3      	ldrb	r3, [r2, r3]
 8001b20:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	0800410c 	.word	0x0800410c

08001b30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b34:	f7ff ffdc 	bl	8001af0 <HAL_RCC_GetHCLKFreq>
 8001b38:	4601      	mov	r1, r0
 8001b3a:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	0b5b      	lsrs	r3, r3, #13
 8001b40:	f003 0307 	and.w	r3, r3, #7
 8001b44:	4a03      	ldr	r2, [pc, #12]	; (8001b54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b46:	5cd3      	ldrb	r3, [r2, r3]
 8001b48:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40023800 	.word	0x40023800
 8001b54:	0800410c 	.word	0x0800410c

08001b58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e03f      	b.n	8001bea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d106      	bne.n	8001b84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7fe ff48 	bl	8000a14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2224      	movs	r2, #36	; 0x24
 8001b88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	68da      	ldr	r2, [r3, #12]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f000 f90b 	bl	8001db8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	691a      	ldr	r2, [r3, #16]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001bb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	695a      	ldr	r2, [r3, #20]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001bc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68da      	ldr	r2, [r3, #12]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001bd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2220      	movs	r2, #32
 8001bdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2220      	movs	r2, #32
 8001be4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b088      	sub	sp, #32
 8001bf6:	af02      	add	r7, sp, #8
 8001bf8:	60f8      	str	r0, [r7, #12]
 8001bfa:	60b9      	str	r1, [r7, #8]
 8001bfc:	603b      	str	r3, [r7, #0]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001c02:	2300      	movs	r3, #0
 8001c04:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b20      	cmp	r3, #32
 8001c10:	f040 8083 	bne.w	8001d1a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d002      	beq.n	8001c20 <HAL_UART_Transmit+0x2e>
 8001c1a:	88fb      	ldrh	r3, [r7, #6]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d101      	bne.n	8001c24 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e07b      	b.n	8001d1c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d101      	bne.n	8001c32 <HAL_UART_Transmit+0x40>
 8001c2e:	2302      	movs	r3, #2
 8001c30:	e074      	b.n	8001d1c <HAL_UART_Transmit+0x12a>
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2201      	movs	r2, #1
 8001c36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2221      	movs	r2, #33	; 0x21
 8001c44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001c48:	f7ff f84c 	bl	8000ce4 <HAL_GetTick>
 8001c4c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	88fa      	ldrh	r2, [r7, #6]
 8001c52:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	88fa      	ldrh	r2, [r7, #6]
 8001c58:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001c62:	e042      	b.n	8001cea <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c7a:	d122      	bne.n	8001cc2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	9300      	str	r3, [sp, #0]
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	2200      	movs	r2, #0
 8001c84:	2180      	movs	r1, #128	; 0x80
 8001c86:	68f8      	ldr	r0, [r7, #12]
 8001c88:	f000 f84c 	bl	8001d24 <UART_WaitOnFlagUntilTimeout>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e042      	b.n	8001d1c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	881b      	ldrh	r3, [r3, #0]
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ca8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d103      	bne.n	8001cba <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	3302      	adds	r3, #2
 8001cb6:	60bb      	str	r3, [r7, #8]
 8001cb8:	e017      	b.n	8001cea <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	60bb      	str	r3, [r7, #8]
 8001cc0:	e013      	b.n	8001cea <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	9300      	str	r3, [sp, #0]
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	2180      	movs	r1, #128	; 0x80
 8001ccc:	68f8      	ldr	r0, [r7, #12]
 8001cce:	f000 f829 	bl	8001d24 <UART_WaitOnFlagUntilTimeout>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e01f      	b.n	8001d1c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	1c5a      	adds	r2, r3, #1
 8001ce0:	60ba      	str	r2, [r7, #8]
 8001ce2:	781a      	ldrb	r2, [r3, #0]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1b7      	bne.n	8001c64 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	9300      	str	r3, [sp, #0]
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	2140      	movs	r1, #64	; 0x40
 8001cfe:	68f8      	ldr	r0, [r7, #12]
 8001d00:	f000 f810 	bl	8001d24 <UART_WaitOnFlagUntilTimeout>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e006      	b.n	8001d1c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2220      	movs	r2, #32
 8001d12:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001d16:	2300      	movs	r3, #0
 8001d18:	e000      	b.n	8001d1c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001d1a:	2302      	movs	r3, #2
  }
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3718      	adds	r7, #24
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	603b      	str	r3, [r7, #0]
 8001d30:	4613      	mov	r3, r2
 8001d32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d34:	e02c      	b.n	8001d90 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d3c:	d028      	beq.n	8001d90 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d007      	beq.n	8001d54 <UART_WaitOnFlagUntilTimeout+0x30>
 8001d44:	f7fe ffce 	bl	8000ce4 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d21d      	bcs.n	8001d90 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68da      	ldr	r2, [r3, #12]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001d62:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	695a      	ldr	r2, [r3, #20]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f022 0201 	bic.w	r2, r2, #1
 8001d72:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2220      	movs	r2, #32
 8001d78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2220      	movs	r2, #32
 8001d80:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e00f      	b.n	8001db0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	68ba      	ldr	r2, [r7, #8]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	bf0c      	ite	eq
 8001da0:	2301      	moveq	r3, #1
 8001da2:	2300      	movne	r3, #0
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	461a      	mov	r2, r3
 8001da8:	79fb      	ldrb	r3, [r7, #7]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d0c3      	beq.n	8001d36 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3710      	adds	r7, #16
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001dbc:	b085      	sub	sp, #20
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	68da      	ldr	r2, [r3, #12]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	431a      	orrs	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	695b      	ldr	r3, [r3, #20]
 8001de6:	431a      	orrs	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	69db      	ldr	r3, [r3, #28]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001dfa:	f023 030c 	bic.w	r3, r3, #12
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	6812      	ldr	r2, [r2, #0]
 8001e02:	68f9      	ldr	r1, [r7, #12]
 8001e04:	430b      	orrs	r3, r1
 8001e06:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	695b      	ldr	r3, [r3, #20]
 8001e0e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	699a      	ldr	r2, [r3, #24]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e26:	f040 818b 	bne.w	8002140 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4ac1      	ldr	r2, [pc, #772]	; (8002134 <UART_SetConfig+0x37c>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d005      	beq.n	8001e40 <UART_SetConfig+0x88>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4abf      	ldr	r2, [pc, #764]	; (8002138 <UART_SetConfig+0x380>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	f040 80bd 	bne.w	8001fba <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001e40:	f7ff fe76 	bl	8001b30 <HAL_RCC_GetPCLK2Freq>
 8001e44:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	461d      	mov	r5, r3
 8001e4a:	f04f 0600 	mov.w	r6, #0
 8001e4e:	46a8      	mov	r8, r5
 8001e50:	46b1      	mov	r9, r6
 8001e52:	eb18 0308 	adds.w	r3, r8, r8
 8001e56:	eb49 0409 	adc.w	r4, r9, r9
 8001e5a:	4698      	mov	r8, r3
 8001e5c:	46a1      	mov	r9, r4
 8001e5e:	eb18 0805 	adds.w	r8, r8, r5
 8001e62:	eb49 0906 	adc.w	r9, r9, r6
 8001e66:	f04f 0100 	mov.w	r1, #0
 8001e6a:	f04f 0200 	mov.w	r2, #0
 8001e6e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001e72:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001e76:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001e7a:	4688      	mov	r8, r1
 8001e7c:	4691      	mov	r9, r2
 8001e7e:	eb18 0005 	adds.w	r0, r8, r5
 8001e82:	eb49 0106 	adc.w	r1, r9, r6
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	461d      	mov	r5, r3
 8001e8c:	f04f 0600 	mov.w	r6, #0
 8001e90:	196b      	adds	r3, r5, r5
 8001e92:	eb46 0406 	adc.w	r4, r6, r6
 8001e96:	461a      	mov	r2, r3
 8001e98:	4623      	mov	r3, r4
 8001e9a:	f7fe f9f1 	bl	8000280 <__aeabi_uldivmod>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	460c      	mov	r4, r1
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	4ba5      	ldr	r3, [pc, #660]	; (800213c <UART_SetConfig+0x384>)
 8001ea6:	fba3 2302 	umull	r2, r3, r3, r2
 8001eaa:	095b      	lsrs	r3, r3, #5
 8001eac:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	461d      	mov	r5, r3
 8001eb4:	f04f 0600 	mov.w	r6, #0
 8001eb8:	46a9      	mov	r9, r5
 8001eba:	46b2      	mov	sl, r6
 8001ebc:	eb19 0309 	adds.w	r3, r9, r9
 8001ec0:	eb4a 040a 	adc.w	r4, sl, sl
 8001ec4:	4699      	mov	r9, r3
 8001ec6:	46a2      	mov	sl, r4
 8001ec8:	eb19 0905 	adds.w	r9, r9, r5
 8001ecc:	eb4a 0a06 	adc.w	sl, sl, r6
 8001ed0:	f04f 0100 	mov.w	r1, #0
 8001ed4:	f04f 0200 	mov.w	r2, #0
 8001ed8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001edc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001ee0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001ee4:	4689      	mov	r9, r1
 8001ee6:	4692      	mov	sl, r2
 8001ee8:	eb19 0005 	adds.w	r0, r9, r5
 8001eec:	eb4a 0106 	adc.w	r1, sl, r6
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	461d      	mov	r5, r3
 8001ef6:	f04f 0600 	mov.w	r6, #0
 8001efa:	196b      	adds	r3, r5, r5
 8001efc:	eb46 0406 	adc.w	r4, r6, r6
 8001f00:	461a      	mov	r2, r3
 8001f02:	4623      	mov	r3, r4
 8001f04:	f7fe f9bc 	bl	8000280 <__aeabi_uldivmod>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	460c      	mov	r4, r1
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	4b8b      	ldr	r3, [pc, #556]	; (800213c <UART_SetConfig+0x384>)
 8001f10:	fba3 1302 	umull	r1, r3, r3, r2
 8001f14:	095b      	lsrs	r3, r3, #5
 8001f16:	2164      	movs	r1, #100	; 0x64
 8001f18:	fb01 f303 	mul.w	r3, r1, r3
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	3332      	adds	r3, #50	; 0x32
 8001f22:	4a86      	ldr	r2, [pc, #536]	; (800213c <UART_SetConfig+0x384>)
 8001f24:	fba2 2303 	umull	r2, r3, r2, r3
 8001f28:	095b      	lsrs	r3, r3, #5
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001f30:	4498      	add	r8, r3
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	461d      	mov	r5, r3
 8001f36:	f04f 0600 	mov.w	r6, #0
 8001f3a:	46a9      	mov	r9, r5
 8001f3c:	46b2      	mov	sl, r6
 8001f3e:	eb19 0309 	adds.w	r3, r9, r9
 8001f42:	eb4a 040a 	adc.w	r4, sl, sl
 8001f46:	4699      	mov	r9, r3
 8001f48:	46a2      	mov	sl, r4
 8001f4a:	eb19 0905 	adds.w	r9, r9, r5
 8001f4e:	eb4a 0a06 	adc.w	sl, sl, r6
 8001f52:	f04f 0100 	mov.w	r1, #0
 8001f56:	f04f 0200 	mov.w	r2, #0
 8001f5a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f5e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001f62:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001f66:	4689      	mov	r9, r1
 8001f68:	4692      	mov	sl, r2
 8001f6a:	eb19 0005 	adds.w	r0, r9, r5
 8001f6e:	eb4a 0106 	adc.w	r1, sl, r6
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	461d      	mov	r5, r3
 8001f78:	f04f 0600 	mov.w	r6, #0
 8001f7c:	196b      	adds	r3, r5, r5
 8001f7e:	eb46 0406 	adc.w	r4, r6, r6
 8001f82:	461a      	mov	r2, r3
 8001f84:	4623      	mov	r3, r4
 8001f86:	f7fe f97b 	bl	8000280 <__aeabi_uldivmod>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	460c      	mov	r4, r1
 8001f8e:	461a      	mov	r2, r3
 8001f90:	4b6a      	ldr	r3, [pc, #424]	; (800213c <UART_SetConfig+0x384>)
 8001f92:	fba3 1302 	umull	r1, r3, r3, r2
 8001f96:	095b      	lsrs	r3, r3, #5
 8001f98:	2164      	movs	r1, #100	; 0x64
 8001f9a:	fb01 f303 	mul.w	r3, r1, r3
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	3332      	adds	r3, #50	; 0x32
 8001fa4:	4a65      	ldr	r2, [pc, #404]	; (800213c <UART_SetConfig+0x384>)
 8001fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8001faa:	095b      	lsrs	r3, r3, #5
 8001fac:	f003 0207 	and.w	r2, r3, #7
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4442      	add	r2, r8
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	e26f      	b.n	800249a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001fba:	f7ff fda5 	bl	8001b08 <HAL_RCC_GetPCLK1Freq>
 8001fbe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	461d      	mov	r5, r3
 8001fc4:	f04f 0600 	mov.w	r6, #0
 8001fc8:	46a8      	mov	r8, r5
 8001fca:	46b1      	mov	r9, r6
 8001fcc:	eb18 0308 	adds.w	r3, r8, r8
 8001fd0:	eb49 0409 	adc.w	r4, r9, r9
 8001fd4:	4698      	mov	r8, r3
 8001fd6:	46a1      	mov	r9, r4
 8001fd8:	eb18 0805 	adds.w	r8, r8, r5
 8001fdc:	eb49 0906 	adc.w	r9, r9, r6
 8001fe0:	f04f 0100 	mov.w	r1, #0
 8001fe4:	f04f 0200 	mov.w	r2, #0
 8001fe8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001fec:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001ff0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001ff4:	4688      	mov	r8, r1
 8001ff6:	4691      	mov	r9, r2
 8001ff8:	eb18 0005 	adds.w	r0, r8, r5
 8001ffc:	eb49 0106 	adc.w	r1, r9, r6
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	461d      	mov	r5, r3
 8002006:	f04f 0600 	mov.w	r6, #0
 800200a:	196b      	adds	r3, r5, r5
 800200c:	eb46 0406 	adc.w	r4, r6, r6
 8002010:	461a      	mov	r2, r3
 8002012:	4623      	mov	r3, r4
 8002014:	f7fe f934 	bl	8000280 <__aeabi_uldivmod>
 8002018:	4603      	mov	r3, r0
 800201a:	460c      	mov	r4, r1
 800201c:	461a      	mov	r2, r3
 800201e:	4b47      	ldr	r3, [pc, #284]	; (800213c <UART_SetConfig+0x384>)
 8002020:	fba3 2302 	umull	r2, r3, r3, r2
 8002024:	095b      	lsrs	r3, r3, #5
 8002026:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	461d      	mov	r5, r3
 800202e:	f04f 0600 	mov.w	r6, #0
 8002032:	46a9      	mov	r9, r5
 8002034:	46b2      	mov	sl, r6
 8002036:	eb19 0309 	adds.w	r3, r9, r9
 800203a:	eb4a 040a 	adc.w	r4, sl, sl
 800203e:	4699      	mov	r9, r3
 8002040:	46a2      	mov	sl, r4
 8002042:	eb19 0905 	adds.w	r9, r9, r5
 8002046:	eb4a 0a06 	adc.w	sl, sl, r6
 800204a:	f04f 0100 	mov.w	r1, #0
 800204e:	f04f 0200 	mov.w	r2, #0
 8002052:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002056:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800205a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800205e:	4689      	mov	r9, r1
 8002060:	4692      	mov	sl, r2
 8002062:	eb19 0005 	adds.w	r0, r9, r5
 8002066:	eb4a 0106 	adc.w	r1, sl, r6
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	461d      	mov	r5, r3
 8002070:	f04f 0600 	mov.w	r6, #0
 8002074:	196b      	adds	r3, r5, r5
 8002076:	eb46 0406 	adc.w	r4, r6, r6
 800207a:	461a      	mov	r2, r3
 800207c:	4623      	mov	r3, r4
 800207e:	f7fe f8ff 	bl	8000280 <__aeabi_uldivmod>
 8002082:	4603      	mov	r3, r0
 8002084:	460c      	mov	r4, r1
 8002086:	461a      	mov	r2, r3
 8002088:	4b2c      	ldr	r3, [pc, #176]	; (800213c <UART_SetConfig+0x384>)
 800208a:	fba3 1302 	umull	r1, r3, r3, r2
 800208e:	095b      	lsrs	r3, r3, #5
 8002090:	2164      	movs	r1, #100	; 0x64
 8002092:	fb01 f303 	mul.w	r3, r1, r3
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	3332      	adds	r3, #50	; 0x32
 800209c:	4a27      	ldr	r2, [pc, #156]	; (800213c <UART_SetConfig+0x384>)
 800209e:	fba2 2303 	umull	r2, r3, r2, r3
 80020a2:	095b      	lsrs	r3, r3, #5
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80020aa:	4498      	add	r8, r3
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	461d      	mov	r5, r3
 80020b0:	f04f 0600 	mov.w	r6, #0
 80020b4:	46a9      	mov	r9, r5
 80020b6:	46b2      	mov	sl, r6
 80020b8:	eb19 0309 	adds.w	r3, r9, r9
 80020bc:	eb4a 040a 	adc.w	r4, sl, sl
 80020c0:	4699      	mov	r9, r3
 80020c2:	46a2      	mov	sl, r4
 80020c4:	eb19 0905 	adds.w	r9, r9, r5
 80020c8:	eb4a 0a06 	adc.w	sl, sl, r6
 80020cc:	f04f 0100 	mov.w	r1, #0
 80020d0:	f04f 0200 	mov.w	r2, #0
 80020d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80020d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80020dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80020e0:	4689      	mov	r9, r1
 80020e2:	4692      	mov	sl, r2
 80020e4:	eb19 0005 	adds.w	r0, r9, r5
 80020e8:	eb4a 0106 	adc.w	r1, sl, r6
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	461d      	mov	r5, r3
 80020f2:	f04f 0600 	mov.w	r6, #0
 80020f6:	196b      	adds	r3, r5, r5
 80020f8:	eb46 0406 	adc.w	r4, r6, r6
 80020fc:	461a      	mov	r2, r3
 80020fe:	4623      	mov	r3, r4
 8002100:	f7fe f8be 	bl	8000280 <__aeabi_uldivmod>
 8002104:	4603      	mov	r3, r0
 8002106:	460c      	mov	r4, r1
 8002108:	461a      	mov	r2, r3
 800210a:	4b0c      	ldr	r3, [pc, #48]	; (800213c <UART_SetConfig+0x384>)
 800210c:	fba3 1302 	umull	r1, r3, r3, r2
 8002110:	095b      	lsrs	r3, r3, #5
 8002112:	2164      	movs	r1, #100	; 0x64
 8002114:	fb01 f303 	mul.w	r3, r1, r3
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	3332      	adds	r3, #50	; 0x32
 800211e:	4a07      	ldr	r2, [pc, #28]	; (800213c <UART_SetConfig+0x384>)
 8002120:	fba2 2303 	umull	r2, r3, r2, r3
 8002124:	095b      	lsrs	r3, r3, #5
 8002126:	f003 0207 	and.w	r2, r3, #7
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4442      	add	r2, r8
 8002130:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002132:	e1b2      	b.n	800249a <UART_SetConfig+0x6e2>
 8002134:	40011000 	.word	0x40011000
 8002138:	40011400 	.word	0x40011400
 800213c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4ad7      	ldr	r2, [pc, #860]	; (80024a4 <UART_SetConfig+0x6ec>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d005      	beq.n	8002156 <UART_SetConfig+0x39e>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4ad6      	ldr	r2, [pc, #856]	; (80024a8 <UART_SetConfig+0x6f0>)
 8002150:	4293      	cmp	r3, r2
 8002152:	f040 80d1 	bne.w	80022f8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002156:	f7ff fceb 	bl	8001b30 <HAL_RCC_GetPCLK2Freq>
 800215a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	469a      	mov	sl, r3
 8002160:	f04f 0b00 	mov.w	fp, #0
 8002164:	46d0      	mov	r8, sl
 8002166:	46d9      	mov	r9, fp
 8002168:	eb18 0308 	adds.w	r3, r8, r8
 800216c:	eb49 0409 	adc.w	r4, r9, r9
 8002170:	4698      	mov	r8, r3
 8002172:	46a1      	mov	r9, r4
 8002174:	eb18 080a 	adds.w	r8, r8, sl
 8002178:	eb49 090b 	adc.w	r9, r9, fp
 800217c:	f04f 0100 	mov.w	r1, #0
 8002180:	f04f 0200 	mov.w	r2, #0
 8002184:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002188:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800218c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002190:	4688      	mov	r8, r1
 8002192:	4691      	mov	r9, r2
 8002194:	eb1a 0508 	adds.w	r5, sl, r8
 8002198:	eb4b 0609 	adc.w	r6, fp, r9
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	4619      	mov	r1, r3
 80021a2:	f04f 0200 	mov.w	r2, #0
 80021a6:	f04f 0300 	mov.w	r3, #0
 80021aa:	f04f 0400 	mov.w	r4, #0
 80021ae:	0094      	lsls	r4, r2, #2
 80021b0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80021b4:	008b      	lsls	r3, r1, #2
 80021b6:	461a      	mov	r2, r3
 80021b8:	4623      	mov	r3, r4
 80021ba:	4628      	mov	r0, r5
 80021bc:	4631      	mov	r1, r6
 80021be:	f7fe f85f 	bl	8000280 <__aeabi_uldivmod>
 80021c2:	4603      	mov	r3, r0
 80021c4:	460c      	mov	r4, r1
 80021c6:	461a      	mov	r2, r3
 80021c8:	4bb8      	ldr	r3, [pc, #736]	; (80024ac <UART_SetConfig+0x6f4>)
 80021ca:	fba3 2302 	umull	r2, r3, r3, r2
 80021ce:	095b      	lsrs	r3, r3, #5
 80021d0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	469b      	mov	fp, r3
 80021d8:	f04f 0c00 	mov.w	ip, #0
 80021dc:	46d9      	mov	r9, fp
 80021de:	46e2      	mov	sl, ip
 80021e0:	eb19 0309 	adds.w	r3, r9, r9
 80021e4:	eb4a 040a 	adc.w	r4, sl, sl
 80021e8:	4699      	mov	r9, r3
 80021ea:	46a2      	mov	sl, r4
 80021ec:	eb19 090b 	adds.w	r9, r9, fp
 80021f0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80021f4:	f04f 0100 	mov.w	r1, #0
 80021f8:	f04f 0200 	mov.w	r2, #0
 80021fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002200:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002204:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002208:	4689      	mov	r9, r1
 800220a:	4692      	mov	sl, r2
 800220c:	eb1b 0509 	adds.w	r5, fp, r9
 8002210:	eb4c 060a 	adc.w	r6, ip, sl
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	4619      	mov	r1, r3
 800221a:	f04f 0200 	mov.w	r2, #0
 800221e:	f04f 0300 	mov.w	r3, #0
 8002222:	f04f 0400 	mov.w	r4, #0
 8002226:	0094      	lsls	r4, r2, #2
 8002228:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800222c:	008b      	lsls	r3, r1, #2
 800222e:	461a      	mov	r2, r3
 8002230:	4623      	mov	r3, r4
 8002232:	4628      	mov	r0, r5
 8002234:	4631      	mov	r1, r6
 8002236:	f7fe f823 	bl	8000280 <__aeabi_uldivmod>
 800223a:	4603      	mov	r3, r0
 800223c:	460c      	mov	r4, r1
 800223e:	461a      	mov	r2, r3
 8002240:	4b9a      	ldr	r3, [pc, #616]	; (80024ac <UART_SetConfig+0x6f4>)
 8002242:	fba3 1302 	umull	r1, r3, r3, r2
 8002246:	095b      	lsrs	r3, r3, #5
 8002248:	2164      	movs	r1, #100	; 0x64
 800224a:	fb01 f303 	mul.w	r3, r1, r3
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	011b      	lsls	r3, r3, #4
 8002252:	3332      	adds	r3, #50	; 0x32
 8002254:	4a95      	ldr	r2, [pc, #596]	; (80024ac <UART_SetConfig+0x6f4>)
 8002256:	fba2 2303 	umull	r2, r3, r2, r3
 800225a:	095b      	lsrs	r3, r3, #5
 800225c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002260:	4498      	add	r8, r3
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	469b      	mov	fp, r3
 8002266:	f04f 0c00 	mov.w	ip, #0
 800226a:	46d9      	mov	r9, fp
 800226c:	46e2      	mov	sl, ip
 800226e:	eb19 0309 	adds.w	r3, r9, r9
 8002272:	eb4a 040a 	adc.w	r4, sl, sl
 8002276:	4699      	mov	r9, r3
 8002278:	46a2      	mov	sl, r4
 800227a:	eb19 090b 	adds.w	r9, r9, fp
 800227e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002282:	f04f 0100 	mov.w	r1, #0
 8002286:	f04f 0200 	mov.w	r2, #0
 800228a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800228e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002292:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002296:	4689      	mov	r9, r1
 8002298:	4692      	mov	sl, r2
 800229a:	eb1b 0509 	adds.w	r5, fp, r9
 800229e:	eb4c 060a 	adc.w	r6, ip, sl
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	4619      	mov	r1, r3
 80022a8:	f04f 0200 	mov.w	r2, #0
 80022ac:	f04f 0300 	mov.w	r3, #0
 80022b0:	f04f 0400 	mov.w	r4, #0
 80022b4:	0094      	lsls	r4, r2, #2
 80022b6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80022ba:	008b      	lsls	r3, r1, #2
 80022bc:	461a      	mov	r2, r3
 80022be:	4623      	mov	r3, r4
 80022c0:	4628      	mov	r0, r5
 80022c2:	4631      	mov	r1, r6
 80022c4:	f7fd ffdc 	bl	8000280 <__aeabi_uldivmod>
 80022c8:	4603      	mov	r3, r0
 80022ca:	460c      	mov	r4, r1
 80022cc:	461a      	mov	r2, r3
 80022ce:	4b77      	ldr	r3, [pc, #476]	; (80024ac <UART_SetConfig+0x6f4>)
 80022d0:	fba3 1302 	umull	r1, r3, r3, r2
 80022d4:	095b      	lsrs	r3, r3, #5
 80022d6:	2164      	movs	r1, #100	; 0x64
 80022d8:	fb01 f303 	mul.w	r3, r1, r3
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	011b      	lsls	r3, r3, #4
 80022e0:	3332      	adds	r3, #50	; 0x32
 80022e2:	4a72      	ldr	r2, [pc, #456]	; (80024ac <UART_SetConfig+0x6f4>)
 80022e4:	fba2 2303 	umull	r2, r3, r2, r3
 80022e8:	095b      	lsrs	r3, r3, #5
 80022ea:	f003 020f 	and.w	r2, r3, #15
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4442      	add	r2, r8
 80022f4:	609a      	str	r2, [r3, #8]
 80022f6:	e0d0      	b.n	800249a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80022f8:	f7ff fc06 	bl	8001b08 <HAL_RCC_GetPCLK1Freq>
 80022fc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	469a      	mov	sl, r3
 8002302:	f04f 0b00 	mov.w	fp, #0
 8002306:	46d0      	mov	r8, sl
 8002308:	46d9      	mov	r9, fp
 800230a:	eb18 0308 	adds.w	r3, r8, r8
 800230e:	eb49 0409 	adc.w	r4, r9, r9
 8002312:	4698      	mov	r8, r3
 8002314:	46a1      	mov	r9, r4
 8002316:	eb18 080a 	adds.w	r8, r8, sl
 800231a:	eb49 090b 	adc.w	r9, r9, fp
 800231e:	f04f 0100 	mov.w	r1, #0
 8002322:	f04f 0200 	mov.w	r2, #0
 8002326:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800232a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800232e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002332:	4688      	mov	r8, r1
 8002334:	4691      	mov	r9, r2
 8002336:	eb1a 0508 	adds.w	r5, sl, r8
 800233a:	eb4b 0609 	adc.w	r6, fp, r9
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	4619      	mov	r1, r3
 8002344:	f04f 0200 	mov.w	r2, #0
 8002348:	f04f 0300 	mov.w	r3, #0
 800234c:	f04f 0400 	mov.w	r4, #0
 8002350:	0094      	lsls	r4, r2, #2
 8002352:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002356:	008b      	lsls	r3, r1, #2
 8002358:	461a      	mov	r2, r3
 800235a:	4623      	mov	r3, r4
 800235c:	4628      	mov	r0, r5
 800235e:	4631      	mov	r1, r6
 8002360:	f7fd ff8e 	bl	8000280 <__aeabi_uldivmod>
 8002364:	4603      	mov	r3, r0
 8002366:	460c      	mov	r4, r1
 8002368:	461a      	mov	r2, r3
 800236a:	4b50      	ldr	r3, [pc, #320]	; (80024ac <UART_SetConfig+0x6f4>)
 800236c:	fba3 2302 	umull	r2, r3, r3, r2
 8002370:	095b      	lsrs	r3, r3, #5
 8002372:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	469b      	mov	fp, r3
 800237a:	f04f 0c00 	mov.w	ip, #0
 800237e:	46d9      	mov	r9, fp
 8002380:	46e2      	mov	sl, ip
 8002382:	eb19 0309 	adds.w	r3, r9, r9
 8002386:	eb4a 040a 	adc.w	r4, sl, sl
 800238a:	4699      	mov	r9, r3
 800238c:	46a2      	mov	sl, r4
 800238e:	eb19 090b 	adds.w	r9, r9, fp
 8002392:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002396:	f04f 0100 	mov.w	r1, #0
 800239a:	f04f 0200 	mov.w	r2, #0
 800239e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80023a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80023aa:	4689      	mov	r9, r1
 80023ac:	4692      	mov	sl, r2
 80023ae:	eb1b 0509 	adds.w	r5, fp, r9
 80023b2:	eb4c 060a 	adc.w	r6, ip, sl
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	4619      	mov	r1, r3
 80023bc:	f04f 0200 	mov.w	r2, #0
 80023c0:	f04f 0300 	mov.w	r3, #0
 80023c4:	f04f 0400 	mov.w	r4, #0
 80023c8:	0094      	lsls	r4, r2, #2
 80023ca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80023ce:	008b      	lsls	r3, r1, #2
 80023d0:	461a      	mov	r2, r3
 80023d2:	4623      	mov	r3, r4
 80023d4:	4628      	mov	r0, r5
 80023d6:	4631      	mov	r1, r6
 80023d8:	f7fd ff52 	bl	8000280 <__aeabi_uldivmod>
 80023dc:	4603      	mov	r3, r0
 80023de:	460c      	mov	r4, r1
 80023e0:	461a      	mov	r2, r3
 80023e2:	4b32      	ldr	r3, [pc, #200]	; (80024ac <UART_SetConfig+0x6f4>)
 80023e4:	fba3 1302 	umull	r1, r3, r3, r2
 80023e8:	095b      	lsrs	r3, r3, #5
 80023ea:	2164      	movs	r1, #100	; 0x64
 80023ec:	fb01 f303 	mul.w	r3, r1, r3
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	011b      	lsls	r3, r3, #4
 80023f4:	3332      	adds	r3, #50	; 0x32
 80023f6:	4a2d      	ldr	r2, [pc, #180]	; (80024ac <UART_SetConfig+0x6f4>)
 80023f8:	fba2 2303 	umull	r2, r3, r2, r3
 80023fc:	095b      	lsrs	r3, r3, #5
 80023fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002402:	4498      	add	r8, r3
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	469b      	mov	fp, r3
 8002408:	f04f 0c00 	mov.w	ip, #0
 800240c:	46d9      	mov	r9, fp
 800240e:	46e2      	mov	sl, ip
 8002410:	eb19 0309 	adds.w	r3, r9, r9
 8002414:	eb4a 040a 	adc.w	r4, sl, sl
 8002418:	4699      	mov	r9, r3
 800241a:	46a2      	mov	sl, r4
 800241c:	eb19 090b 	adds.w	r9, r9, fp
 8002420:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002424:	f04f 0100 	mov.w	r1, #0
 8002428:	f04f 0200 	mov.w	r2, #0
 800242c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002430:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002434:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002438:	4689      	mov	r9, r1
 800243a:	4692      	mov	sl, r2
 800243c:	eb1b 0509 	adds.w	r5, fp, r9
 8002440:	eb4c 060a 	adc.w	r6, ip, sl
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	4619      	mov	r1, r3
 800244a:	f04f 0200 	mov.w	r2, #0
 800244e:	f04f 0300 	mov.w	r3, #0
 8002452:	f04f 0400 	mov.w	r4, #0
 8002456:	0094      	lsls	r4, r2, #2
 8002458:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800245c:	008b      	lsls	r3, r1, #2
 800245e:	461a      	mov	r2, r3
 8002460:	4623      	mov	r3, r4
 8002462:	4628      	mov	r0, r5
 8002464:	4631      	mov	r1, r6
 8002466:	f7fd ff0b 	bl	8000280 <__aeabi_uldivmod>
 800246a:	4603      	mov	r3, r0
 800246c:	460c      	mov	r4, r1
 800246e:	461a      	mov	r2, r3
 8002470:	4b0e      	ldr	r3, [pc, #56]	; (80024ac <UART_SetConfig+0x6f4>)
 8002472:	fba3 1302 	umull	r1, r3, r3, r2
 8002476:	095b      	lsrs	r3, r3, #5
 8002478:	2164      	movs	r1, #100	; 0x64
 800247a:	fb01 f303 	mul.w	r3, r1, r3
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	011b      	lsls	r3, r3, #4
 8002482:	3332      	adds	r3, #50	; 0x32
 8002484:	4a09      	ldr	r2, [pc, #36]	; (80024ac <UART_SetConfig+0x6f4>)
 8002486:	fba2 2303 	umull	r2, r3, r2, r3
 800248a:	095b      	lsrs	r3, r3, #5
 800248c:	f003 020f 	and.w	r2, r3, #15
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4442      	add	r2, r8
 8002496:	609a      	str	r2, [r3, #8]
}
 8002498:	e7ff      	b.n	800249a <UART_SetConfig+0x6e2>
 800249a:	bf00      	nop
 800249c:	3714      	adds	r7, #20
 800249e:	46bd      	mov	sp, r7
 80024a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024a4:	40011000 	.word	0x40011000
 80024a8:	40011400 	.word	0x40011400
 80024ac:	51eb851f 	.word	0x51eb851f

080024b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f103 0208 	add.w	r2, r3, #8
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f04f 32ff 	mov.w	r2, #4294967295
 80024c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f103 0208 	add.w	r2, r3, #8
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f103 0208 	add.w	r2, r3, #8
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80024fe:	bf00      	nop
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr

0800250a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800250a:	b480      	push	{r7}
 800250c:	b085      	sub	sp, #20
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
 8002512:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	1c5a      	adds	r2, r3, #1
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	601a      	str	r2, [r3, #0]
}
 8002546:	bf00      	nop
 8002548:	3714      	adds	r7, #20
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002552:	b480      	push	{r7}
 8002554:	b085      	sub	sp, #20
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
 800255a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002568:	d103      	bne.n	8002572 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	e00c      	b.n	800258c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	3308      	adds	r3, #8
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	e002      	b.n	8002580 <vListInsert+0x2e>
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	429a      	cmp	r2, r3
 800258a:	d2f6      	bcs.n	800257a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	685a      	ldr	r2, [r3, #4]
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	1c5a      	adds	r2, r3, #1
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	601a      	str	r2, [r3, #0]
}
 80025b8:	bf00      	nop
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	6892      	ldr	r2, [r2, #8]
 80025da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	6852      	ldr	r2, [r2, #4]
 80025e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d103      	bne.n	80025f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689a      	ldr	r2, [r3, #8]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	1e5a      	subs	r2, r3, #1
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
}
 800260c:	4618      	mov	r0, r3
 800260e:	3714      	adds	r7, #20
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002618:	b580      	push	{r7, lr}
 800261a:	b08e      	sub	sp, #56	; 0x38
 800261c:	af04      	add	r7, sp, #16
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
 8002624:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002628:	2b00      	cmp	r3, #0
 800262a:	d109      	bne.n	8002640 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800262c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002630:	f383 8811 	msr	BASEPRI, r3
 8002634:	f3bf 8f6f 	isb	sy
 8002638:	f3bf 8f4f 	dsb	sy
 800263c:	623b      	str	r3, [r7, #32]
 800263e:	e7fe      	b.n	800263e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8002640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002642:	2b00      	cmp	r3, #0
 8002644:	d109      	bne.n	800265a <xTaskCreateStatic+0x42>
 8002646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800264a:	f383 8811 	msr	BASEPRI, r3
 800264e:	f3bf 8f6f 	isb	sy
 8002652:	f3bf 8f4f 	dsb	sy
 8002656:	61fb      	str	r3, [r7, #28]
 8002658:	e7fe      	b.n	8002658 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800265a:	2354      	movs	r3, #84	; 0x54
 800265c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	2b54      	cmp	r3, #84	; 0x54
 8002662:	d009      	beq.n	8002678 <xTaskCreateStatic+0x60>
 8002664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002668:	f383 8811 	msr	BASEPRI, r3
 800266c:	f3bf 8f6f 	isb	sy
 8002670:	f3bf 8f4f 	dsb	sy
 8002674:	61bb      	str	r3, [r7, #24]
 8002676:	e7fe      	b.n	8002676 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002678:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800267a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800267c:	2b00      	cmp	r3, #0
 800267e:	d01e      	beq.n	80026be <xTaskCreateStatic+0xa6>
 8002680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002682:	2b00      	cmp	r3, #0
 8002684:	d01b      	beq.n	80026be <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002688:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800268e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	2202      	movs	r2, #2
 8002694:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002698:	2300      	movs	r3, #0
 800269a:	9303      	str	r3, [sp, #12]
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	9302      	str	r3, [sp, #8]
 80026a0:	f107 0314 	add.w	r3, r7, #20
 80026a4:	9301      	str	r3, [sp, #4]
 80026a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	68b9      	ldr	r1, [r7, #8]
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f000 f850 	bl	8002756 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80026b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80026b8:	f000 f8d4 	bl	8002864 <prvAddNewTaskToReadyList>
 80026bc:	e001      	b.n	80026c2 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80026be:	2300      	movs	r3, #0
 80026c0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80026c2:	697b      	ldr	r3, [r7, #20]
	}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3728      	adds	r7, #40	; 0x28
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b08c      	sub	sp, #48	; 0x30
 80026d0:	af04      	add	r7, sp, #16
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	603b      	str	r3, [r7, #0]
 80026d8:	4613      	mov	r3, r2
 80026da:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80026dc:	88fb      	ldrh	r3, [r7, #6]
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	4618      	mov	r0, r3
 80026e2:	f000 fecf 	bl	8003484 <pvPortMalloc>
 80026e6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00e      	beq.n	800270c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80026ee:	2054      	movs	r0, #84	; 0x54
 80026f0:	f000 fec8 	bl	8003484 <pvPortMalloc>
 80026f4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d003      	beq.n	8002704 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	631a      	str	r2, [r3, #48]	; 0x30
 8002702:	e005      	b.n	8002710 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002704:	6978      	ldr	r0, [r7, #20]
 8002706:	f000 ff7f 	bl	8003608 <vPortFree>
 800270a:	e001      	b.n	8002710 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800270c:	2300      	movs	r3, #0
 800270e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d017      	beq.n	8002746 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800271e:	88fa      	ldrh	r2, [r7, #6]
 8002720:	2300      	movs	r3, #0
 8002722:	9303      	str	r3, [sp, #12]
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	9302      	str	r3, [sp, #8]
 8002728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800272a:	9301      	str	r3, [sp, #4]
 800272c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272e:	9300      	str	r3, [sp, #0]
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	68b9      	ldr	r1, [r7, #8]
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	f000 f80e 	bl	8002756 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800273a:	69f8      	ldr	r0, [r7, #28]
 800273c:	f000 f892 	bl	8002864 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002740:	2301      	movs	r3, #1
 8002742:	61bb      	str	r3, [r7, #24]
 8002744:	e002      	b.n	800274c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002746:	f04f 33ff 	mov.w	r3, #4294967295
 800274a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800274c:	69bb      	ldr	r3, [r7, #24]
	}
 800274e:	4618      	mov	r0, r3
 8002750:	3720      	adds	r7, #32
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b088      	sub	sp, #32
 800275a:	af00      	add	r7, sp, #0
 800275c:	60f8      	str	r0, [r7, #12]
 800275e:	60b9      	str	r1, [r7, #8]
 8002760:	607a      	str	r2, [r7, #4]
 8002762:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002766:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800276e:	3b01      	subs	r3, #1
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	4413      	add	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	f023 0307 	bic.w	r3, r3, #7
 800277c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	2b00      	cmp	r3, #0
 8002786:	d009      	beq.n	800279c <prvInitialiseNewTask+0x46>
 8002788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800278c:	f383 8811 	msr	BASEPRI, r3
 8002790:	f3bf 8f6f 	isb	sy
 8002794:	f3bf 8f4f 	dsb	sy
 8002798:	617b      	str	r3, [r7, #20]
 800279a:	e7fe      	b.n	800279a <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d01f      	beq.n	80027e2 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80027a2:	2300      	movs	r3, #0
 80027a4:	61fb      	str	r3, [r7, #28]
 80027a6:	e012      	b.n	80027ce <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80027a8:	68ba      	ldr	r2, [r7, #8]
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	4413      	add	r3, r2
 80027ae:	7819      	ldrb	r1, [r3, #0]
 80027b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	4413      	add	r3, r2
 80027b6:	3334      	adds	r3, #52	; 0x34
 80027b8:	460a      	mov	r2, r1
 80027ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80027bc:	68ba      	ldr	r2, [r7, #8]
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	4413      	add	r3, r2
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d006      	beq.n	80027d6 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	3301      	adds	r3, #1
 80027cc:	61fb      	str	r3, [r7, #28]
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	2b0f      	cmp	r3, #15
 80027d2:	d9e9      	bls.n	80027a8 <prvInitialiseNewTask+0x52>
 80027d4:	e000      	b.n	80027d8 <prvInitialiseNewTask+0x82>
			{
				break;
 80027d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80027d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027e0:	e003      	b.n	80027ea <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80027e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80027ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ec:	2b06      	cmp	r3, #6
 80027ee:	d901      	bls.n	80027f4 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80027f0:	2306      	movs	r3, #6
 80027f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80027f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80027fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027fe:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002802:	2200      	movs	r2, #0
 8002804:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002808:	3304      	adds	r3, #4
 800280a:	4618      	mov	r0, r3
 800280c:	f7ff fe70 	bl	80024f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002812:	3318      	adds	r3, #24
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff fe6b 	bl	80024f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800281a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800281c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800281e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002822:	f1c3 0207 	rsb	r2, r3, #7
 8002826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002828:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800282a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800282c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800282e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002832:	2200      	movs	r2, #0
 8002834:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002838:	2200      	movs	r2, #0
 800283a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800283e:	683a      	ldr	r2, [r7, #0]
 8002840:	68f9      	ldr	r1, [r7, #12]
 8002842:	69b8      	ldr	r0, [r7, #24]
 8002844:	f000 fc1c 	bl	8003080 <pxPortInitialiseStack>
 8002848:	4602      	mov	r2, r0
 800284a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800284c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800284e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002850:	2b00      	cmp	r3, #0
 8002852:	d002      	beq.n	800285a <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002856:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002858:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800285a:	bf00      	nop
 800285c:	3720      	adds	r7, #32
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
	...

08002864 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800286c:	f000 fd2e 	bl	80032cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002870:	4b2a      	ldr	r3, [pc, #168]	; (800291c <prvAddNewTaskToReadyList+0xb8>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	3301      	adds	r3, #1
 8002876:	4a29      	ldr	r2, [pc, #164]	; (800291c <prvAddNewTaskToReadyList+0xb8>)
 8002878:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800287a:	4b29      	ldr	r3, [pc, #164]	; (8002920 <prvAddNewTaskToReadyList+0xbc>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d109      	bne.n	8002896 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002882:	4a27      	ldr	r2, [pc, #156]	; (8002920 <prvAddNewTaskToReadyList+0xbc>)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002888:	4b24      	ldr	r3, [pc, #144]	; (800291c <prvAddNewTaskToReadyList+0xb8>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d110      	bne.n	80028b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002890:	f000 fab8 	bl	8002e04 <prvInitialiseTaskLists>
 8002894:	e00d      	b.n	80028b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002896:	4b23      	ldr	r3, [pc, #140]	; (8002924 <prvAddNewTaskToReadyList+0xc0>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d109      	bne.n	80028b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800289e:	4b20      	ldr	r3, [pc, #128]	; (8002920 <prvAddNewTaskToReadyList+0xbc>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d802      	bhi.n	80028b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80028ac:	4a1c      	ldr	r2, [pc, #112]	; (8002920 <prvAddNewTaskToReadyList+0xbc>)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80028b2:	4b1d      	ldr	r3, [pc, #116]	; (8002928 <prvAddNewTaskToReadyList+0xc4>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	3301      	adds	r3, #1
 80028b8:	4a1b      	ldr	r2, [pc, #108]	; (8002928 <prvAddNewTaskToReadyList+0xc4>)
 80028ba:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c0:	2201      	movs	r2, #1
 80028c2:	409a      	lsls	r2, r3
 80028c4:	4b19      	ldr	r3, [pc, #100]	; (800292c <prvAddNewTaskToReadyList+0xc8>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	4a18      	ldr	r2, [pc, #96]	; (800292c <prvAddNewTaskToReadyList+0xc8>)
 80028cc:	6013      	str	r3, [r2, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028d2:	4613      	mov	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4413      	add	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4a15      	ldr	r2, [pc, #84]	; (8002930 <prvAddNewTaskToReadyList+0xcc>)
 80028dc:	441a      	add	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	3304      	adds	r3, #4
 80028e2:	4619      	mov	r1, r3
 80028e4:	4610      	mov	r0, r2
 80028e6:	f7ff fe10 	bl	800250a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80028ea:	f000 fd1d 	bl	8003328 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80028ee:	4b0d      	ldr	r3, [pc, #52]	; (8002924 <prvAddNewTaskToReadyList+0xc0>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00e      	beq.n	8002914 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80028f6:	4b0a      	ldr	r3, [pc, #40]	; (8002920 <prvAddNewTaskToReadyList+0xbc>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002900:	429a      	cmp	r2, r3
 8002902:	d207      	bcs.n	8002914 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002904:	4b0b      	ldr	r3, [pc, #44]	; (8002934 <prvAddNewTaskToReadyList+0xd0>)
 8002906:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	f3bf 8f4f 	dsb	sy
 8002910:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002914:	bf00      	nop
 8002916:	3708      	adds	r7, #8
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	200004ec 	.word	0x200004ec
 8002920:	200003ec 	.word	0x200003ec
 8002924:	200004f8 	.word	0x200004f8
 8002928:	20000508 	.word	0x20000508
 800292c:	200004f4 	.word	0x200004f4
 8002930:	200003f0 	.word	0x200003f0
 8002934:	e000ed04 	.word	0xe000ed04

08002938 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002940:	2300      	movs	r3, #0
 8002942:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d016      	beq.n	8002978 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800294a:	4b13      	ldr	r3, [pc, #76]	; (8002998 <vTaskDelay+0x60>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d009      	beq.n	8002966 <vTaskDelay+0x2e>
 8002952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002956:	f383 8811 	msr	BASEPRI, r3
 800295a:	f3bf 8f6f 	isb	sy
 800295e:	f3bf 8f4f 	dsb	sy
 8002962:	60bb      	str	r3, [r7, #8]
 8002964:	e7fe      	b.n	8002964 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002966:	f000 f879 	bl	8002a5c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800296a:	2100      	movs	r1, #0
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 fb21 	bl	8002fb4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002972:	f000 f881 	bl	8002a78 <xTaskResumeAll>
 8002976:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d107      	bne.n	800298e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800297e:	4b07      	ldr	r3, [pc, #28]	; (800299c <vTaskDelay+0x64>)
 8002980:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	f3bf 8f4f 	dsb	sy
 800298a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800298e:	bf00      	nop
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	20000514 	.word	0x20000514
 800299c:	e000ed04 	.word	0xe000ed04

080029a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b08a      	sub	sp, #40	; 0x28
 80029a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80029a6:	2300      	movs	r3, #0
 80029a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80029aa:	2300      	movs	r3, #0
 80029ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80029ae:	463a      	mov	r2, r7
 80029b0:	1d39      	adds	r1, r7, #4
 80029b2:	f107 0308 	add.w	r3, r7, #8
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7fd fde2 	bl	8000580 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80029bc:	6839      	ldr	r1, [r7, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	68ba      	ldr	r2, [r7, #8]
 80029c2:	9202      	str	r2, [sp, #8]
 80029c4:	9301      	str	r3, [sp, #4]
 80029c6:	2300      	movs	r3, #0
 80029c8:	9300      	str	r3, [sp, #0]
 80029ca:	2300      	movs	r3, #0
 80029cc:	460a      	mov	r2, r1
 80029ce:	491d      	ldr	r1, [pc, #116]	; (8002a44 <vTaskStartScheduler+0xa4>)
 80029d0:	481d      	ldr	r0, [pc, #116]	; (8002a48 <vTaskStartScheduler+0xa8>)
 80029d2:	f7ff fe21 	bl	8002618 <xTaskCreateStatic>
 80029d6:	4602      	mov	r2, r0
 80029d8:	4b1c      	ldr	r3, [pc, #112]	; (8002a4c <vTaskStartScheduler+0xac>)
 80029da:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80029dc:	4b1b      	ldr	r3, [pc, #108]	; (8002a4c <vTaskStartScheduler+0xac>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d002      	beq.n	80029ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80029e4:	2301      	movs	r3, #1
 80029e6:	617b      	str	r3, [r7, #20]
 80029e8:	e001      	b.n	80029ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80029ea:	2300      	movs	r3, #0
 80029ec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d115      	bne.n	8002a20 <vTaskStartScheduler+0x80>
 80029f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f8:	f383 8811 	msr	BASEPRI, r3
 80029fc:	f3bf 8f6f 	isb	sy
 8002a00:	f3bf 8f4f 	dsb	sy
 8002a04:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002a06:	4b12      	ldr	r3, [pc, #72]	; (8002a50 <vTaskStartScheduler+0xb0>)
 8002a08:	f04f 32ff 	mov.w	r2, #4294967295
 8002a0c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002a0e:	4b11      	ldr	r3, [pc, #68]	; (8002a54 <vTaskStartScheduler+0xb4>)
 8002a10:	2201      	movs	r2, #1
 8002a12:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002a14:	4b10      	ldr	r3, [pc, #64]	; (8002a58 <vTaskStartScheduler+0xb8>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002a1a:	f000 fbb9 	bl	8003190 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002a1e:	e00d      	b.n	8002a3c <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a26:	d109      	bne.n	8002a3c <vTaskStartScheduler+0x9c>
 8002a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a2c:	f383 8811 	msr	BASEPRI, r3
 8002a30:	f3bf 8f6f 	isb	sy
 8002a34:	f3bf 8f4f 	dsb	sy
 8002a38:	60fb      	str	r3, [r7, #12]
 8002a3a:	e7fe      	b.n	8002a3a <vTaskStartScheduler+0x9a>
}
 8002a3c:	bf00      	nop
 8002a3e:	3718      	adds	r7, #24
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	080040f4 	.word	0x080040f4
 8002a48:	08002dd5 	.word	0x08002dd5
 8002a4c:	20000510 	.word	0x20000510
 8002a50:	2000050c 	.word	0x2000050c
 8002a54:	200004f8 	.word	0x200004f8
 8002a58:	200004f0 	.word	0x200004f0

08002a5c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002a60:	4b04      	ldr	r3, [pc, #16]	; (8002a74 <vTaskSuspendAll+0x18>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	3301      	adds	r3, #1
 8002a66:	4a03      	ldr	r2, [pc, #12]	; (8002a74 <vTaskSuspendAll+0x18>)
 8002a68:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8002a6a:	bf00      	nop
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	20000514 	.word	0x20000514

08002a78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002a82:	2300      	movs	r3, #0
 8002a84:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002a86:	4b41      	ldr	r3, [pc, #260]	; (8002b8c <xTaskResumeAll+0x114>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d109      	bne.n	8002aa2 <xTaskResumeAll+0x2a>
 8002a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a92:	f383 8811 	msr	BASEPRI, r3
 8002a96:	f3bf 8f6f 	isb	sy
 8002a9a:	f3bf 8f4f 	dsb	sy
 8002a9e:	603b      	str	r3, [r7, #0]
 8002aa0:	e7fe      	b.n	8002aa0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002aa2:	f000 fc13 	bl	80032cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002aa6:	4b39      	ldr	r3, [pc, #228]	; (8002b8c <xTaskResumeAll+0x114>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	4a37      	ldr	r2, [pc, #220]	; (8002b8c <xTaskResumeAll+0x114>)
 8002aae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ab0:	4b36      	ldr	r3, [pc, #216]	; (8002b8c <xTaskResumeAll+0x114>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d161      	bne.n	8002b7c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002ab8:	4b35      	ldr	r3, [pc, #212]	; (8002b90 <xTaskResumeAll+0x118>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d05d      	beq.n	8002b7c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ac0:	e02e      	b.n	8002b20 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ac2:	4b34      	ldr	r3, [pc, #208]	; (8002b94 <xTaskResumeAll+0x11c>)
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	3318      	adds	r3, #24
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff fd78 	bl	80025c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	3304      	adds	r3, #4
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff fd73 	bl	80025c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	409a      	lsls	r2, r3
 8002ae6:	4b2c      	ldr	r3, [pc, #176]	; (8002b98 <xTaskResumeAll+0x120>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	4a2a      	ldr	r2, [pc, #168]	; (8002b98 <xTaskResumeAll+0x120>)
 8002aee:	6013      	str	r3, [r2, #0]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002af4:	4613      	mov	r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4a27      	ldr	r2, [pc, #156]	; (8002b9c <xTaskResumeAll+0x124>)
 8002afe:	441a      	add	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	3304      	adds	r3, #4
 8002b04:	4619      	mov	r1, r3
 8002b06:	4610      	mov	r0, r2
 8002b08:	f7ff fcff 	bl	800250a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b10:	4b23      	ldr	r3, [pc, #140]	; (8002ba0 <xTaskResumeAll+0x128>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d302      	bcc.n	8002b20 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8002b1a:	4b22      	ldr	r3, [pc, #136]	; (8002ba4 <xTaskResumeAll+0x12c>)
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b20:	4b1c      	ldr	r3, [pc, #112]	; (8002b94 <xTaskResumeAll+0x11c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d1cc      	bne.n	8002ac2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002b2e:	f000 fa03 	bl	8002f38 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002b32:	4b1d      	ldr	r3, [pc, #116]	; (8002ba8 <xTaskResumeAll+0x130>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d010      	beq.n	8002b60 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002b3e:	f000 f837 	bl	8002bb0 <xTaskIncrementTick>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d002      	beq.n	8002b4e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8002b48:	4b16      	ldr	r3, [pc, #88]	; (8002ba4 <xTaskResumeAll+0x12c>)
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	3b01      	subs	r3, #1
 8002b52:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1f1      	bne.n	8002b3e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8002b5a:	4b13      	ldr	r3, [pc, #76]	; (8002ba8 <xTaskResumeAll+0x130>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002b60:	4b10      	ldr	r3, [pc, #64]	; (8002ba4 <xTaskResumeAll+0x12c>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d009      	beq.n	8002b7c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002b6c:	4b0f      	ldr	r3, [pc, #60]	; (8002bac <xTaskResumeAll+0x134>)
 8002b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	f3bf 8f4f 	dsb	sy
 8002b78:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002b7c:	f000 fbd4 	bl	8003328 <vPortExitCritical>

	return xAlreadyYielded;
 8002b80:	68bb      	ldr	r3, [r7, #8]
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	20000514 	.word	0x20000514
 8002b90:	200004ec 	.word	0x200004ec
 8002b94:	200004ac 	.word	0x200004ac
 8002b98:	200004f4 	.word	0x200004f4
 8002b9c:	200003f0 	.word	0x200003f0
 8002ba0:	200003ec 	.word	0x200003ec
 8002ba4:	20000500 	.word	0x20000500
 8002ba8:	200004fc 	.word	0x200004fc
 8002bac:	e000ed04 	.word	0xe000ed04

08002bb0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002bba:	4b4e      	ldr	r3, [pc, #312]	; (8002cf4 <xTaskIncrementTick+0x144>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f040 8087 	bne.w	8002cd2 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002bc4:	4b4c      	ldr	r3, [pc, #304]	; (8002cf8 <xTaskIncrementTick+0x148>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002bcc:	4a4a      	ldr	r2, [pc, #296]	; (8002cf8 <xTaskIncrementTick+0x148>)
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d11f      	bne.n	8002c18 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002bd8:	4b48      	ldr	r3, [pc, #288]	; (8002cfc <xTaskIncrementTick+0x14c>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d009      	beq.n	8002bf6 <xTaskIncrementTick+0x46>
 8002be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be6:	f383 8811 	msr	BASEPRI, r3
 8002bea:	f3bf 8f6f 	isb	sy
 8002bee:	f3bf 8f4f 	dsb	sy
 8002bf2:	603b      	str	r3, [r7, #0]
 8002bf4:	e7fe      	b.n	8002bf4 <xTaskIncrementTick+0x44>
 8002bf6:	4b41      	ldr	r3, [pc, #260]	; (8002cfc <xTaskIncrementTick+0x14c>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	4b40      	ldr	r3, [pc, #256]	; (8002d00 <xTaskIncrementTick+0x150>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a3e      	ldr	r2, [pc, #248]	; (8002cfc <xTaskIncrementTick+0x14c>)
 8002c02:	6013      	str	r3, [r2, #0]
 8002c04:	4a3e      	ldr	r2, [pc, #248]	; (8002d00 <xTaskIncrementTick+0x150>)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6013      	str	r3, [r2, #0]
 8002c0a:	4b3e      	ldr	r3, [pc, #248]	; (8002d04 <xTaskIncrementTick+0x154>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	3301      	adds	r3, #1
 8002c10:	4a3c      	ldr	r2, [pc, #240]	; (8002d04 <xTaskIncrementTick+0x154>)
 8002c12:	6013      	str	r3, [r2, #0]
 8002c14:	f000 f990 	bl	8002f38 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002c18:	4b3b      	ldr	r3, [pc, #236]	; (8002d08 <xTaskIncrementTick+0x158>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d348      	bcc.n	8002cb4 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c22:	4b36      	ldr	r3, [pc, #216]	; (8002cfc <xTaskIncrementTick+0x14c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d104      	bne.n	8002c36 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c2c:	4b36      	ldr	r3, [pc, #216]	; (8002d08 <xTaskIncrementTick+0x158>)
 8002c2e:	f04f 32ff 	mov.w	r2, #4294967295
 8002c32:	601a      	str	r2, [r3, #0]
					break;
 8002c34:	e03e      	b.n	8002cb4 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c36:	4b31      	ldr	r3, [pc, #196]	; (8002cfc <xTaskIncrementTick+0x14c>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d203      	bcs.n	8002c56 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002c4e:	4a2e      	ldr	r2, [pc, #184]	; (8002d08 <xTaskIncrementTick+0x158>)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002c54:	e02e      	b.n	8002cb4 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	3304      	adds	r3, #4
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7ff fcb2 	bl	80025c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d004      	beq.n	8002c72 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	3318      	adds	r3, #24
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff fca9 	bl	80025c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c76:	2201      	movs	r2, #1
 8002c78:	409a      	lsls	r2, r3
 8002c7a:	4b24      	ldr	r3, [pc, #144]	; (8002d0c <xTaskIncrementTick+0x15c>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	4a22      	ldr	r2, [pc, #136]	; (8002d0c <xTaskIncrementTick+0x15c>)
 8002c82:	6013      	str	r3, [r2, #0]
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c88:	4613      	mov	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4a1f      	ldr	r2, [pc, #124]	; (8002d10 <xTaskIncrementTick+0x160>)
 8002c92:	441a      	add	r2, r3
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	3304      	adds	r3, #4
 8002c98:	4619      	mov	r1, r3
 8002c9a:	4610      	mov	r0, r2
 8002c9c:	f7ff fc35 	bl	800250a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ca4:	4b1b      	ldr	r3, [pc, #108]	; (8002d14 <xTaskIncrementTick+0x164>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d3b9      	bcc.n	8002c22 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002cb2:	e7b6      	b.n	8002c22 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002cb4:	4b17      	ldr	r3, [pc, #92]	; (8002d14 <xTaskIncrementTick+0x164>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cba:	4915      	ldr	r1, [pc, #84]	; (8002d10 <xTaskIncrementTick+0x160>)
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	4413      	add	r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	440b      	add	r3, r1
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d907      	bls.n	8002cdc <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	617b      	str	r3, [r7, #20]
 8002cd0:	e004      	b.n	8002cdc <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002cd2:	4b11      	ldr	r3, [pc, #68]	; (8002d18 <xTaskIncrementTick+0x168>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	4a0f      	ldr	r2, [pc, #60]	; (8002d18 <xTaskIncrementTick+0x168>)
 8002cda:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002cdc:	4b0f      	ldr	r3, [pc, #60]	; (8002d1c <xTaskIncrementTick+0x16c>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002ce8:	697b      	ldr	r3, [r7, #20]
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3718      	adds	r7, #24
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	20000514 	.word	0x20000514
 8002cf8:	200004f0 	.word	0x200004f0
 8002cfc:	200004a4 	.word	0x200004a4
 8002d00:	200004a8 	.word	0x200004a8
 8002d04:	20000504 	.word	0x20000504
 8002d08:	2000050c 	.word	0x2000050c
 8002d0c:	200004f4 	.word	0x200004f4
 8002d10:	200003f0 	.word	0x200003f0
 8002d14:	200003ec 	.word	0x200003ec
 8002d18:	200004fc 	.word	0x200004fc
 8002d1c:	20000500 	.word	0x20000500

08002d20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002d20:	b480      	push	{r7}
 8002d22:	b087      	sub	sp, #28
 8002d24:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002d26:	4b26      	ldr	r3, [pc, #152]	; (8002dc0 <vTaskSwitchContext+0xa0>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002d2e:	4b25      	ldr	r3, [pc, #148]	; (8002dc4 <vTaskSwitchContext+0xa4>)
 8002d30:	2201      	movs	r2, #1
 8002d32:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002d34:	e03e      	b.n	8002db4 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8002d36:	4b23      	ldr	r3, [pc, #140]	; (8002dc4 <vTaskSwitchContext+0xa4>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d3c:	4b22      	ldr	r3, [pc, #136]	; (8002dc8 <vTaskSwitchContext+0xa8>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	fab3 f383 	clz	r3, r3
 8002d48:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002d4a:	7afb      	ldrb	r3, [r7, #11]
 8002d4c:	f1c3 031f 	rsb	r3, r3, #31
 8002d50:	617b      	str	r3, [r7, #20]
 8002d52:	491e      	ldr	r1, [pc, #120]	; (8002dcc <vTaskSwitchContext+0xac>)
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	4613      	mov	r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	4413      	add	r3, r2
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	440b      	add	r3, r1
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d109      	bne.n	8002d7a <vTaskSwitchContext+0x5a>
	__asm volatile
 8002d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d6a:	f383 8811 	msr	BASEPRI, r3
 8002d6e:	f3bf 8f6f 	isb	sy
 8002d72:	f3bf 8f4f 	dsb	sy
 8002d76:	607b      	str	r3, [r7, #4]
 8002d78:	e7fe      	b.n	8002d78 <vTaskSwitchContext+0x58>
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	4a11      	ldr	r2, [pc, #68]	; (8002dcc <vTaskSwitchContext+0xac>)
 8002d86:	4413      	add	r3, r2
 8002d88:	613b      	str	r3, [r7, #16]
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	605a      	str	r2, [r3, #4]
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	3308      	adds	r3, #8
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d104      	bne.n	8002daa <vTaskSwitchContext+0x8a>
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	685a      	ldr	r2, [r3, #4]
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	605a      	str	r2, [r3, #4]
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	4a07      	ldr	r2, [pc, #28]	; (8002dd0 <vTaskSwitchContext+0xb0>)
 8002db2:	6013      	str	r3, [r2, #0]
}
 8002db4:	bf00      	nop
 8002db6:	371c      	adds	r7, #28
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr
 8002dc0:	20000514 	.word	0x20000514
 8002dc4:	20000500 	.word	0x20000500
 8002dc8:	200004f4 	.word	0x200004f4
 8002dcc:	200003f0 	.word	0x200003f0
 8002dd0:	200003ec 	.word	0x200003ec

08002dd4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002ddc:	f000 f852 	bl	8002e84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002de0:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <prvIdleTask+0x28>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d9f9      	bls.n	8002ddc <prvIdleTask+0x8>
			{
				taskYIELD();
 8002de8:	4b05      	ldr	r3, [pc, #20]	; (8002e00 <prvIdleTask+0x2c>)
 8002dea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	f3bf 8f4f 	dsb	sy
 8002df4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002df8:	e7f0      	b.n	8002ddc <prvIdleTask+0x8>
 8002dfa:	bf00      	nop
 8002dfc:	200003f0 	.word	0x200003f0
 8002e00:	e000ed04 	.word	0xe000ed04

08002e04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	607b      	str	r3, [r7, #4]
 8002e0e:	e00c      	b.n	8002e2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	4613      	mov	r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4413      	add	r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	4a12      	ldr	r2, [pc, #72]	; (8002e64 <prvInitialiseTaskLists+0x60>)
 8002e1c:	4413      	add	r3, r2
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7ff fb46 	bl	80024b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	3301      	adds	r3, #1
 8002e28:	607b      	str	r3, [r7, #4]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b06      	cmp	r3, #6
 8002e2e:	d9ef      	bls.n	8002e10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002e30:	480d      	ldr	r0, [pc, #52]	; (8002e68 <prvInitialiseTaskLists+0x64>)
 8002e32:	f7ff fb3d 	bl	80024b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002e36:	480d      	ldr	r0, [pc, #52]	; (8002e6c <prvInitialiseTaskLists+0x68>)
 8002e38:	f7ff fb3a 	bl	80024b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002e3c:	480c      	ldr	r0, [pc, #48]	; (8002e70 <prvInitialiseTaskLists+0x6c>)
 8002e3e:	f7ff fb37 	bl	80024b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002e42:	480c      	ldr	r0, [pc, #48]	; (8002e74 <prvInitialiseTaskLists+0x70>)
 8002e44:	f7ff fb34 	bl	80024b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002e48:	480b      	ldr	r0, [pc, #44]	; (8002e78 <prvInitialiseTaskLists+0x74>)
 8002e4a:	f7ff fb31 	bl	80024b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002e4e:	4b0b      	ldr	r3, [pc, #44]	; (8002e7c <prvInitialiseTaskLists+0x78>)
 8002e50:	4a05      	ldr	r2, [pc, #20]	; (8002e68 <prvInitialiseTaskLists+0x64>)
 8002e52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002e54:	4b0a      	ldr	r3, [pc, #40]	; (8002e80 <prvInitialiseTaskLists+0x7c>)
 8002e56:	4a05      	ldr	r2, [pc, #20]	; (8002e6c <prvInitialiseTaskLists+0x68>)
 8002e58:	601a      	str	r2, [r3, #0]
}
 8002e5a:	bf00      	nop
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	200003f0 	.word	0x200003f0
 8002e68:	2000047c 	.word	0x2000047c
 8002e6c:	20000490 	.word	0x20000490
 8002e70:	200004ac 	.word	0x200004ac
 8002e74:	200004c0 	.word	0x200004c0
 8002e78:	200004d8 	.word	0x200004d8
 8002e7c:	200004a4 	.word	0x200004a4
 8002e80:	200004a8 	.word	0x200004a8

08002e84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002e8a:	e019      	b.n	8002ec0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002e8c:	f000 fa1e 	bl	80032cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e90:	4b0f      	ldr	r3, [pc, #60]	; (8002ed0 <prvCheckTasksWaitingTermination+0x4c>)
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	3304      	adds	r3, #4
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7ff fb91 	bl	80025c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002ea2:	4b0c      	ldr	r3, [pc, #48]	; (8002ed4 <prvCheckTasksWaitingTermination+0x50>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	4a0a      	ldr	r2, [pc, #40]	; (8002ed4 <prvCheckTasksWaitingTermination+0x50>)
 8002eaa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002eac:	4b0a      	ldr	r3, [pc, #40]	; (8002ed8 <prvCheckTasksWaitingTermination+0x54>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	4a09      	ldr	r2, [pc, #36]	; (8002ed8 <prvCheckTasksWaitingTermination+0x54>)
 8002eb4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002eb6:	f000 fa37 	bl	8003328 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 f80e 	bl	8002edc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002ec0:	4b05      	ldr	r3, [pc, #20]	; (8002ed8 <prvCheckTasksWaitingTermination+0x54>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d1e1      	bne.n	8002e8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002ec8:	bf00      	nop
 8002eca:	3708      	adds	r7, #8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	200004c0 	.word	0x200004c0
 8002ed4:	200004ec 	.word	0x200004ec
 8002ed8:	200004d4 	.word	0x200004d4

08002edc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d108      	bne.n	8002f00 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f000 fb88 	bl	8003608 <vPortFree>
				vPortFree( pxTCB );
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 fb85 	bl	8003608 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002efe:	e017      	b.n	8002f30 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d103      	bne.n	8002f12 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 fb7c 	bl	8003608 <vPortFree>
	}
 8002f10:	e00e      	b.n	8002f30 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d009      	beq.n	8002f30 <prvDeleteTCB+0x54>
 8002f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f20:	f383 8811 	msr	BASEPRI, r3
 8002f24:	f3bf 8f6f 	isb	sy
 8002f28:	f3bf 8f4f 	dsb	sy
 8002f2c:	60fb      	str	r3, [r7, #12]
 8002f2e:	e7fe      	b.n	8002f2e <prvDeleteTCB+0x52>
	}
 8002f30:	bf00      	nop
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f3e:	4b0c      	ldr	r3, [pc, #48]	; (8002f70 <prvResetNextTaskUnblockTime+0x38>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d104      	bne.n	8002f52 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002f48:	4b0a      	ldr	r3, [pc, #40]	; (8002f74 <prvResetNextTaskUnblockTime+0x3c>)
 8002f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8002f4e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002f50:	e008      	b.n	8002f64 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f52:	4b07      	ldr	r3, [pc, #28]	; (8002f70 <prvResetNextTaskUnblockTime+0x38>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	4a04      	ldr	r2, [pc, #16]	; (8002f74 <prvResetNextTaskUnblockTime+0x3c>)
 8002f62:	6013      	str	r3, [r2, #0]
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr
 8002f70:	200004a4 	.word	0x200004a4
 8002f74:	2000050c 	.word	0x2000050c

08002f78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002f7e:	4b0b      	ldr	r3, [pc, #44]	; (8002fac <xTaskGetSchedulerState+0x34>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d102      	bne.n	8002f8c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002f86:	2301      	movs	r3, #1
 8002f88:	607b      	str	r3, [r7, #4]
 8002f8a:	e008      	b.n	8002f9e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f8c:	4b08      	ldr	r3, [pc, #32]	; (8002fb0 <xTaskGetSchedulerState+0x38>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d102      	bne.n	8002f9a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002f94:	2302      	movs	r3, #2
 8002f96:	607b      	str	r3, [r7, #4]
 8002f98:	e001      	b.n	8002f9e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002f9e:	687b      	ldr	r3, [r7, #4]
	}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr
 8002fac:	200004f8 	.word	0x200004f8
 8002fb0:	20000514 	.word	0x20000514

08002fb4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002fbe:	4b29      	ldr	r3, [pc, #164]	; (8003064 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002fc4:	4b28      	ldr	r3, [pc, #160]	; (8003068 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	3304      	adds	r3, #4
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7ff fafa 	bl	80025c4 <uxListRemove>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10b      	bne.n	8002fee <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002fd6:	4b24      	ldr	r3, [pc, #144]	; (8003068 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fdc:	2201      	movs	r2, #1
 8002fde:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe2:	43da      	mvns	r2, r3
 8002fe4:	4b21      	ldr	r3, [pc, #132]	; (800306c <prvAddCurrentTaskToDelayedList+0xb8>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	4a20      	ldr	r2, [pc, #128]	; (800306c <prvAddCurrentTaskToDelayedList+0xb8>)
 8002fec:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff4:	d10a      	bne.n	800300c <prvAddCurrentTaskToDelayedList+0x58>
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d007      	beq.n	800300c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002ffc:	4b1a      	ldr	r3, [pc, #104]	; (8003068 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	3304      	adds	r3, #4
 8003002:	4619      	mov	r1, r3
 8003004:	481a      	ldr	r0, [pc, #104]	; (8003070 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003006:	f7ff fa80 	bl	800250a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800300a:	e026      	b.n	800305a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4413      	add	r3, r2
 8003012:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003014:	4b14      	ldr	r3, [pc, #80]	; (8003068 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68ba      	ldr	r2, [r7, #8]
 800301a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800301c:	68ba      	ldr	r2, [r7, #8]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	429a      	cmp	r2, r3
 8003022:	d209      	bcs.n	8003038 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003024:	4b13      	ldr	r3, [pc, #76]	; (8003074 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	4b0f      	ldr	r3, [pc, #60]	; (8003068 <prvAddCurrentTaskToDelayedList+0xb4>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	3304      	adds	r3, #4
 800302e:	4619      	mov	r1, r3
 8003030:	4610      	mov	r0, r2
 8003032:	f7ff fa8e 	bl	8002552 <vListInsert>
}
 8003036:	e010      	b.n	800305a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003038:	4b0f      	ldr	r3, [pc, #60]	; (8003078 <prvAddCurrentTaskToDelayedList+0xc4>)
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	4b0a      	ldr	r3, [pc, #40]	; (8003068 <prvAddCurrentTaskToDelayedList+0xb4>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	3304      	adds	r3, #4
 8003042:	4619      	mov	r1, r3
 8003044:	4610      	mov	r0, r2
 8003046:	f7ff fa84 	bl	8002552 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800304a:	4b0c      	ldr	r3, [pc, #48]	; (800307c <prvAddCurrentTaskToDelayedList+0xc8>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68ba      	ldr	r2, [r7, #8]
 8003050:	429a      	cmp	r2, r3
 8003052:	d202      	bcs.n	800305a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003054:	4a09      	ldr	r2, [pc, #36]	; (800307c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	6013      	str	r3, [r2, #0]
}
 800305a:	bf00      	nop
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	200004f0 	.word	0x200004f0
 8003068:	200003ec 	.word	0x200003ec
 800306c:	200004f4 	.word	0x200004f4
 8003070:	200004d8 	.word	0x200004d8
 8003074:	200004a8 	.word	0x200004a8
 8003078:	200004a4 	.word	0x200004a4
 800307c:	2000050c 	.word	0x2000050c

08003080 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003080:	b480      	push	{r7}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	3b04      	subs	r3, #4
 8003090:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003098:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	3b04      	subs	r3, #4
 800309e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	f023 0201 	bic.w	r2, r3, #1
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	3b04      	subs	r3, #4
 80030ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80030b0:	4a0c      	ldr	r2, [pc, #48]	; (80030e4 <pxPortInitialiseStack+0x64>)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	3b14      	subs	r3, #20
 80030ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	3b04      	subs	r3, #4
 80030c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f06f 0202 	mvn.w	r2, #2
 80030ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	3b20      	subs	r3, #32
 80030d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80030d6:	68fb      	ldr	r3, [r7, #12]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3714      	adds	r7, #20
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr
 80030e4:	080030e9 	.word	0x080030e9

080030e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80030ee:	2300      	movs	r3, #0
 80030f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80030f2:	4b11      	ldr	r3, [pc, #68]	; (8003138 <prvTaskExitError+0x50>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030fa:	d009      	beq.n	8003110 <prvTaskExitError+0x28>
 80030fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003100:	f383 8811 	msr	BASEPRI, r3
 8003104:	f3bf 8f6f 	isb	sy
 8003108:	f3bf 8f4f 	dsb	sy
 800310c:	60fb      	str	r3, [r7, #12]
 800310e:	e7fe      	b.n	800310e <prvTaskExitError+0x26>
 8003110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003114:	f383 8811 	msr	BASEPRI, r3
 8003118:	f3bf 8f6f 	isb	sy
 800311c:	f3bf 8f4f 	dsb	sy
 8003120:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003122:	bf00      	nop
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d0fc      	beq.n	8003124 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800312a:	bf00      	nop
 800312c:	3714      	adds	r7, #20
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	2000000c 	.word	0x2000000c
 800313c:	00000000 	.word	0x00000000

08003140 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003140:	4b07      	ldr	r3, [pc, #28]	; (8003160 <pxCurrentTCBConst2>)
 8003142:	6819      	ldr	r1, [r3, #0]
 8003144:	6808      	ldr	r0, [r1, #0]
 8003146:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800314a:	f380 8809 	msr	PSP, r0
 800314e:	f3bf 8f6f 	isb	sy
 8003152:	f04f 0000 	mov.w	r0, #0
 8003156:	f380 8811 	msr	BASEPRI, r0
 800315a:	4770      	bx	lr
 800315c:	f3af 8000 	nop.w

08003160 <pxCurrentTCBConst2>:
 8003160:	200003ec 	.word	0x200003ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003164:	bf00      	nop
 8003166:	bf00      	nop

08003168 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003168:	4808      	ldr	r0, [pc, #32]	; (800318c <prvPortStartFirstTask+0x24>)
 800316a:	6800      	ldr	r0, [r0, #0]
 800316c:	6800      	ldr	r0, [r0, #0]
 800316e:	f380 8808 	msr	MSP, r0
 8003172:	f04f 0000 	mov.w	r0, #0
 8003176:	f380 8814 	msr	CONTROL, r0
 800317a:	b662      	cpsie	i
 800317c:	b661      	cpsie	f
 800317e:	f3bf 8f4f 	dsb	sy
 8003182:	f3bf 8f6f 	isb	sy
 8003186:	df00      	svc	0
 8003188:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800318a:	bf00      	nop
 800318c:	e000ed08 	.word	0xe000ed08

08003190 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003196:	4b44      	ldr	r3, [pc, #272]	; (80032a8 <xPortStartScheduler+0x118>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a44      	ldr	r2, [pc, #272]	; (80032ac <xPortStartScheduler+0x11c>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d109      	bne.n	80031b4 <xPortStartScheduler+0x24>
 80031a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a4:	f383 8811 	msr	BASEPRI, r3
 80031a8:	f3bf 8f6f 	isb	sy
 80031ac:	f3bf 8f4f 	dsb	sy
 80031b0:	613b      	str	r3, [r7, #16]
 80031b2:	e7fe      	b.n	80031b2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80031b4:	4b3c      	ldr	r3, [pc, #240]	; (80032a8 <xPortStartScheduler+0x118>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a3d      	ldr	r2, [pc, #244]	; (80032b0 <xPortStartScheduler+0x120>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d109      	bne.n	80031d2 <xPortStartScheduler+0x42>
 80031be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c2:	f383 8811 	msr	BASEPRI, r3
 80031c6:	f3bf 8f6f 	isb	sy
 80031ca:	f3bf 8f4f 	dsb	sy
 80031ce:	60fb      	str	r3, [r7, #12]
 80031d0:	e7fe      	b.n	80031d0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80031d2:	4b38      	ldr	r3, [pc, #224]	; (80032b4 <xPortStartScheduler+0x124>)
 80031d4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	22ff      	movs	r2, #255	; 0xff
 80031e2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80031ec:	78fb      	ldrb	r3, [r7, #3]
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80031f4:	b2da      	uxtb	r2, r3
 80031f6:	4b30      	ldr	r3, [pc, #192]	; (80032b8 <xPortStartScheduler+0x128>)
 80031f8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80031fa:	4b30      	ldr	r3, [pc, #192]	; (80032bc <xPortStartScheduler+0x12c>)
 80031fc:	2207      	movs	r2, #7
 80031fe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003200:	e009      	b.n	8003216 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003202:	4b2e      	ldr	r3, [pc, #184]	; (80032bc <xPortStartScheduler+0x12c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	3b01      	subs	r3, #1
 8003208:	4a2c      	ldr	r2, [pc, #176]	; (80032bc <xPortStartScheduler+0x12c>)
 800320a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800320c:	78fb      	ldrb	r3, [r7, #3]
 800320e:	b2db      	uxtb	r3, r3
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	b2db      	uxtb	r3, r3
 8003214:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003216:	78fb      	ldrb	r3, [r7, #3]
 8003218:	b2db      	uxtb	r3, r3
 800321a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800321e:	2b80      	cmp	r3, #128	; 0x80
 8003220:	d0ef      	beq.n	8003202 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003222:	4b26      	ldr	r3, [pc, #152]	; (80032bc <xPortStartScheduler+0x12c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f1c3 0307 	rsb	r3, r3, #7
 800322a:	2b04      	cmp	r3, #4
 800322c:	d009      	beq.n	8003242 <xPortStartScheduler+0xb2>
 800322e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003232:	f383 8811 	msr	BASEPRI, r3
 8003236:	f3bf 8f6f 	isb	sy
 800323a:	f3bf 8f4f 	dsb	sy
 800323e:	60bb      	str	r3, [r7, #8]
 8003240:	e7fe      	b.n	8003240 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003242:	4b1e      	ldr	r3, [pc, #120]	; (80032bc <xPortStartScheduler+0x12c>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	021b      	lsls	r3, r3, #8
 8003248:	4a1c      	ldr	r2, [pc, #112]	; (80032bc <xPortStartScheduler+0x12c>)
 800324a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800324c:	4b1b      	ldr	r3, [pc, #108]	; (80032bc <xPortStartScheduler+0x12c>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003254:	4a19      	ldr	r2, [pc, #100]	; (80032bc <xPortStartScheduler+0x12c>)
 8003256:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	b2da      	uxtb	r2, r3
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003260:	4b17      	ldr	r3, [pc, #92]	; (80032c0 <xPortStartScheduler+0x130>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a16      	ldr	r2, [pc, #88]	; (80032c0 <xPortStartScheduler+0x130>)
 8003266:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800326a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800326c:	4b14      	ldr	r3, [pc, #80]	; (80032c0 <xPortStartScheduler+0x130>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a13      	ldr	r2, [pc, #76]	; (80032c0 <xPortStartScheduler+0x130>)
 8003272:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003276:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003278:	f000 f8d6 	bl	8003428 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800327c:	4b11      	ldr	r3, [pc, #68]	; (80032c4 <xPortStartScheduler+0x134>)
 800327e:	2200      	movs	r2, #0
 8003280:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003282:	f000 f8f5 	bl	8003470 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003286:	4b10      	ldr	r3, [pc, #64]	; (80032c8 <xPortStartScheduler+0x138>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a0f      	ldr	r2, [pc, #60]	; (80032c8 <xPortStartScheduler+0x138>)
 800328c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003290:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003292:	f7ff ff69 	bl	8003168 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003296:	f7ff fd43 	bl	8002d20 <vTaskSwitchContext>
	prvTaskExitError();
 800329a:	f7ff ff25 	bl	80030e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3718      	adds	r7, #24
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	e000ed00 	.word	0xe000ed00
 80032ac:	410fc271 	.word	0x410fc271
 80032b0:	410fc270 	.word	0x410fc270
 80032b4:	e000e400 	.word	0xe000e400
 80032b8:	20000518 	.word	0x20000518
 80032bc:	2000051c 	.word	0x2000051c
 80032c0:	e000ed20 	.word	0xe000ed20
 80032c4:	2000000c 	.word	0x2000000c
 80032c8:	e000ef34 	.word	0xe000ef34

080032cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d6:	f383 8811 	msr	BASEPRI, r3
 80032da:	f3bf 8f6f 	isb	sy
 80032de:	f3bf 8f4f 	dsb	sy
 80032e2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80032e4:	4b0e      	ldr	r3, [pc, #56]	; (8003320 <vPortEnterCritical+0x54>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	3301      	adds	r3, #1
 80032ea:	4a0d      	ldr	r2, [pc, #52]	; (8003320 <vPortEnterCritical+0x54>)
 80032ec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80032ee:	4b0c      	ldr	r3, [pc, #48]	; (8003320 <vPortEnterCritical+0x54>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d10e      	bne.n	8003314 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80032f6:	4b0b      	ldr	r3, [pc, #44]	; (8003324 <vPortEnterCritical+0x58>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d009      	beq.n	8003314 <vPortEnterCritical+0x48>
 8003300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003304:	f383 8811 	msr	BASEPRI, r3
 8003308:	f3bf 8f6f 	isb	sy
 800330c:	f3bf 8f4f 	dsb	sy
 8003310:	603b      	str	r3, [r7, #0]
 8003312:	e7fe      	b.n	8003312 <vPortEnterCritical+0x46>
	}
}
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr
 8003320:	2000000c 	.word	0x2000000c
 8003324:	e000ed04 	.word	0xe000ed04

08003328 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800332e:	4b11      	ldr	r3, [pc, #68]	; (8003374 <vPortExitCritical+0x4c>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d109      	bne.n	800334a <vPortExitCritical+0x22>
 8003336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800333a:	f383 8811 	msr	BASEPRI, r3
 800333e:	f3bf 8f6f 	isb	sy
 8003342:	f3bf 8f4f 	dsb	sy
 8003346:	607b      	str	r3, [r7, #4]
 8003348:	e7fe      	b.n	8003348 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800334a:	4b0a      	ldr	r3, [pc, #40]	; (8003374 <vPortExitCritical+0x4c>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	3b01      	subs	r3, #1
 8003350:	4a08      	ldr	r2, [pc, #32]	; (8003374 <vPortExitCritical+0x4c>)
 8003352:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003354:	4b07      	ldr	r3, [pc, #28]	; (8003374 <vPortExitCritical+0x4c>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d104      	bne.n	8003366 <vPortExitCritical+0x3e>
 800335c:	2300      	movs	r3, #0
 800335e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003366:	bf00      	nop
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	2000000c 	.word	0x2000000c
	...

08003380 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003380:	f3ef 8009 	mrs	r0, PSP
 8003384:	f3bf 8f6f 	isb	sy
 8003388:	4b15      	ldr	r3, [pc, #84]	; (80033e0 <pxCurrentTCBConst>)
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	f01e 0f10 	tst.w	lr, #16
 8003390:	bf08      	it	eq
 8003392:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003396:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800339a:	6010      	str	r0, [r2, #0]
 800339c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80033a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80033a4:	f380 8811 	msr	BASEPRI, r0
 80033a8:	f3bf 8f4f 	dsb	sy
 80033ac:	f3bf 8f6f 	isb	sy
 80033b0:	f7ff fcb6 	bl	8002d20 <vTaskSwitchContext>
 80033b4:	f04f 0000 	mov.w	r0, #0
 80033b8:	f380 8811 	msr	BASEPRI, r0
 80033bc:	bc09      	pop	{r0, r3}
 80033be:	6819      	ldr	r1, [r3, #0]
 80033c0:	6808      	ldr	r0, [r1, #0]
 80033c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033c6:	f01e 0f10 	tst.w	lr, #16
 80033ca:	bf08      	it	eq
 80033cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80033d0:	f380 8809 	msr	PSP, r0
 80033d4:	f3bf 8f6f 	isb	sy
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	f3af 8000 	nop.w

080033e0 <pxCurrentTCBConst>:
 80033e0:	200003ec 	.word	0x200003ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80033e4:	bf00      	nop
 80033e6:	bf00      	nop

080033e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
	__asm volatile
 80033ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f2:	f383 8811 	msr	BASEPRI, r3
 80033f6:	f3bf 8f6f 	isb	sy
 80033fa:	f3bf 8f4f 	dsb	sy
 80033fe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003400:	f7ff fbd6 	bl	8002bb0 <xTaskIncrementTick>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d003      	beq.n	8003412 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800340a:	4b06      	ldr	r3, [pc, #24]	; (8003424 <xPortSysTickHandler+0x3c>)
 800340c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003410:	601a      	str	r2, [r3, #0]
 8003412:	2300      	movs	r3, #0
 8003414:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800341c:	bf00      	nop
 800341e:	3708      	adds	r7, #8
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	e000ed04 	.word	0xe000ed04

08003428 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800342c:	4b0b      	ldr	r3, [pc, #44]	; (800345c <vPortSetupTimerInterrupt+0x34>)
 800342e:	2200      	movs	r2, #0
 8003430:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003432:	4b0b      	ldr	r3, [pc, #44]	; (8003460 <vPortSetupTimerInterrupt+0x38>)
 8003434:	2200      	movs	r2, #0
 8003436:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003438:	4b0a      	ldr	r3, [pc, #40]	; (8003464 <vPortSetupTimerInterrupt+0x3c>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a0a      	ldr	r2, [pc, #40]	; (8003468 <vPortSetupTimerInterrupt+0x40>)
 800343e:	fba2 2303 	umull	r2, r3, r2, r3
 8003442:	099b      	lsrs	r3, r3, #6
 8003444:	4a09      	ldr	r2, [pc, #36]	; (800346c <vPortSetupTimerInterrupt+0x44>)
 8003446:	3b01      	subs	r3, #1
 8003448:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800344a:	4b04      	ldr	r3, [pc, #16]	; (800345c <vPortSetupTimerInterrupt+0x34>)
 800344c:	2207      	movs	r2, #7
 800344e:	601a      	str	r2, [r3, #0]
}
 8003450:	bf00      	nop
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	e000e010 	.word	0xe000e010
 8003460:	e000e018 	.word	0xe000e018
 8003464:	20000000 	.word	0x20000000
 8003468:	10624dd3 	.word	0x10624dd3
 800346c:	e000e014 	.word	0xe000e014

08003470 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003470:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003480 <vPortEnableVFP+0x10>
 8003474:	6801      	ldr	r1, [r0, #0]
 8003476:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800347a:	6001      	str	r1, [r0, #0]
 800347c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800347e:	bf00      	nop
 8003480:	e000ed88 	.word	0xe000ed88

08003484 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b08a      	sub	sp, #40	; 0x28
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800348c:	2300      	movs	r3, #0
 800348e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003490:	f7ff fae4 	bl	8002a5c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003494:	4b57      	ldr	r3, [pc, #348]	; (80035f4 <pvPortMalloc+0x170>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d101      	bne.n	80034a0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800349c:	f000 f90c 	bl	80036b8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80034a0:	4b55      	ldr	r3, [pc, #340]	; (80035f8 <pvPortMalloc+0x174>)
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4013      	ands	r3, r2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f040 808c 	bne.w	80035c6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d01c      	beq.n	80034ee <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80034b4:	2208      	movs	r2, #8
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4413      	add	r3, r2
 80034ba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f003 0307 	and.w	r3, r3, #7
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d013      	beq.n	80034ee <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f023 0307 	bic.w	r3, r3, #7
 80034cc:	3308      	adds	r3, #8
 80034ce:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f003 0307 	and.w	r3, r3, #7
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d009      	beq.n	80034ee <pvPortMalloc+0x6a>
	__asm volatile
 80034da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034de:	f383 8811 	msr	BASEPRI, r3
 80034e2:	f3bf 8f6f 	isb	sy
 80034e6:	f3bf 8f4f 	dsb	sy
 80034ea:	617b      	str	r3, [r7, #20]
 80034ec:	e7fe      	b.n	80034ec <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d068      	beq.n	80035c6 <pvPortMalloc+0x142>
 80034f4:	4b41      	ldr	r3, [pc, #260]	; (80035fc <pvPortMalloc+0x178>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d863      	bhi.n	80035c6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80034fe:	4b40      	ldr	r3, [pc, #256]	; (8003600 <pvPortMalloc+0x17c>)
 8003500:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003502:	4b3f      	ldr	r3, [pc, #252]	; (8003600 <pvPortMalloc+0x17c>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003508:	e004      	b.n	8003514 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800350a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800350e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	429a      	cmp	r2, r3
 800351c:	d903      	bls.n	8003526 <pvPortMalloc+0xa2>
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1f1      	bne.n	800350a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003526:	4b33      	ldr	r3, [pc, #204]	; (80035f4 <pvPortMalloc+0x170>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800352c:	429a      	cmp	r2, r3
 800352e:	d04a      	beq.n	80035c6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003530:	6a3b      	ldr	r3, [r7, #32]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2208      	movs	r2, #8
 8003536:	4413      	add	r3, r2
 8003538:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800353a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	6a3b      	ldr	r3, [r7, #32]
 8003540:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003544:	685a      	ldr	r2, [r3, #4]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	1ad2      	subs	r2, r2, r3
 800354a:	2308      	movs	r3, #8
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	429a      	cmp	r2, r3
 8003550:	d91e      	bls.n	8003590 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4413      	add	r3, r2
 8003558:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	f003 0307 	and.w	r3, r3, #7
 8003560:	2b00      	cmp	r3, #0
 8003562:	d009      	beq.n	8003578 <pvPortMalloc+0xf4>
 8003564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003568:	f383 8811 	msr	BASEPRI, r3
 800356c:	f3bf 8f6f 	isb	sy
 8003570:	f3bf 8f4f 	dsb	sy
 8003574:	613b      	str	r3, [r7, #16]
 8003576:	e7fe      	b.n	8003576 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	1ad2      	subs	r2, r2, r3
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800358a:	69b8      	ldr	r0, [r7, #24]
 800358c:	f000 f8f6 	bl	800377c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003590:	4b1a      	ldr	r3, [pc, #104]	; (80035fc <pvPortMalloc+0x178>)
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	4a18      	ldr	r2, [pc, #96]	; (80035fc <pvPortMalloc+0x178>)
 800359c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800359e:	4b17      	ldr	r3, [pc, #92]	; (80035fc <pvPortMalloc+0x178>)
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	4b18      	ldr	r3, [pc, #96]	; (8003604 <pvPortMalloc+0x180>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d203      	bcs.n	80035b2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80035aa:	4b14      	ldr	r3, [pc, #80]	; (80035fc <pvPortMalloc+0x178>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a15      	ldr	r2, [pc, #84]	; (8003604 <pvPortMalloc+0x180>)
 80035b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80035b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b4:	685a      	ldr	r2, [r3, #4]
 80035b6:	4b10      	ldr	r3, [pc, #64]	; (80035f8 <pvPortMalloc+0x174>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	431a      	orrs	r2, r3
 80035bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80035c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c2:	2200      	movs	r2, #0
 80035c4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80035c6:	f7ff fa57 	bl	8002a78 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d009      	beq.n	80035e8 <pvPortMalloc+0x164>
 80035d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d8:	f383 8811 	msr	BASEPRI, r3
 80035dc:	f3bf 8f6f 	isb	sy
 80035e0:	f3bf 8f4f 	dsb	sy
 80035e4:	60fb      	str	r3, [r7, #12]
 80035e6:	e7fe      	b.n	80035e6 <pvPortMalloc+0x162>
	return pvReturn;
 80035e8:	69fb      	ldr	r3, [r7, #28]
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3728      	adds	r7, #40	; 0x28
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	20004128 	.word	0x20004128
 80035f8:	20004134 	.word	0x20004134
 80035fc:	2000412c 	.word	0x2000412c
 8003600:	20004120 	.word	0x20004120
 8003604:	20004130 	.word	0x20004130

08003608 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b086      	sub	sp, #24
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d046      	beq.n	80036a8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800361a:	2308      	movs	r3, #8
 800361c:	425b      	negs	r3, r3
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	4413      	add	r3, r2
 8003622:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	685a      	ldr	r2, [r3, #4]
 800362c:	4b20      	ldr	r3, [pc, #128]	; (80036b0 <vPortFree+0xa8>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4013      	ands	r3, r2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d109      	bne.n	800364a <vPortFree+0x42>
 8003636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800363a:	f383 8811 	msr	BASEPRI, r3
 800363e:	f3bf 8f6f 	isb	sy
 8003642:	f3bf 8f4f 	dsb	sy
 8003646:	60fb      	str	r3, [r7, #12]
 8003648:	e7fe      	b.n	8003648 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d009      	beq.n	8003666 <vPortFree+0x5e>
 8003652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003656:	f383 8811 	msr	BASEPRI, r3
 800365a:	f3bf 8f6f 	isb	sy
 800365e:	f3bf 8f4f 	dsb	sy
 8003662:	60bb      	str	r3, [r7, #8]
 8003664:	e7fe      	b.n	8003664 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	685a      	ldr	r2, [r3, #4]
 800366a:	4b11      	ldr	r3, [pc, #68]	; (80036b0 <vPortFree+0xa8>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4013      	ands	r3, r2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d019      	beq.n	80036a8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d115      	bne.n	80036a8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	4b0b      	ldr	r3, [pc, #44]	; (80036b0 <vPortFree+0xa8>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	43db      	mvns	r3, r3
 8003686:	401a      	ands	r2, r3
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800368c:	f7ff f9e6 	bl	8002a5c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	4b07      	ldr	r3, [pc, #28]	; (80036b4 <vPortFree+0xac>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4413      	add	r3, r2
 800369a:	4a06      	ldr	r2, [pc, #24]	; (80036b4 <vPortFree+0xac>)
 800369c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800369e:	6938      	ldr	r0, [r7, #16]
 80036a0:	f000 f86c 	bl	800377c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80036a4:	f7ff f9e8 	bl	8002a78 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80036a8:	bf00      	nop
 80036aa:	3718      	adds	r7, #24
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	20004134 	.word	0x20004134
 80036b4:	2000412c 	.word	0x2000412c

080036b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80036be:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80036c2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80036c4:	4b27      	ldr	r3, [pc, #156]	; (8003764 <prvHeapInit+0xac>)
 80036c6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f003 0307 	and.w	r3, r3, #7
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00c      	beq.n	80036ec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	3307      	adds	r3, #7
 80036d6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f023 0307 	bic.w	r3, r3, #7
 80036de:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80036e0:	68ba      	ldr	r2, [r7, #8]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	4a1f      	ldr	r2, [pc, #124]	; (8003764 <prvHeapInit+0xac>)
 80036e8:	4413      	add	r3, r2
 80036ea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80036f0:	4a1d      	ldr	r2, [pc, #116]	; (8003768 <prvHeapInit+0xb0>)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80036f6:	4b1c      	ldr	r3, [pc, #112]	; (8003768 <prvHeapInit+0xb0>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	68ba      	ldr	r2, [r7, #8]
 8003700:	4413      	add	r3, r2
 8003702:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003704:	2208      	movs	r2, #8
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	1a9b      	subs	r3, r3, r2
 800370a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f023 0307 	bic.w	r3, r3, #7
 8003712:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	4a15      	ldr	r2, [pc, #84]	; (800376c <prvHeapInit+0xb4>)
 8003718:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800371a:	4b14      	ldr	r3, [pc, #80]	; (800376c <prvHeapInit+0xb4>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2200      	movs	r2, #0
 8003720:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003722:	4b12      	ldr	r3, [pc, #72]	; (800376c <prvHeapInit+0xb4>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2200      	movs	r2, #0
 8003728:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	1ad2      	subs	r2, r2, r3
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003738:	4b0c      	ldr	r3, [pc, #48]	; (800376c <prvHeapInit+0xb4>)
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	4a0a      	ldr	r2, [pc, #40]	; (8003770 <prvHeapInit+0xb8>)
 8003746:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	4a09      	ldr	r2, [pc, #36]	; (8003774 <prvHeapInit+0xbc>)
 800374e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003750:	4b09      	ldr	r3, [pc, #36]	; (8003778 <prvHeapInit+0xc0>)
 8003752:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003756:	601a      	str	r2, [r3, #0]
}
 8003758:	bf00      	nop
 800375a:	3714      	adds	r7, #20
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr
 8003764:	20000520 	.word	0x20000520
 8003768:	20004120 	.word	0x20004120
 800376c:	20004128 	.word	0x20004128
 8003770:	20004130 	.word	0x20004130
 8003774:	2000412c 	.word	0x2000412c
 8003778:	20004134 	.word	0x20004134

0800377c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003784:	4b28      	ldr	r3, [pc, #160]	; (8003828 <prvInsertBlockIntoFreeList+0xac>)
 8003786:	60fb      	str	r3, [r7, #12]
 8003788:	e002      	b.n	8003790 <prvInsertBlockIntoFreeList+0x14>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	60fb      	str	r3, [r7, #12]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	429a      	cmp	r2, r3
 8003798:	d8f7      	bhi.n	800378a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	68ba      	ldr	r2, [r7, #8]
 80037a4:	4413      	add	r3, r2
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d108      	bne.n	80037be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	685a      	ldr	r2, [r3, #4]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	441a      	add	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	68ba      	ldr	r2, [r7, #8]
 80037c8:	441a      	add	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d118      	bne.n	8003804 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	4b15      	ldr	r3, [pc, #84]	; (800382c <prvInsertBlockIntoFreeList+0xb0>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d00d      	beq.n	80037fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685a      	ldr	r2, [r3, #4]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	441a      	add	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	601a      	str	r2, [r3, #0]
 80037f8:	e008      	b.n	800380c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80037fa:	4b0c      	ldr	r3, [pc, #48]	; (800382c <prvInsertBlockIntoFreeList+0xb0>)
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	601a      	str	r2, [r3, #0]
 8003802:	e003      	b.n	800380c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	429a      	cmp	r2, r3
 8003812:	d002      	beq.n	800381a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800381a:	bf00      	nop
 800381c:	3714      	adds	r7, #20
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	20004120 	.word	0x20004120
 800382c:	20004128 	.word	0x20004128

08003830 <__errno>:
 8003830:	4b01      	ldr	r3, [pc, #4]	; (8003838 <__errno+0x8>)
 8003832:	6818      	ldr	r0, [r3, #0]
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	20000010 	.word	0x20000010

0800383c <__libc_init_array>:
 800383c:	b570      	push	{r4, r5, r6, lr}
 800383e:	4e0d      	ldr	r6, [pc, #52]	; (8003874 <__libc_init_array+0x38>)
 8003840:	4c0d      	ldr	r4, [pc, #52]	; (8003878 <__libc_init_array+0x3c>)
 8003842:	1ba4      	subs	r4, r4, r6
 8003844:	10a4      	asrs	r4, r4, #2
 8003846:	2500      	movs	r5, #0
 8003848:	42a5      	cmp	r5, r4
 800384a:	d109      	bne.n	8003860 <__libc_init_array+0x24>
 800384c:	4e0b      	ldr	r6, [pc, #44]	; (800387c <__libc_init_array+0x40>)
 800384e:	4c0c      	ldr	r4, [pc, #48]	; (8003880 <__libc_init_array+0x44>)
 8003850:	f000 fc28 	bl	80040a4 <_init>
 8003854:	1ba4      	subs	r4, r4, r6
 8003856:	10a4      	asrs	r4, r4, #2
 8003858:	2500      	movs	r5, #0
 800385a:	42a5      	cmp	r5, r4
 800385c:	d105      	bne.n	800386a <__libc_init_array+0x2e>
 800385e:	bd70      	pop	{r4, r5, r6, pc}
 8003860:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003864:	4798      	blx	r3
 8003866:	3501      	adds	r5, #1
 8003868:	e7ee      	b.n	8003848 <__libc_init_array+0xc>
 800386a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800386e:	4798      	blx	r3
 8003870:	3501      	adds	r5, #1
 8003872:	e7f2      	b.n	800385a <__libc_init_array+0x1e>
 8003874:	08004150 	.word	0x08004150
 8003878:	08004150 	.word	0x08004150
 800387c:	08004150 	.word	0x08004150
 8003880:	08004154 	.word	0x08004154

08003884 <memcpy>:
 8003884:	b510      	push	{r4, lr}
 8003886:	1e43      	subs	r3, r0, #1
 8003888:	440a      	add	r2, r1
 800388a:	4291      	cmp	r1, r2
 800388c:	d100      	bne.n	8003890 <memcpy+0xc>
 800388e:	bd10      	pop	{r4, pc}
 8003890:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003894:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003898:	e7f7      	b.n	800388a <memcpy+0x6>

0800389a <memset>:
 800389a:	4402      	add	r2, r0
 800389c:	4603      	mov	r3, r0
 800389e:	4293      	cmp	r3, r2
 80038a0:	d100      	bne.n	80038a4 <memset+0xa>
 80038a2:	4770      	bx	lr
 80038a4:	f803 1b01 	strb.w	r1, [r3], #1
 80038a8:	e7f9      	b.n	800389e <memset+0x4>
	...

080038ac <siprintf>:
 80038ac:	b40e      	push	{r1, r2, r3}
 80038ae:	b500      	push	{lr}
 80038b0:	b09c      	sub	sp, #112	; 0x70
 80038b2:	ab1d      	add	r3, sp, #116	; 0x74
 80038b4:	9002      	str	r0, [sp, #8]
 80038b6:	9006      	str	r0, [sp, #24]
 80038b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80038bc:	4809      	ldr	r0, [pc, #36]	; (80038e4 <siprintf+0x38>)
 80038be:	9107      	str	r1, [sp, #28]
 80038c0:	9104      	str	r1, [sp, #16]
 80038c2:	4909      	ldr	r1, [pc, #36]	; (80038e8 <siprintf+0x3c>)
 80038c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80038c8:	9105      	str	r1, [sp, #20]
 80038ca:	6800      	ldr	r0, [r0, #0]
 80038cc:	9301      	str	r3, [sp, #4]
 80038ce:	a902      	add	r1, sp, #8
 80038d0:	f000 f866 	bl	80039a0 <_svfiprintf_r>
 80038d4:	9b02      	ldr	r3, [sp, #8]
 80038d6:	2200      	movs	r2, #0
 80038d8:	701a      	strb	r2, [r3, #0]
 80038da:	b01c      	add	sp, #112	; 0x70
 80038dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80038e0:	b003      	add	sp, #12
 80038e2:	4770      	bx	lr
 80038e4:	20000010 	.word	0x20000010
 80038e8:	ffff0208 	.word	0xffff0208

080038ec <__ssputs_r>:
 80038ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038f0:	688e      	ldr	r6, [r1, #8]
 80038f2:	429e      	cmp	r6, r3
 80038f4:	4682      	mov	sl, r0
 80038f6:	460c      	mov	r4, r1
 80038f8:	4690      	mov	r8, r2
 80038fa:	4699      	mov	r9, r3
 80038fc:	d837      	bhi.n	800396e <__ssputs_r+0x82>
 80038fe:	898a      	ldrh	r2, [r1, #12]
 8003900:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003904:	d031      	beq.n	800396a <__ssputs_r+0x7e>
 8003906:	6825      	ldr	r5, [r4, #0]
 8003908:	6909      	ldr	r1, [r1, #16]
 800390a:	1a6f      	subs	r7, r5, r1
 800390c:	6965      	ldr	r5, [r4, #20]
 800390e:	2302      	movs	r3, #2
 8003910:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003914:	fb95 f5f3 	sdiv	r5, r5, r3
 8003918:	f109 0301 	add.w	r3, r9, #1
 800391c:	443b      	add	r3, r7
 800391e:	429d      	cmp	r5, r3
 8003920:	bf38      	it	cc
 8003922:	461d      	movcc	r5, r3
 8003924:	0553      	lsls	r3, r2, #21
 8003926:	d530      	bpl.n	800398a <__ssputs_r+0x9e>
 8003928:	4629      	mov	r1, r5
 800392a:	f000 fb21 	bl	8003f70 <_malloc_r>
 800392e:	4606      	mov	r6, r0
 8003930:	b950      	cbnz	r0, 8003948 <__ssputs_r+0x5c>
 8003932:	230c      	movs	r3, #12
 8003934:	f8ca 3000 	str.w	r3, [sl]
 8003938:	89a3      	ldrh	r3, [r4, #12]
 800393a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800393e:	81a3      	strh	r3, [r4, #12]
 8003940:	f04f 30ff 	mov.w	r0, #4294967295
 8003944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003948:	463a      	mov	r2, r7
 800394a:	6921      	ldr	r1, [r4, #16]
 800394c:	f7ff ff9a 	bl	8003884 <memcpy>
 8003950:	89a3      	ldrh	r3, [r4, #12]
 8003952:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800395a:	81a3      	strh	r3, [r4, #12]
 800395c:	6126      	str	r6, [r4, #16]
 800395e:	6165      	str	r5, [r4, #20]
 8003960:	443e      	add	r6, r7
 8003962:	1bed      	subs	r5, r5, r7
 8003964:	6026      	str	r6, [r4, #0]
 8003966:	60a5      	str	r5, [r4, #8]
 8003968:	464e      	mov	r6, r9
 800396a:	454e      	cmp	r6, r9
 800396c:	d900      	bls.n	8003970 <__ssputs_r+0x84>
 800396e:	464e      	mov	r6, r9
 8003970:	4632      	mov	r2, r6
 8003972:	4641      	mov	r1, r8
 8003974:	6820      	ldr	r0, [r4, #0]
 8003976:	f000 fa93 	bl	8003ea0 <memmove>
 800397a:	68a3      	ldr	r3, [r4, #8]
 800397c:	1b9b      	subs	r3, r3, r6
 800397e:	60a3      	str	r3, [r4, #8]
 8003980:	6823      	ldr	r3, [r4, #0]
 8003982:	441e      	add	r6, r3
 8003984:	6026      	str	r6, [r4, #0]
 8003986:	2000      	movs	r0, #0
 8003988:	e7dc      	b.n	8003944 <__ssputs_r+0x58>
 800398a:	462a      	mov	r2, r5
 800398c:	f000 fb4a 	bl	8004024 <_realloc_r>
 8003990:	4606      	mov	r6, r0
 8003992:	2800      	cmp	r0, #0
 8003994:	d1e2      	bne.n	800395c <__ssputs_r+0x70>
 8003996:	6921      	ldr	r1, [r4, #16]
 8003998:	4650      	mov	r0, sl
 800399a:	f000 fa9b 	bl	8003ed4 <_free_r>
 800399e:	e7c8      	b.n	8003932 <__ssputs_r+0x46>

080039a0 <_svfiprintf_r>:
 80039a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039a4:	461d      	mov	r5, r3
 80039a6:	898b      	ldrh	r3, [r1, #12]
 80039a8:	061f      	lsls	r7, r3, #24
 80039aa:	b09d      	sub	sp, #116	; 0x74
 80039ac:	4680      	mov	r8, r0
 80039ae:	460c      	mov	r4, r1
 80039b0:	4616      	mov	r6, r2
 80039b2:	d50f      	bpl.n	80039d4 <_svfiprintf_r+0x34>
 80039b4:	690b      	ldr	r3, [r1, #16]
 80039b6:	b96b      	cbnz	r3, 80039d4 <_svfiprintf_r+0x34>
 80039b8:	2140      	movs	r1, #64	; 0x40
 80039ba:	f000 fad9 	bl	8003f70 <_malloc_r>
 80039be:	6020      	str	r0, [r4, #0]
 80039c0:	6120      	str	r0, [r4, #16]
 80039c2:	b928      	cbnz	r0, 80039d0 <_svfiprintf_r+0x30>
 80039c4:	230c      	movs	r3, #12
 80039c6:	f8c8 3000 	str.w	r3, [r8]
 80039ca:	f04f 30ff 	mov.w	r0, #4294967295
 80039ce:	e0c8      	b.n	8003b62 <_svfiprintf_r+0x1c2>
 80039d0:	2340      	movs	r3, #64	; 0x40
 80039d2:	6163      	str	r3, [r4, #20]
 80039d4:	2300      	movs	r3, #0
 80039d6:	9309      	str	r3, [sp, #36]	; 0x24
 80039d8:	2320      	movs	r3, #32
 80039da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80039de:	2330      	movs	r3, #48	; 0x30
 80039e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80039e4:	9503      	str	r5, [sp, #12]
 80039e6:	f04f 0b01 	mov.w	fp, #1
 80039ea:	4637      	mov	r7, r6
 80039ec:	463d      	mov	r5, r7
 80039ee:	f815 3b01 	ldrb.w	r3, [r5], #1
 80039f2:	b10b      	cbz	r3, 80039f8 <_svfiprintf_r+0x58>
 80039f4:	2b25      	cmp	r3, #37	; 0x25
 80039f6:	d13e      	bne.n	8003a76 <_svfiprintf_r+0xd6>
 80039f8:	ebb7 0a06 	subs.w	sl, r7, r6
 80039fc:	d00b      	beq.n	8003a16 <_svfiprintf_r+0x76>
 80039fe:	4653      	mov	r3, sl
 8003a00:	4632      	mov	r2, r6
 8003a02:	4621      	mov	r1, r4
 8003a04:	4640      	mov	r0, r8
 8003a06:	f7ff ff71 	bl	80038ec <__ssputs_r>
 8003a0a:	3001      	adds	r0, #1
 8003a0c:	f000 80a4 	beq.w	8003b58 <_svfiprintf_r+0x1b8>
 8003a10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a12:	4453      	add	r3, sl
 8003a14:	9309      	str	r3, [sp, #36]	; 0x24
 8003a16:	783b      	ldrb	r3, [r7, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f000 809d 	beq.w	8003b58 <_svfiprintf_r+0x1b8>
 8003a1e:	2300      	movs	r3, #0
 8003a20:	f04f 32ff 	mov.w	r2, #4294967295
 8003a24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a28:	9304      	str	r3, [sp, #16]
 8003a2a:	9307      	str	r3, [sp, #28]
 8003a2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a30:	931a      	str	r3, [sp, #104]	; 0x68
 8003a32:	462f      	mov	r7, r5
 8003a34:	2205      	movs	r2, #5
 8003a36:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003a3a:	4850      	ldr	r0, [pc, #320]	; (8003b7c <_svfiprintf_r+0x1dc>)
 8003a3c:	f7fc fbd0 	bl	80001e0 <memchr>
 8003a40:	9b04      	ldr	r3, [sp, #16]
 8003a42:	b9d0      	cbnz	r0, 8003a7a <_svfiprintf_r+0xda>
 8003a44:	06d9      	lsls	r1, r3, #27
 8003a46:	bf44      	itt	mi
 8003a48:	2220      	movmi	r2, #32
 8003a4a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003a4e:	071a      	lsls	r2, r3, #28
 8003a50:	bf44      	itt	mi
 8003a52:	222b      	movmi	r2, #43	; 0x2b
 8003a54:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003a58:	782a      	ldrb	r2, [r5, #0]
 8003a5a:	2a2a      	cmp	r2, #42	; 0x2a
 8003a5c:	d015      	beq.n	8003a8a <_svfiprintf_r+0xea>
 8003a5e:	9a07      	ldr	r2, [sp, #28]
 8003a60:	462f      	mov	r7, r5
 8003a62:	2000      	movs	r0, #0
 8003a64:	250a      	movs	r5, #10
 8003a66:	4639      	mov	r1, r7
 8003a68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a6c:	3b30      	subs	r3, #48	; 0x30
 8003a6e:	2b09      	cmp	r3, #9
 8003a70:	d94d      	bls.n	8003b0e <_svfiprintf_r+0x16e>
 8003a72:	b1b8      	cbz	r0, 8003aa4 <_svfiprintf_r+0x104>
 8003a74:	e00f      	b.n	8003a96 <_svfiprintf_r+0xf6>
 8003a76:	462f      	mov	r7, r5
 8003a78:	e7b8      	b.n	80039ec <_svfiprintf_r+0x4c>
 8003a7a:	4a40      	ldr	r2, [pc, #256]	; (8003b7c <_svfiprintf_r+0x1dc>)
 8003a7c:	1a80      	subs	r0, r0, r2
 8003a7e:	fa0b f000 	lsl.w	r0, fp, r0
 8003a82:	4318      	orrs	r0, r3
 8003a84:	9004      	str	r0, [sp, #16]
 8003a86:	463d      	mov	r5, r7
 8003a88:	e7d3      	b.n	8003a32 <_svfiprintf_r+0x92>
 8003a8a:	9a03      	ldr	r2, [sp, #12]
 8003a8c:	1d11      	adds	r1, r2, #4
 8003a8e:	6812      	ldr	r2, [r2, #0]
 8003a90:	9103      	str	r1, [sp, #12]
 8003a92:	2a00      	cmp	r2, #0
 8003a94:	db01      	blt.n	8003a9a <_svfiprintf_r+0xfa>
 8003a96:	9207      	str	r2, [sp, #28]
 8003a98:	e004      	b.n	8003aa4 <_svfiprintf_r+0x104>
 8003a9a:	4252      	negs	r2, r2
 8003a9c:	f043 0302 	orr.w	r3, r3, #2
 8003aa0:	9207      	str	r2, [sp, #28]
 8003aa2:	9304      	str	r3, [sp, #16]
 8003aa4:	783b      	ldrb	r3, [r7, #0]
 8003aa6:	2b2e      	cmp	r3, #46	; 0x2e
 8003aa8:	d10c      	bne.n	8003ac4 <_svfiprintf_r+0x124>
 8003aaa:	787b      	ldrb	r3, [r7, #1]
 8003aac:	2b2a      	cmp	r3, #42	; 0x2a
 8003aae:	d133      	bne.n	8003b18 <_svfiprintf_r+0x178>
 8003ab0:	9b03      	ldr	r3, [sp, #12]
 8003ab2:	1d1a      	adds	r2, r3, #4
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	9203      	str	r2, [sp, #12]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	bfb8      	it	lt
 8003abc:	f04f 33ff 	movlt.w	r3, #4294967295
 8003ac0:	3702      	adds	r7, #2
 8003ac2:	9305      	str	r3, [sp, #20]
 8003ac4:	4d2e      	ldr	r5, [pc, #184]	; (8003b80 <_svfiprintf_r+0x1e0>)
 8003ac6:	7839      	ldrb	r1, [r7, #0]
 8003ac8:	2203      	movs	r2, #3
 8003aca:	4628      	mov	r0, r5
 8003acc:	f7fc fb88 	bl	80001e0 <memchr>
 8003ad0:	b138      	cbz	r0, 8003ae2 <_svfiprintf_r+0x142>
 8003ad2:	2340      	movs	r3, #64	; 0x40
 8003ad4:	1b40      	subs	r0, r0, r5
 8003ad6:	fa03 f000 	lsl.w	r0, r3, r0
 8003ada:	9b04      	ldr	r3, [sp, #16]
 8003adc:	4303      	orrs	r3, r0
 8003ade:	3701      	adds	r7, #1
 8003ae0:	9304      	str	r3, [sp, #16]
 8003ae2:	7839      	ldrb	r1, [r7, #0]
 8003ae4:	4827      	ldr	r0, [pc, #156]	; (8003b84 <_svfiprintf_r+0x1e4>)
 8003ae6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003aea:	2206      	movs	r2, #6
 8003aec:	1c7e      	adds	r6, r7, #1
 8003aee:	f7fc fb77 	bl	80001e0 <memchr>
 8003af2:	2800      	cmp	r0, #0
 8003af4:	d038      	beq.n	8003b68 <_svfiprintf_r+0x1c8>
 8003af6:	4b24      	ldr	r3, [pc, #144]	; (8003b88 <_svfiprintf_r+0x1e8>)
 8003af8:	bb13      	cbnz	r3, 8003b40 <_svfiprintf_r+0x1a0>
 8003afa:	9b03      	ldr	r3, [sp, #12]
 8003afc:	3307      	adds	r3, #7
 8003afe:	f023 0307 	bic.w	r3, r3, #7
 8003b02:	3308      	adds	r3, #8
 8003b04:	9303      	str	r3, [sp, #12]
 8003b06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b08:	444b      	add	r3, r9
 8003b0a:	9309      	str	r3, [sp, #36]	; 0x24
 8003b0c:	e76d      	b.n	80039ea <_svfiprintf_r+0x4a>
 8003b0e:	fb05 3202 	mla	r2, r5, r2, r3
 8003b12:	2001      	movs	r0, #1
 8003b14:	460f      	mov	r7, r1
 8003b16:	e7a6      	b.n	8003a66 <_svfiprintf_r+0xc6>
 8003b18:	2300      	movs	r3, #0
 8003b1a:	3701      	adds	r7, #1
 8003b1c:	9305      	str	r3, [sp, #20]
 8003b1e:	4619      	mov	r1, r3
 8003b20:	250a      	movs	r5, #10
 8003b22:	4638      	mov	r0, r7
 8003b24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b28:	3a30      	subs	r2, #48	; 0x30
 8003b2a:	2a09      	cmp	r2, #9
 8003b2c:	d903      	bls.n	8003b36 <_svfiprintf_r+0x196>
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d0c8      	beq.n	8003ac4 <_svfiprintf_r+0x124>
 8003b32:	9105      	str	r1, [sp, #20]
 8003b34:	e7c6      	b.n	8003ac4 <_svfiprintf_r+0x124>
 8003b36:	fb05 2101 	mla	r1, r5, r1, r2
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	4607      	mov	r7, r0
 8003b3e:	e7f0      	b.n	8003b22 <_svfiprintf_r+0x182>
 8003b40:	ab03      	add	r3, sp, #12
 8003b42:	9300      	str	r3, [sp, #0]
 8003b44:	4622      	mov	r2, r4
 8003b46:	4b11      	ldr	r3, [pc, #68]	; (8003b8c <_svfiprintf_r+0x1ec>)
 8003b48:	a904      	add	r1, sp, #16
 8003b4a:	4640      	mov	r0, r8
 8003b4c:	f3af 8000 	nop.w
 8003b50:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003b54:	4681      	mov	r9, r0
 8003b56:	d1d6      	bne.n	8003b06 <_svfiprintf_r+0x166>
 8003b58:	89a3      	ldrh	r3, [r4, #12]
 8003b5a:	065b      	lsls	r3, r3, #25
 8003b5c:	f53f af35 	bmi.w	80039ca <_svfiprintf_r+0x2a>
 8003b60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b62:	b01d      	add	sp, #116	; 0x74
 8003b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b68:	ab03      	add	r3, sp, #12
 8003b6a:	9300      	str	r3, [sp, #0]
 8003b6c:	4622      	mov	r2, r4
 8003b6e:	4b07      	ldr	r3, [pc, #28]	; (8003b8c <_svfiprintf_r+0x1ec>)
 8003b70:	a904      	add	r1, sp, #16
 8003b72:	4640      	mov	r0, r8
 8003b74:	f000 f882 	bl	8003c7c <_printf_i>
 8003b78:	e7ea      	b.n	8003b50 <_svfiprintf_r+0x1b0>
 8003b7a:	bf00      	nop
 8003b7c:	08004114 	.word	0x08004114
 8003b80:	0800411a 	.word	0x0800411a
 8003b84:	0800411e 	.word	0x0800411e
 8003b88:	00000000 	.word	0x00000000
 8003b8c:	080038ed 	.word	0x080038ed

08003b90 <_printf_common>:
 8003b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b94:	4691      	mov	r9, r2
 8003b96:	461f      	mov	r7, r3
 8003b98:	688a      	ldr	r2, [r1, #8]
 8003b9a:	690b      	ldr	r3, [r1, #16]
 8003b9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	bfb8      	it	lt
 8003ba4:	4613      	movlt	r3, r2
 8003ba6:	f8c9 3000 	str.w	r3, [r9]
 8003baa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003bae:	4606      	mov	r6, r0
 8003bb0:	460c      	mov	r4, r1
 8003bb2:	b112      	cbz	r2, 8003bba <_printf_common+0x2a>
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	f8c9 3000 	str.w	r3, [r9]
 8003bba:	6823      	ldr	r3, [r4, #0]
 8003bbc:	0699      	lsls	r1, r3, #26
 8003bbe:	bf42      	ittt	mi
 8003bc0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003bc4:	3302      	addmi	r3, #2
 8003bc6:	f8c9 3000 	strmi.w	r3, [r9]
 8003bca:	6825      	ldr	r5, [r4, #0]
 8003bcc:	f015 0506 	ands.w	r5, r5, #6
 8003bd0:	d107      	bne.n	8003be2 <_printf_common+0x52>
 8003bd2:	f104 0a19 	add.w	sl, r4, #25
 8003bd6:	68e3      	ldr	r3, [r4, #12]
 8003bd8:	f8d9 2000 	ldr.w	r2, [r9]
 8003bdc:	1a9b      	subs	r3, r3, r2
 8003bde:	42ab      	cmp	r3, r5
 8003be0:	dc28      	bgt.n	8003c34 <_printf_common+0xa4>
 8003be2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003be6:	6822      	ldr	r2, [r4, #0]
 8003be8:	3300      	adds	r3, #0
 8003bea:	bf18      	it	ne
 8003bec:	2301      	movne	r3, #1
 8003bee:	0692      	lsls	r2, r2, #26
 8003bf0:	d42d      	bmi.n	8003c4e <_printf_common+0xbe>
 8003bf2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003bf6:	4639      	mov	r1, r7
 8003bf8:	4630      	mov	r0, r6
 8003bfa:	47c0      	blx	r8
 8003bfc:	3001      	adds	r0, #1
 8003bfe:	d020      	beq.n	8003c42 <_printf_common+0xb2>
 8003c00:	6823      	ldr	r3, [r4, #0]
 8003c02:	68e5      	ldr	r5, [r4, #12]
 8003c04:	f8d9 2000 	ldr.w	r2, [r9]
 8003c08:	f003 0306 	and.w	r3, r3, #6
 8003c0c:	2b04      	cmp	r3, #4
 8003c0e:	bf08      	it	eq
 8003c10:	1aad      	subeq	r5, r5, r2
 8003c12:	68a3      	ldr	r3, [r4, #8]
 8003c14:	6922      	ldr	r2, [r4, #16]
 8003c16:	bf0c      	ite	eq
 8003c18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c1c:	2500      	movne	r5, #0
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	bfc4      	itt	gt
 8003c22:	1a9b      	subgt	r3, r3, r2
 8003c24:	18ed      	addgt	r5, r5, r3
 8003c26:	f04f 0900 	mov.w	r9, #0
 8003c2a:	341a      	adds	r4, #26
 8003c2c:	454d      	cmp	r5, r9
 8003c2e:	d11a      	bne.n	8003c66 <_printf_common+0xd6>
 8003c30:	2000      	movs	r0, #0
 8003c32:	e008      	b.n	8003c46 <_printf_common+0xb6>
 8003c34:	2301      	movs	r3, #1
 8003c36:	4652      	mov	r2, sl
 8003c38:	4639      	mov	r1, r7
 8003c3a:	4630      	mov	r0, r6
 8003c3c:	47c0      	blx	r8
 8003c3e:	3001      	adds	r0, #1
 8003c40:	d103      	bne.n	8003c4a <_printf_common+0xba>
 8003c42:	f04f 30ff 	mov.w	r0, #4294967295
 8003c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c4a:	3501      	adds	r5, #1
 8003c4c:	e7c3      	b.n	8003bd6 <_printf_common+0x46>
 8003c4e:	18e1      	adds	r1, r4, r3
 8003c50:	1c5a      	adds	r2, r3, #1
 8003c52:	2030      	movs	r0, #48	; 0x30
 8003c54:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c58:	4422      	add	r2, r4
 8003c5a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c5e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c62:	3302      	adds	r3, #2
 8003c64:	e7c5      	b.n	8003bf2 <_printf_common+0x62>
 8003c66:	2301      	movs	r3, #1
 8003c68:	4622      	mov	r2, r4
 8003c6a:	4639      	mov	r1, r7
 8003c6c:	4630      	mov	r0, r6
 8003c6e:	47c0      	blx	r8
 8003c70:	3001      	adds	r0, #1
 8003c72:	d0e6      	beq.n	8003c42 <_printf_common+0xb2>
 8003c74:	f109 0901 	add.w	r9, r9, #1
 8003c78:	e7d8      	b.n	8003c2c <_printf_common+0x9c>
	...

08003c7c <_printf_i>:
 8003c7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003c80:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003c84:	460c      	mov	r4, r1
 8003c86:	7e09      	ldrb	r1, [r1, #24]
 8003c88:	b085      	sub	sp, #20
 8003c8a:	296e      	cmp	r1, #110	; 0x6e
 8003c8c:	4617      	mov	r7, r2
 8003c8e:	4606      	mov	r6, r0
 8003c90:	4698      	mov	r8, r3
 8003c92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003c94:	f000 80b3 	beq.w	8003dfe <_printf_i+0x182>
 8003c98:	d822      	bhi.n	8003ce0 <_printf_i+0x64>
 8003c9a:	2963      	cmp	r1, #99	; 0x63
 8003c9c:	d036      	beq.n	8003d0c <_printf_i+0x90>
 8003c9e:	d80a      	bhi.n	8003cb6 <_printf_i+0x3a>
 8003ca0:	2900      	cmp	r1, #0
 8003ca2:	f000 80b9 	beq.w	8003e18 <_printf_i+0x19c>
 8003ca6:	2958      	cmp	r1, #88	; 0x58
 8003ca8:	f000 8083 	beq.w	8003db2 <_printf_i+0x136>
 8003cac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003cb0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003cb4:	e032      	b.n	8003d1c <_printf_i+0xa0>
 8003cb6:	2964      	cmp	r1, #100	; 0x64
 8003cb8:	d001      	beq.n	8003cbe <_printf_i+0x42>
 8003cba:	2969      	cmp	r1, #105	; 0x69
 8003cbc:	d1f6      	bne.n	8003cac <_printf_i+0x30>
 8003cbe:	6820      	ldr	r0, [r4, #0]
 8003cc0:	6813      	ldr	r3, [r2, #0]
 8003cc2:	0605      	lsls	r5, r0, #24
 8003cc4:	f103 0104 	add.w	r1, r3, #4
 8003cc8:	d52a      	bpl.n	8003d20 <_printf_i+0xa4>
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	6011      	str	r1, [r2, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	da03      	bge.n	8003cda <_printf_i+0x5e>
 8003cd2:	222d      	movs	r2, #45	; 0x2d
 8003cd4:	425b      	negs	r3, r3
 8003cd6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003cda:	486f      	ldr	r0, [pc, #444]	; (8003e98 <_printf_i+0x21c>)
 8003cdc:	220a      	movs	r2, #10
 8003cde:	e039      	b.n	8003d54 <_printf_i+0xd8>
 8003ce0:	2973      	cmp	r1, #115	; 0x73
 8003ce2:	f000 809d 	beq.w	8003e20 <_printf_i+0x1a4>
 8003ce6:	d808      	bhi.n	8003cfa <_printf_i+0x7e>
 8003ce8:	296f      	cmp	r1, #111	; 0x6f
 8003cea:	d020      	beq.n	8003d2e <_printf_i+0xb2>
 8003cec:	2970      	cmp	r1, #112	; 0x70
 8003cee:	d1dd      	bne.n	8003cac <_printf_i+0x30>
 8003cf0:	6823      	ldr	r3, [r4, #0]
 8003cf2:	f043 0320 	orr.w	r3, r3, #32
 8003cf6:	6023      	str	r3, [r4, #0]
 8003cf8:	e003      	b.n	8003d02 <_printf_i+0x86>
 8003cfa:	2975      	cmp	r1, #117	; 0x75
 8003cfc:	d017      	beq.n	8003d2e <_printf_i+0xb2>
 8003cfe:	2978      	cmp	r1, #120	; 0x78
 8003d00:	d1d4      	bne.n	8003cac <_printf_i+0x30>
 8003d02:	2378      	movs	r3, #120	; 0x78
 8003d04:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d08:	4864      	ldr	r0, [pc, #400]	; (8003e9c <_printf_i+0x220>)
 8003d0a:	e055      	b.n	8003db8 <_printf_i+0x13c>
 8003d0c:	6813      	ldr	r3, [r2, #0]
 8003d0e:	1d19      	adds	r1, r3, #4
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	6011      	str	r1, [r2, #0]
 8003d14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e08c      	b.n	8003e3a <_printf_i+0x1be>
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	6011      	str	r1, [r2, #0]
 8003d24:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003d28:	bf18      	it	ne
 8003d2a:	b21b      	sxthne	r3, r3
 8003d2c:	e7cf      	b.n	8003cce <_printf_i+0x52>
 8003d2e:	6813      	ldr	r3, [r2, #0]
 8003d30:	6825      	ldr	r5, [r4, #0]
 8003d32:	1d18      	adds	r0, r3, #4
 8003d34:	6010      	str	r0, [r2, #0]
 8003d36:	0628      	lsls	r0, r5, #24
 8003d38:	d501      	bpl.n	8003d3e <_printf_i+0xc2>
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	e002      	b.n	8003d44 <_printf_i+0xc8>
 8003d3e:	0668      	lsls	r0, r5, #25
 8003d40:	d5fb      	bpl.n	8003d3a <_printf_i+0xbe>
 8003d42:	881b      	ldrh	r3, [r3, #0]
 8003d44:	4854      	ldr	r0, [pc, #336]	; (8003e98 <_printf_i+0x21c>)
 8003d46:	296f      	cmp	r1, #111	; 0x6f
 8003d48:	bf14      	ite	ne
 8003d4a:	220a      	movne	r2, #10
 8003d4c:	2208      	moveq	r2, #8
 8003d4e:	2100      	movs	r1, #0
 8003d50:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d54:	6865      	ldr	r5, [r4, #4]
 8003d56:	60a5      	str	r5, [r4, #8]
 8003d58:	2d00      	cmp	r5, #0
 8003d5a:	f2c0 8095 	blt.w	8003e88 <_printf_i+0x20c>
 8003d5e:	6821      	ldr	r1, [r4, #0]
 8003d60:	f021 0104 	bic.w	r1, r1, #4
 8003d64:	6021      	str	r1, [r4, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d13d      	bne.n	8003de6 <_printf_i+0x16a>
 8003d6a:	2d00      	cmp	r5, #0
 8003d6c:	f040 808e 	bne.w	8003e8c <_printf_i+0x210>
 8003d70:	4665      	mov	r5, ip
 8003d72:	2a08      	cmp	r2, #8
 8003d74:	d10b      	bne.n	8003d8e <_printf_i+0x112>
 8003d76:	6823      	ldr	r3, [r4, #0]
 8003d78:	07db      	lsls	r3, r3, #31
 8003d7a:	d508      	bpl.n	8003d8e <_printf_i+0x112>
 8003d7c:	6923      	ldr	r3, [r4, #16]
 8003d7e:	6862      	ldr	r2, [r4, #4]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	bfde      	ittt	le
 8003d84:	2330      	movle	r3, #48	; 0x30
 8003d86:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d8a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003d8e:	ebac 0305 	sub.w	r3, ip, r5
 8003d92:	6123      	str	r3, [r4, #16]
 8003d94:	f8cd 8000 	str.w	r8, [sp]
 8003d98:	463b      	mov	r3, r7
 8003d9a:	aa03      	add	r2, sp, #12
 8003d9c:	4621      	mov	r1, r4
 8003d9e:	4630      	mov	r0, r6
 8003da0:	f7ff fef6 	bl	8003b90 <_printf_common>
 8003da4:	3001      	adds	r0, #1
 8003da6:	d14d      	bne.n	8003e44 <_printf_i+0x1c8>
 8003da8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dac:	b005      	add	sp, #20
 8003dae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003db2:	4839      	ldr	r0, [pc, #228]	; (8003e98 <_printf_i+0x21c>)
 8003db4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003db8:	6813      	ldr	r3, [r2, #0]
 8003dba:	6821      	ldr	r1, [r4, #0]
 8003dbc:	1d1d      	adds	r5, r3, #4
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6015      	str	r5, [r2, #0]
 8003dc2:	060a      	lsls	r2, r1, #24
 8003dc4:	d50b      	bpl.n	8003dde <_printf_i+0x162>
 8003dc6:	07ca      	lsls	r2, r1, #31
 8003dc8:	bf44      	itt	mi
 8003dca:	f041 0120 	orrmi.w	r1, r1, #32
 8003dce:	6021      	strmi	r1, [r4, #0]
 8003dd0:	b91b      	cbnz	r3, 8003dda <_printf_i+0x15e>
 8003dd2:	6822      	ldr	r2, [r4, #0]
 8003dd4:	f022 0220 	bic.w	r2, r2, #32
 8003dd8:	6022      	str	r2, [r4, #0]
 8003dda:	2210      	movs	r2, #16
 8003ddc:	e7b7      	b.n	8003d4e <_printf_i+0xd2>
 8003dde:	064d      	lsls	r5, r1, #25
 8003de0:	bf48      	it	mi
 8003de2:	b29b      	uxthmi	r3, r3
 8003de4:	e7ef      	b.n	8003dc6 <_printf_i+0x14a>
 8003de6:	4665      	mov	r5, ip
 8003de8:	fbb3 f1f2 	udiv	r1, r3, r2
 8003dec:	fb02 3311 	mls	r3, r2, r1, r3
 8003df0:	5cc3      	ldrb	r3, [r0, r3]
 8003df2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003df6:	460b      	mov	r3, r1
 8003df8:	2900      	cmp	r1, #0
 8003dfa:	d1f5      	bne.n	8003de8 <_printf_i+0x16c>
 8003dfc:	e7b9      	b.n	8003d72 <_printf_i+0xf6>
 8003dfe:	6813      	ldr	r3, [r2, #0]
 8003e00:	6825      	ldr	r5, [r4, #0]
 8003e02:	6961      	ldr	r1, [r4, #20]
 8003e04:	1d18      	adds	r0, r3, #4
 8003e06:	6010      	str	r0, [r2, #0]
 8003e08:	0628      	lsls	r0, r5, #24
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	d501      	bpl.n	8003e12 <_printf_i+0x196>
 8003e0e:	6019      	str	r1, [r3, #0]
 8003e10:	e002      	b.n	8003e18 <_printf_i+0x19c>
 8003e12:	066a      	lsls	r2, r5, #25
 8003e14:	d5fb      	bpl.n	8003e0e <_printf_i+0x192>
 8003e16:	8019      	strh	r1, [r3, #0]
 8003e18:	2300      	movs	r3, #0
 8003e1a:	6123      	str	r3, [r4, #16]
 8003e1c:	4665      	mov	r5, ip
 8003e1e:	e7b9      	b.n	8003d94 <_printf_i+0x118>
 8003e20:	6813      	ldr	r3, [r2, #0]
 8003e22:	1d19      	adds	r1, r3, #4
 8003e24:	6011      	str	r1, [r2, #0]
 8003e26:	681d      	ldr	r5, [r3, #0]
 8003e28:	6862      	ldr	r2, [r4, #4]
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	4628      	mov	r0, r5
 8003e2e:	f7fc f9d7 	bl	80001e0 <memchr>
 8003e32:	b108      	cbz	r0, 8003e38 <_printf_i+0x1bc>
 8003e34:	1b40      	subs	r0, r0, r5
 8003e36:	6060      	str	r0, [r4, #4]
 8003e38:	6863      	ldr	r3, [r4, #4]
 8003e3a:	6123      	str	r3, [r4, #16]
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e42:	e7a7      	b.n	8003d94 <_printf_i+0x118>
 8003e44:	6923      	ldr	r3, [r4, #16]
 8003e46:	462a      	mov	r2, r5
 8003e48:	4639      	mov	r1, r7
 8003e4a:	4630      	mov	r0, r6
 8003e4c:	47c0      	blx	r8
 8003e4e:	3001      	adds	r0, #1
 8003e50:	d0aa      	beq.n	8003da8 <_printf_i+0x12c>
 8003e52:	6823      	ldr	r3, [r4, #0]
 8003e54:	079b      	lsls	r3, r3, #30
 8003e56:	d413      	bmi.n	8003e80 <_printf_i+0x204>
 8003e58:	68e0      	ldr	r0, [r4, #12]
 8003e5a:	9b03      	ldr	r3, [sp, #12]
 8003e5c:	4298      	cmp	r0, r3
 8003e5e:	bfb8      	it	lt
 8003e60:	4618      	movlt	r0, r3
 8003e62:	e7a3      	b.n	8003dac <_printf_i+0x130>
 8003e64:	2301      	movs	r3, #1
 8003e66:	464a      	mov	r2, r9
 8003e68:	4639      	mov	r1, r7
 8003e6a:	4630      	mov	r0, r6
 8003e6c:	47c0      	blx	r8
 8003e6e:	3001      	adds	r0, #1
 8003e70:	d09a      	beq.n	8003da8 <_printf_i+0x12c>
 8003e72:	3501      	adds	r5, #1
 8003e74:	68e3      	ldr	r3, [r4, #12]
 8003e76:	9a03      	ldr	r2, [sp, #12]
 8003e78:	1a9b      	subs	r3, r3, r2
 8003e7a:	42ab      	cmp	r3, r5
 8003e7c:	dcf2      	bgt.n	8003e64 <_printf_i+0x1e8>
 8003e7e:	e7eb      	b.n	8003e58 <_printf_i+0x1dc>
 8003e80:	2500      	movs	r5, #0
 8003e82:	f104 0919 	add.w	r9, r4, #25
 8003e86:	e7f5      	b.n	8003e74 <_printf_i+0x1f8>
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1ac      	bne.n	8003de6 <_printf_i+0x16a>
 8003e8c:	7803      	ldrb	r3, [r0, #0]
 8003e8e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e92:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e96:	e76c      	b.n	8003d72 <_printf_i+0xf6>
 8003e98:	08004125 	.word	0x08004125
 8003e9c:	08004136 	.word	0x08004136

08003ea0 <memmove>:
 8003ea0:	4288      	cmp	r0, r1
 8003ea2:	b510      	push	{r4, lr}
 8003ea4:	eb01 0302 	add.w	r3, r1, r2
 8003ea8:	d807      	bhi.n	8003eba <memmove+0x1a>
 8003eaa:	1e42      	subs	r2, r0, #1
 8003eac:	4299      	cmp	r1, r3
 8003eae:	d00a      	beq.n	8003ec6 <memmove+0x26>
 8003eb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003eb4:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003eb8:	e7f8      	b.n	8003eac <memmove+0xc>
 8003eba:	4283      	cmp	r3, r0
 8003ebc:	d9f5      	bls.n	8003eaa <memmove+0xa>
 8003ebe:	1881      	adds	r1, r0, r2
 8003ec0:	1ad2      	subs	r2, r2, r3
 8003ec2:	42d3      	cmn	r3, r2
 8003ec4:	d100      	bne.n	8003ec8 <memmove+0x28>
 8003ec6:	bd10      	pop	{r4, pc}
 8003ec8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003ecc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003ed0:	e7f7      	b.n	8003ec2 <memmove+0x22>
	...

08003ed4 <_free_r>:
 8003ed4:	b538      	push	{r3, r4, r5, lr}
 8003ed6:	4605      	mov	r5, r0
 8003ed8:	2900      	cmp	r1, #0
 8003eda:	d045      	beq.n	8003f68 <_free_r+0x94>
 8003edc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ee0:	1f0c      	subs	r4, r1, #4
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	bfb8      	it	lt
 8003ee6:	18e4      	addlt	r4, r4, r3
 8003ee8:	f000 f8d2 	bl	8004090 <__malloc_lock>
 8003eec:	4a1f      	ldr	r2, [pc, #124]	; (8003f6c <_free_r+0x98>)
 8003eee:	6813      	ldr	r3, [r2, #0]
 8003ef0:	4610      	mov	r0, r2
 8003ef2:	b933      	cbnz	r3, 8003f02 <_free_r+0x2e>
 8003ef4:	6063      	str	r3, [r4, #4]
 8003ef6:	6014      	str	r4, [r2, #0]
 8003ef8:	4628      	mov	r0, r5
 8003efa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003efe:	f000 b8c8 	b.w	8004092 <__malloc_unlock>
 8003f02:	42a3      	cmp	r3, r4
 8003f04:	d90c      	bls.n	8003f20 <_free_r+0x4c>
 8003f06:	6821      	ldr	r1, [r4, #0]
 8003f08:	1862      	adds	r2, r4, r1
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	bf04      	itt	eq
 8003f0e:	681a      	ldreq	r2, [r3, #0]
 8003f10:	685b      	ldreq	r3, [r3, #4]
 8003f12:	6063      	str	r3, [r4, #4]
 8003f14:	bf04      	itt	eq
 8003f16:	1852      	addeq	r2, r2, r1
 8003f18:	6022      	streq	r2, [r4, #0]
 8003f1a:	6004      	str	r4, [r0, #0]
 8003f1c:	e7ec      	b.n	8003ef8 <_free_r+0x24>
 8003f1e:	4613      	mov	r3, r2
 8003f20:	685a      	ldr	r2, [r3, #4]
 8003f22:	b10a      	cbz	r2, 8003f28 <_free_r+0x54>
 8003f24:	42a2      	cmp	r2, r4
 8003f26:	d9fa      	bls.n	8003f1e <_free_r+0x4a>
 8003f28:	6819      	ldr	r1, [r3, #0]
 8003f2a:	1858      	adds	r0, r3, r1
 8003f2c:	42a0      	cmp	r0, r4
 8003f2e:	d10b      	bne.n	8003f48 <_free_r+0x74>
 8003f30:	6820      	ldr	r0, [r4, #0]
 8003f32:	4401      	add	r1, r0
 8003f34:	1858      	adds	r0, r3, r1
 8003f36:	4282      	cmp	r2, r0
 8003f38:	6019      	str	r1, [r3, #0]
 8003f3a:	d1dd      	bne.n	8003ef8 <_free_r+0x24>
 8003f3c:	6810      	ldr	r0, [r2, #0]
 8003f3e:	6852      	ldr	r2, [r2, #4]
 8003f40:	605a      	str	r2, [r3, #4]
 8003f42:	4401      	add	r1, r0
 8003f44:	6019      	str	r1, [r3, #0]
 8003f46:	e7d7      	b.n	8003ef8 <_free_r+0x24>
 8003f48:	d902      	bls.n	8003f50 <_free_r+0x7c>
 8003f4a:	230c      	movs	r3, #12
 8003f4c:	602b      	str	r3, [r5, #0]
 8003f4e:	e7d3      	b.n	8003ef8 <_free_r+0x24>
 8003f50:	6820      	ldr	r0, [r4, #0]
 8003f52:	1821      	adds	r1, r4, r0
 8003f54:	428a      	cmp	r2, r1
 8003f56:	bf04      	itt	eq
 8003f58:	6811      	ldreq	r1, [r2, #0]
 8003f5a:	6852      	ldreq	r2, [r2, #4]
 8003f5c:	6062      	str	r2, [r4, #4]
 8003f5e:	bf04      	itt	eq
 8003f60:	1809      	addeq	r1, r1, r0
 8003f62:	6021      	streq	r1, [r4, #0]
 8003f64:	605c      	str	r4, [r3, #4]
 8003f66:	e7c7      	b.n	8003ef8 <_free_r+0x24>
 8003f68:	bd38      	pop	{r3, r4, r5, pc}
 8003f6a:	bf00      	nop
 8003f6c:	20004138 	.word	0x20004138

08003f70 <_malloc_r>:
 8003f70:	b570      	push	{r4, r5, r6, lr}
 8003f72:	1ccd      	adds	r5, r1, #3
 8003f74:	f025 0503 	bic.w	r5, r5, #3
 8003f78:	3508      	adds	r5, #8
 8003f7a:	2d0c      	cmp	r5, #12
 8003f7c:	bf38      	it	cc
 8003f7e:	250c      	movcc	r5, #12
 8003f80:	2d00      	cmp	r5, #0
 8003f82:	4606      	mov	r6, r0
 8003f84:	db01      	blt.n	8003f8a <_malloc_r+0x1a>
 8003f86:	42a9      	cmp	r1, r5
 8003f88:	d903      	bls.n	8003f92 <_malloc_r+0x22>
 8003f8a:	230c      	movs	r3, #12
 8003f8c:	6033      	str	r3, [r6, #0]
 8003f8e:	2000      	movs	r0, #0
 8003f90:	bd70      	pop	{r4, r5, r6, pc}
 8003f92:	f000 f87d 	bl	8004090 <__malloc_lock>
 8003f96:	4a21      	ldr	r2, [pc, #132]	; (800401c <_malloc_r+0xac>)
 8003f98:	6814      	ldr	r4, [r2, #0]
 8003f9a:	4621      	mov	r1, r4
 8003f9c:	b991      	cbnz	r1, 8003fc4 <_malloc_r+0x54>
 8003f9e:	4c20      	ldr	r4, [pc, #128]	; (8004020 <_malloc_r+0xb0>)
 8003fa0:	6823      	ldr	r3, [r4, #0]
 8003fa2:	b91b      	cbnz	r3, 8003fac <_malloc_r+0x3c>
 8003fa4:	4630      	mov	r0, r6
 8003fa6:	f000 f863 	bl	8004070 <_sbrk_r>
 8003faa:	6020      	str	r0, [r4, #0]
 8003fac:	4629      	mov	r1, r5
 8003fae:	4630      	mov	r0, r6
 8003fb0:	f000 f85e 	bl	8004070 <_sbrk_r>
 8003fb4:	1c43      	adds	r3, r0, #1
 8003fb6:	d124      	bne.n	8004002 <_malloc_r+0x92>
 8003fb8:	230c      	movs	r3, #12
 8003fba:	6033      	str	r3, [r6, #0]
 8003fbc:	4630      	mov	r0, r6
 8003fbe:	f000 f868 	bl	8004092 <__malloc_unlock>
 8003fc2:	e7e4      	b.n	8003f8e <_malloc_r+0x1e>
 8003fc4:	680b      	ldr	r3, [r1, #0]
 8003fc6:	1b5b      	subs	r3, r3, r5
 8003fc8:	d418      	bmi.n	8003ffc <_malloc_r+0x8c>
 8003fca:	2b0b      	cmp	r3, #11
 8003fcc:	d90f      	bls.n	8003fee <_malloc_r+0x7e>
 8003fce:	600b      	str	r3, [r1, #0]
 8003fd0:	50cd      	str	r5, [r1, r3]
 8003fd2:	18cc      	adds	r4, r1, r3
 8003fd4:	4630      	mov	r0, r6
 8003fd6:	f000 f85c 	bl	8004092 <__malloc_unlock>
 8003fda:	f104 000b 	add.w	r0, r4, #11
 8003fde:	1d23      	adds	r3, r4, #4
 8003fe0:	f020 0007 	bic.w	r0, r0, #7
 8003fe4:	1ac3      	subs	r3, r0, r3
 8003fe6:	d0d3      	beq.n	8003f90 <_malloc_r+0x20>
 8003fe8:	425a      	negs	r2, r3
 8003fea:	50e2      	str	r2, [r4, r3]
 8003fec:	e7d0      	b.n	8003f90 <_malloc_r+0x20>
 8003fee:	428c      	cmp	r4, r1
 8003ff0:	684b      	ldr	r3, [r1, #4]
 8003ff2:	bf16      	itet	ne
 8003ff4:	6063      	strne	r3, [r4, #4]
 8003ff6:	6013      	streq	r3, [r2, #0]
 8003ff8:	460c      	movne	r4, r1
 8003ffa:	e7eb      	b.n	8003fd4 <_malloc_r+0x64>
 8003ffc:	460c      	mov	r4, r1
 8003ffe:	6849      	ldr	r1, [r1, #4]
 8004000:	e7cc      	b.n	8003f9c <_malloc_r+0x2c>
 8004002:	1cc4      	adds	r4, r0, #3
 8004004:	f024 0403 	bic.w	r4, r4, #3
 8004008:	42a0      	cmp	r0, r4
 800400a:	d005      	beq.n	8004018 <_malloc_r+0xa8>
 800400c:	1a21      	subs	r1, r4, r0
 800400e:	4630      	mov	r0, r6
 8004010:	f000 f82e 	bl	8004070 <_sbrk_r>
 8004014:	3001      	adds	r0, #1
 8004016:	d0cf      	beq.n	8003fb8 <_malloc_r+0x48>
 8004018:	6025      	str	r5, [r4, #0]
 800401a:	e7db      	b.n	8003fd4 <_malloc_r+0x64>
 800401c:	20004138 	.word	0x20004138
 8004020:	2000413c 	.word	0x2000413c

08004024 <_realloc_r>:
 8004024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004026:	4607      	mov	r7, r0
 8004028:	4614      	mov	r4, r2
 800402a:	460e      	mov	r6, r1
 800402c:	b921      	cbnz	r1, 8004038 <_realloc_r+0x14>
 800402e:	4611      	mov	r1, r2
 8004030:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004034:	f7ff bf9c 	b.w	8003f70 <_malloc_r>
 8004038:	b922      	cbnz	r2, 8004044 <_realloc_r+0x20>
 800403a:	f7ff ff4b 	bl	8003ed4 <_free_r>
 800403e:	4625      	mov	r5, r4
 8004040:	4628      	mov	r0, r5
 8004042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004044:	f000 f826 	bl	8004094 <_malloc_usable_size_r>
 8004048:	42a0      	cmp	r0, r4
 800404a:	d20f      	bcs.n	800406c <_realloc_r+0x48>
 800404c:	4621      	mov	r1, r4
 800404e:	4638      	mov	r0, r7
 8004050:	f7ff ff8e 	bl	8003f70 <_malloc_r>
 8004054:	4605      	mov	r5, r0
 8004056:	2800      	cmp	r0, #0
 8004058:	d0f2      	beq.n	8004040 <_realloc_r+0x1c>
 800405a:	4631      	mov	r1, r6
 800405c:	4622      	mov	r2, r4
 800405e:	f7ff fc11 	bl	8003884 <memcpy>
 8004062:	4631      	mov	r1, r6
 8004064:	4638      	mov	r0, r7
 8004066:	f7ff ff35 	bl	8003ed4 <_free_r>
 800406a:	e7e9      	b.n	8004040 <_realloc_r+0x1c>
 800406c:	4635      	mov	r5, r6
 800406e:	e7e7      	b.n	8004040 <_realloc_r+0x1c>

08004070 <_sbrk_r>:
 8004070:	b538      	push	{r3, r4, r5, lr}
 8004072:	4c06      	ldr	r4, [pc, #24]	; (800408c <_sbrk_r+0x1c>)
 8004074:	2300      	movs	r3, #0
 8004076:	4605      	mov	r5, r0
 8004078:	4608      	mov	r0, r1
 800407a:	6023      	str	r3, [r4, #0]
 800407c:	f7fc fd56 	bl	8000b2c <_sbrk>
 8004080:	1c43      	adds	r3, r0, #1
 8004082:	d102      	bne.n	800408a <_sbrk_r+0x1a>
 8004084:	6823      	ldr	r3, [r4, #0]
 8004086:	b103      	cbz	r3, 800408a <_sbrk_r+0x1a>
 8004088:	602b      	str	r3, [r5, #0]
 800408a:	bd38      	pop	{r3, r4, r5, pc}
 800408c:	20004184 	.word	0x20004184

08004090 <__malloc_lock>:
 8004090:	4770      	bx	lr

08004092 <__malloc_unlock>:
 8004092:	4770      	bx	lr

08004094 <_malloc_usable_size_r>:
 8004094:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004098:	1f18      	subs	r0, r3, #4
 800409a:	2b00      	cmp	r3, #0
 800409c:	bfbc      	itt	lt
 800409e:	580b      	ldrlt	r3, [r1, r0]
 80040a0:	18c0      	addlt	r0, r0, r3
 80040a2:	4770      	bx	lr

080040a4 <_init>:
 80040a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040a6:	bf00      	nop
 80040a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040aa:	bc08      	pop	{r3}
 80040ac:	469e      	mov	lr, r3
 80040ae:	4770      	bx	lr

080040b0 <_fini>:
 80040b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040b2:	bf00      	nop
 80040b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040b6:	bc08      	pop	{r3}
 80040b8:	469e      	mov	lr, r3
 80040ba:	4770      	bx	lr
