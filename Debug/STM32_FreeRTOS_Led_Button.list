
STM32_FreeRTOS_Led_Button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029d0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002b60  08002b60  00012b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b88  08002b88  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08002b88  08002b88  00012b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b90  08002b90  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b90  08002b90  00012b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b94  08002b94  00012b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002b98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003fd0  20000010  08002ba8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003fe0  08002ba8  00023fe0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000080ac  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000188c  00000000  00000000  000280ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006c8  00000000  00000000  00029978  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005f0  00000000  00000000  0002a040  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020574  00000000  00000000  0002a630  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006eaa  00000000  00000000  0004aba4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c6a34  00000000  00000000  00051a4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00118482  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000190c  00000000  00000000  00118500  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002b48 	.word	0x08002b48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08002b48 	.word	0x08002b48

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	4a07      	ldr	r2, [pc, #28]	; (80004fc <vApplicationGetIdleTaskMemory+0x2c>)
 80004e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	4a06      	ldr	r2, [pc, #24]	; (8000500 <vApplicationGetIdleTaskMemory+0x30>)
 80004e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2280      	movs	r2, #128	; 0x80
 80004ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004ee:	bf00      	nop
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	2000002c 	.word	0x2000002c
 8000500:	20000080 	.word	0x20000080

08000504 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void){
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af02      	add	r7, sp, #8

  HAL_Init();
 800050a:	f000 fab3 	bl	8000a74 <HAL_Init>


  SystemClock_Config();
 800050e:	f000 f82b 	bl	8000568 <SystemClock_Config>


  MX_GPIO_Init();
 8000512:	f000 f889 	bl	8000628 <MX_GPIO_Init>

  led = turn_off;
 8000516:	4b0d      	ldr	r3, [pc, #52]	; (800054c <main+0x48>)
 8000518:	2200      	movs	r2, #0
 800051a:	701a      	strb	r2, [r3, #0]

  //3. lets create 2 tasks , task-1 and task-2
  xTaskCreate( led_task_handler,"Task-1", configMINIMAL_STACK_SIZE,NULL,2,&led_task );
 800051c:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <main+0x4c>)
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	2302      	movs	r3, #2
 8000522:	9300      	str	r3, [sp, #0]
 8000524:	2300      	movs	r3, #0
 8000526:	2280      	movs	r2, #128	; 0x80
 8000528:	490a      	ldr	r1, [pc, #40]	; (8000554 <main+0x50>)
 800052a:	480b      	ldr	r0, [pc, #44]	; (8000558 <main+0x54>)
 800052c:	f001 fac9 	bl	8001ac2 <xTaskCreate>
  xTaskCreate( button_task_handler,"Task-2", configMINIMAL_STACK_SIZE,NULL,2,&button_task );
 8000530:	4b0a      	ldr	r3, [pc, #40]	; (800055c <main+0x58>)
 8000532:	9301      	str	r3, [sp, #4]
 8000534:	2302      	movs	r3, #2
 8000536:	9300      	str	r3, [sp, #0]
 8000538:	2300      	movs	r3, #0
 800053a:	2280      	movs	r2, #128	; 0x80
 800053c:	4908      	ldr	r1, [pc, #32]	; (8000560 <main+0x5c>)
 800053e:	4809      	ldr	r0, [pc, #36]	; (8000564 <main+0x60>)
 8000540:	f001 fabf 	bl	8001ac2 <xTaskCreate>


  //4. Start the scheduler.
  vTaskStartScheduler();
 8000544:	f001 fbf2 	bl	8001d2c <vTaskStartScheduler>

  while (1);
 8000548:	e7fe      	b.n	8000548 <main+0x44>
 800054a:	bf00      	nop
 800054c:	20003fd8 	.word	0x20003fd8
 8000550:	20000280 	.word	0x20000280
 8000554:	08002b60 	.word	0x08002b60
 8000558:	080008e9 	.word	0x080008e9
 800055c:	20000284 	.word	0x20000284
 8000560:	08002b68 	.word	0x08002b68
 8000564:	0800091d 	.word	0x0800091d

08000568 <SystemClock_Config>:
}


void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b094      	sub	sp, #80	; 0x50
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 0320 	add.w	r3, r7, #32
 8000572:	2230      	movs	r2, #48	; 0x30
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f002 fade 	bl	8002b38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	f107 030c 	add.w	r3, r7, #12
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800058c:	2300      	movs	r3, #0
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	4b23      	ldr	r3, [pc, #140]	; (8000620 <SystemClock_Config+0xb8>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000594:	4a22      	ldr	r2, [pc, #136]	; (8000620 <SystemClock_Config+0xb8>)
 8000596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059a:	6413      	str	r3, [r2, #64]	; 0x40
 800059c:	4b20      	ldr	r3, [pc, #128]	; (8000620 <SystemClock_Config+0xb8>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a4:	60bb      	str	r3, [r7, #8]
 80005a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a8:	2300      	movs	r3, #0
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	4b1d      	ldr	r3, [pc, #116]	; (8000624 <SystemClock_Config+0xbc>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a1c      	ldr	r2, [pc, #112]	; (8000624 <SystemClock_Config+0xbc>)
 80005b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b6:	6013      	str	r3, [r2, #0]
 80005b8:	4b1a      	ldr	r3, [pc, #104]	; (8000624 <SystemClock_Config+0xbc>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c4:	2302      	movs	r3, #2
 80005c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c8:	2301      	movs	r3, #1
 80005ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005cc:	2310      	movs	r3, #16
 80005ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005d0:	2300      	movs	r3, #0
 80005d2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d4:	f107 0320 	add.w	r3, r7, #32
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 fd6f 	bl	80010bc <HAL_RCC_OscConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005e4:	f000 f9b2 	bl	800094c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e8:	230f      	movs	r3, #15
 80005ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005ec:	2300      	movs	r3, #0
 80005ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005f4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f000 ffc8 	bl	800159c <HAL_RCC_ClockConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000612:	f000 f99b 	bl	800094c <Error_Handler>
  }
}
 8000616:	bf00      	nop
 8000618:	3750      	adds	r7, #80	; 0x50
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40023800 	.word	0x40023800
 8000624:	40007000 	.word	0x40007000

08000628 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b08c      	sub	sp, #48	; 0x30
 800062c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062e:	f107 031c 	add.w	r3, r7, #28
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	609a      	str	r2, [r3, #8]
 800063a:	60da      	str	r2, [r3, #12]
 800063c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800063e:	2300      	movs	r3, #0
 8000640:	61bb      	str	r3, [r7, #24]
 8000642:	4ba1      	ldr	r3, [pc, #644]	; (80008c8 <MX_GPIO_Init+0x2a0>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	4aa0      	ldr	r2, [pc, #640]	; (80008c8 <MX_GPIO_Init+0x2a0>)
 8000648:	f043 0310 	orr.w	r3, r3, #16
 800064c:	6313      	str	r3, [r2, #48]	; 0x30
 800064e:	4b9e      	ldr	r3, [pc, #632]	; (80008c8 <MX_GPIO_Init+0x2a0>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	f003 0310 	and.w	r3, r3, #16
 8000656:	61bb      	str	r3, [r7, #24]
 8000658:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	617b      	str	r3, [r7, #20]
 800065e:	4b9a      	ldr	r3, [pc, #616]	; (80008c8 <MX_GPIO_Init+0x2a0>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	4a99      	ldr	r2, [pc, #612]	; (80008c8 <MX_GPIO_Init+0x2a0>)
 8000664:	f043 0304 	orr.w	r3, r3, #4
 8000668:	6313      	str	r3, [r2, #48]	; 0x30
 800066a:	4b97      	ldr	r3, [pc, #604]	; (80008c8 <MX_GPIO_Init+0x2a0>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	f003 0304 	and.w	r3, r3, #4
 8000672:	617b      	str	r3, [r7, #20]
 8000674:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	613b      	str	r3, [r7, #16]
 800067a:	4b93      	ldr	r3, [pc, #588]	; (80008c8 <MX_GPIO_Init+0x2a0>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a92      	ldr	r2, [pc, #584]	; (80008c8 <MX_GPIO_Init+0x2a0>)
 8000680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b90      	ldr	r3, [pc, #576]	; (80008c8 <MX_GPIO_Init+0x2a0>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800068e:	613b      	str	r3, [r7, #16]
 8000690:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	60fb      	str	r3, [r7, #12]
 8000696:	4b8c      	ldr	r3, [pc, #560]	; (80008c8 <MX_GPIO_Init+0x2a0>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a8b      	ldr	r2, [pc, #556]	; (80008c8 <MX_GPIO_Init+0x2a0>)
 800069c:	f043 0301 	orr.w	r3, r3, #1
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b89      	ldr	r3, [pc, #548]	; (80008c8 <MX_GPIO_Init+0x2a0>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	4b85      	ldr	r3, [pc, #532]	; (80008c8 <MX_GPIO_Init+0x2a0>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	4a84      	ldr	r2, [pc, #528]	; (80008c8 <MX_GPIO_Init+0x2a0>)
 80006b8:	f043 0302 	orr.w	r3, r3, #2
 80006bc:	6313      	str	r3, [r2, #48]	; 0x30
 80006be:	4b82      	ldr	r3, [pc, #520]	; (80008c8 <MX_GPIO_Init+0x2a0>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	f003 0302 	and.w	r3, r3, #2
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	4b7e      	ldr	r3, [pc, #504]	; (80008c8 <MX_GPIO_Init+0x2a0>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	4a7d      	ldr	r2, [pc, #500]	; (80008c8 <MX_GPIO_Init+0x2a0>)
 80006d4:	f043 0308 	orr.w	r3, r3, #8
 80006d8:	6313      	str	r3, [r2, #48]	; 0x30
 80006da:	4b7b      	ldr	r3, [pc, #492]	; (80008c8 <MX_GPIO_Init+0x2a0>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	f003 0308 	and.w	r3, r3, #8
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2108      	movs	r1, #8
 80006ea:	4878      	ldr	r0, [pc, #480]	; (80008cc <MX_GPIO_Init+0x2a4>)
 80006ec:	f000 fccc 	bl	8001088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80006f0:	2201      	movs	r2, #1
 80006f2:	2101      	movs	r1, #1
 80006f4:	4876      	ldr	r0, [pc, #472]	; (80008d0 <MX_GPIO_Init+0x2a8>)
 80006f6:	f000 fcc7 	bl	8001088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80006fa:	2200      	movs	r2, #0
 80006fc:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000700:	4874      	ldr	r0, [pc, #464]	; (80008d4 <MX_GPIO_Init+0x2ac>)
 8000702:	f000 fcc1 	bl	8001088 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000706:	2308      	movs	r3, #8
 8000708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070a:	2301      	movs	r3, #1
 800070c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000712:	2300      	movs	r3, #0
 8000714:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000716:	f107 031c 	add.w	r3, r7, #28
 800071a:	4619      	mov	r1, r3
 800071c:	486b      	ldr	r0, [pc, #428]	; (80008cc <MX_GPIO_Init+0x2a4>)
 800071e:	f000 fb01 	bl	8000d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000722:	2301      	movs	r3, #1
 8000724:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000726:	2301      	movs	r3, #1
 8000728:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	2300      	movs	r3, #0
 800072c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072e:	2300      	movs	r3, #0
 8000730:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000732:	f107 031c 	add.w	r3, r7, #28
 8000736:	4619      	mov	r1, r3
 8000738:	4865      	ldr	r0, [pc, #404]	; (80008d0 <MX_GPIO_Init+0x2a8>)
 800073a:	f000 faf3 	bl	8000d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800073e:	2308      	movs	r3, #8
 8000740:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000742:	2302      	movs	r3, #2
 8000744:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074a:	2300      	movs	r3, #0
 800074c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800074e:	2305      	movs	r3, #5
 8000750:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000752:	f107 031c 	add.w	r3, r7, #28
 8000756:	4619      	mov	r1, r3
 8000758:	485d      	ldr	r0, [pc, #372]	; (80008d0 <MX_GPIO_Init+0x2a8>)
 800075a:	f000 fae3 	bl	8000d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800075e:	2301      	movs	r3, #1
 8000760:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000762:	4b5d      	ldr	r3, [pc, #372]	; (80008d8 <MX_GPIO_Init+0x2b0>)
 8000764:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800076a:	f107 031c 	add.w	r3, r7, #28
 800076e:	4619      	mov	r1, r3
 8000770:	485a      	ldr	r0, [pc, #360]	; (80008dc <MX_GPIO_Init+0x2b4>)
 8000772:	f000 fad7 	bl	8000d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000776:	2310      	movs	r3, #16
 8000778:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077a:	2302      	movs	r3, #2
 800077c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000782:	2300      	movs	r3, #0
 8000784:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000786:	2306      	movs	r3, #6
 8000788:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800078a:	f107 031c 	add.w	r3, r7, #28
 800078e:	4619      	mov	r1, r3
 8000790:	4852      	ldr	r0, [pc, #328]	; (80008dc <MX_GPIO_Init+0x2b4>)
 8000792:	f000 fac7 	bl	8000d24 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000796:	23e0      	movs	r3, #224	; 0xe0
 8000798:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079a:	2302      	movs	r3, #2
 800079c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a2:	2300      	movs	r3, #0
 80007a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007a6:	2305      	movs	r3, #5
 80007a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007aa:	f107 031c 	add.w	r3, r7, #28
 80007ae:	4619      	mov	r1, r3
 80007b0:	484a      	ldr	r0, [pc, #296]	; (80008dc <MX_GPIO_Init+0x2b4>)
 80007b2:	f000 fab7 	bl	8000d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80007b6:	2304      	movs	r3, #4
 80007b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ba:	2300      	movs	r3, #0
 80007bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80007c2:	f107 031c 	add.w	r3, r7, #28
 80007c6:	4619      	mov	r1, r3
 80007c8:	4845      	ldr	r0, [pc, #276]	; (80008e0 <MX_GPIO_Init+0x2b8>)
 80007ca:	f000 faab 	bl	8000d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80007ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d4:	2302      	movs	r3, #2
 80007d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007dc:	2300      	movs	r3, #0
 80007de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007e0:	2305      	movs	r3, #5
 80007e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80007e4:	f107 031c 	add.w	r3, r7, #28
 80007e8:	4619      	mov	r1, r3
 80007ea:	483d      	ldr	r0, [pc, #244]	; (80008e0 <MX_GPIO_Init+0x2b8>)
 80007ec:	f000 fa9a 	bl	8000d24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007f0:	f24f 0310 	movw	r3, #61456	; 0xf010
 80007f4:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f6:	2301      	movs	r3, #1
 80007f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fe:	2300      	movs	r3, #0
 8000800:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000802:	f107 031c 	add.w	r3, r7, #28
 8000806:	4619      	mov	r1, r3
 8000808:	4832      	ldr	r0, [pc, #200]	; (80008d4 <MX_GPIO_Init+0x2ac>)
 800080a:	f000 fa8b 	bl	8000d24 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800080e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000812:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000814:	2302      	movs	r3, #2
 8000816:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081c:	2300      	movs	r3, #0
 800081e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000820:	2306      	movs	r3, #6
 8000822:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000824:	f107 031c 	add.w	r3, r7, #28
 8000828:	4619      	mov	r1, r3
 800082a:	4829      	ldr	r0, [pc, #164]	; (80008d0 <MX_GPIO_Init+0x2a8>)
 800082c:	f000 fa7a 	bl	8000d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000830:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000836:	2300      	movs	r3, #0
 8000838:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800083e:	f107 031c 	add.w	r3, r7, #28
 8000842:	4619      	mov	r1, r3
 8000844:	4825      	ldr	r0, [pc, #148]	; (80008dc <MX_GPIO_Init+0x2b4>)
 8000846:	f000 fa6d 	bl	8000d24 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800084a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800084e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000850:	2302      	movs	r3, #2
 8000852:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	2300      	movs	r3, #0
 800085a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800085c:	230a      	movs	r3, #10
 800085e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000860:	f107 031c 	add.w	r3, r7, #28
 8000864:	4619      	mov	r1, r3
 8000866:	481d      	ldr	r0, [pc, #116]	; (80008dc <MX_GPIO_Init+0x2b4>)
 8000868:	f000 fa5c 	bl	8000d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800086c:	2320      	movs	r3, #32
 800086e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000870:	2300      	movs	r3, #0
 8000872:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000878:	f107 031c 	add.w	r3, r7, #28
 800087c:	4619      	mov	r1, r3
 800087e:	4815      	ldr	r0, [pc, #84]	; (80008d4 <MX_GPIO_Init+0x2ac>)
 8000880:	f000 fa50 	bl	8000d24 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000884:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800088a:	2312      	movs	r3, #18
 800088c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800088e:	2301      	movs	r3, #1
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2300      	movs	r3, #0
 8000894:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000896:	2304      	movs	r3, #4
 8000898:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	4619      	mov	r1, r3
 80008a0:	480f      	ldr	r0, [pc, #60]	; (80008e0 <MX_GPIO_Init+0x2b8>)
 80008a2:	f000 fa3f 	bl	8000d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008a6:	2302      	movs	r3, #2
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <MX_GPIO_Init+0x2bc>)
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	4619      	mov	r1, r3
 80008b8:	4804      	ldr	r0, [pc, #16]	; (80008cc <MX_GPIO_Init+0x2a4>)
 80008ba:	f000 fa33 	bl	8000d24 <HAL_GPIO_Init>

}
 80008be:	bf00      	nop
 80008c0:	3730      	adds	r7, #48	; 0x30
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40021000 	.word	0x40021000
 80008d0:	40020800 	.word	0x40020800
 80008d4:	40020c00 	.word	0x40020c00
 80008d8:	10110000 	.word	0x10110000
 80008dc:	40020000 	.word	0x40020000
 80008e0:	40020400 	.word	0x40020400
 80008e4:	10120000 	.word	0x10120000

080008e8 <led_task_handler>:

void led_task_handler(void *params){
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]

	while(1){
		// if the user button is pressed, turn on the blue LED
		if(led == turn_on){
 80008f0:	4b08      	ldr	r3, [pc, #32]	; (8000914 <led_task_handler+0x2c>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d106      	bne.n	8000906 <led_task_handler+0x1e>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15 , GPIO_PIN_SET);
 80008f8:	2201      	movs	r2, #1
 80008fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008fe:	4806      	ldr	r0, [pc, #24]	; (8000918 <led_task_handler+0x30>)
 8000900:	f000 fbc2 	bl	8001088 <HAL_GPIO_WritePin>
 8000904:	e7f4      	b.n	80008f0 <led_task_handler+0x8>
		}else{
		// otherwise, turn it off
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15 , GPIO_PIN_RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800090c:	4802      	ldr	r0, [pc, #8]	; (8000918 <led_task_handler+0x30>)
 800090e:	f000 fbbb 	bl	8001088 <HAL_GPIO_WritePin>
		if(led == turn_on){
 8000912:	e7ed      	b.n	80008f0 <led_task_handler+0x8>
 8000914:	20003fd8 	.word	0x20003fd8
 8000918:	40020c00 	.word	0x40020c00

0800091c <button_task_handler>:
		}
	}
}

void button_task_handler(void *params){
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]

	while(1){
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0 ) == GPIO_PIN_SET){
 8000924:	2101      	movs	r1, #1
 8000926:	4807      	ldr	r0, [pc, #28]	; (8000944 <button_task_handler+0x28>)
 8000928:	f000 fb96 	bl	8001058 <HAL_GPIO_ReadPin>
 800092c:	4603      	mov	r3, r0
 800092e:	2b01      	cmp	r3, #1
 8000930:	d103      	bne.n	800093a <button_task_handler+0x1e>
			led = turn_on;
 8000932:	4b05      	ldr	r3, [pc, #20]	; (8000948 <button_task_handler+0x2c>)
 8000934:	2201      	movs	r2, #1
 8000936:	701a      	strb	r2, [r3, #0]
 8000938:	e7f4      	b.n	8000924 <button_task_handler+0x8>
		}
		else{
			led = turn_off;
 800093a:	4b03      	ldr	r3, [pc, #12]	; (8000948 <button_task_handler+0x2c>)
 800093c:	2200      	movs	r2, #0
 800093e:	701a      	strb	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0 ) == GPIO_PIN_SET){
 8000940:	e7f0      	b.n	8000924 <button_task_handler+0x8>
 8000942:	bf00      	nop
 8000944:	40020000 	.word	0x40020000
 8000948:	20003fd8 	.word	0x20003fd8

0800094c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000950:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000952:	e7fe      	b.n	8000952 <Error_Handler+0x6>

08000954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <HAL_MspInit+0x54>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000962:	4a11      	ldr	r2, [pc, #68]	; (80009a8 <HAL_MspInit+0x54>)
 8000964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000968:	6453      	str	r3, [r2, #68]	; 0x44
 800096a:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <HAL_MspInit+0x54>)
 800096c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	603b      	str	r3, [r7, #0]
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <HAL_MspInit+0x54>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	4a0a      	ldr	r2, [pc, #40]	; (80009a8 <HAL_MspInit+0x54>)
 8000980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000984:	6413      	str	r3, [r2, #64]	; 0x40
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <HAL_MspInit+0x54>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000992:	2200      	movs	r2, #0
 8000994:	210f      	movs	r1, #15
 8000996:	f06f 0001 	mvn.w	r0, #1
 800099a:	f000 f99a 	bl	8000cd2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40023800 	.word	0x40023800

080009ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <NMI_Handler+0x4>

080009b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b6:	e7fe      	b.n	80009b6 <HardFault_Handler+0x4>

080009b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <MemManage_Handler+0x4>

080009be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c2:	e7fe      	b.n	80009c2 <BusFault_Handler+0x4>

080009c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <UsageFault_Handler+0x4>

080009ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009dc:	f000 f89c 	bl	8000b18 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80009e0:	f001 fc90 	bl	8002304 <xTaskGetSchedulerState>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d001      	beq.n	80009ee <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80009ea:	f001 fe5d 	bl	80026a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
	...

080009f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009f8:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <SystemInit+0x28>)
 80009fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009fe:	4a07      	ldr	r2, [pc, #28]	; (8000a1c <SystemInit+0x28>)
 8000a00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a08:	4b04      	ldr	r3, [pc, #16]	; (8000a1c <SystemInit+0x28>)
 8000a0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a0e:	609a      	str	r2, [r3, #8]
#endif
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a58 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a24:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a26:	e003      	b.n	8000a30 <LoopCopyDataInit>

08000a28 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a28:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a2a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a2c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a2e:	3104      	adds	r1, #4

08000a30 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a30:	480b      	ldr	r0, [pc, #44]	; (8000a60 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a32:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a34:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a36:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a38:	d3f6      	bcc.n	8000a28 <CopyDataInit>
  ldr  r2, =_sbss
 8000a3a:	4a0b      	ldr	r2, [pc, #44]	; (8000a68 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a3c:	e002      	b.n	8000a44 <LoopFillZerobss>

08000a3e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a3e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a40:	f842 3b04 	str.w	r3, [r2], #4

08000a44 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a44:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a46:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a48:	d3f9      	bcc.n	8000a3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a4a:	f7ff ffd3 	bl	80009f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a4e:	f002 f84f 	bl	8002af0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a52:	f7ff fd57 	bl	8000504 <main>
  bx  lr    
 8000a56:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a58:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000a5c:	08002b98 	.word	0x08002b98
  ldr  r0, =_sdata
 8000a60:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a64:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000a68:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000a6c:	20003fe0 	.word	0x20003fe0

08000a70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a70:	e7fe      	b.n	8000a70 <ADC_IRQHandler>
	...

08000a74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a78:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <HAL_Init+0x40>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a0d      	ldr	r2, [pc, #52]	; (8000ab4 <HAL_Init+0x40>)
 8000a7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a84:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <HAL_Init+0x40>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a0a      	ldr	r2, [pc, #40]	; (8000ab4 <HAL_Init+0x40>)
 8000a8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <HAL_Init+0x40>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a07      	ldr	r2, [pc, #28]	; (8000ab4 <HAL_Init+0x40>)
 8000a96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a9c:	2003      	movs	r0, #3
 8000a9e:	f000 f90d 	bl	8000cbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aa2:	200f      	movs	r0, #15
 8000aa4:	f000 f808 	bl	8000ab8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aa8:	f7ff ff54 	bl	8000954 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aac:	2300      	movs	r3, #0
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40023c00 	.word	0x40023c00

08000ab8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ac0:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <HAL_InitTick+0x54>)
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <HAL_InitTick+0x58>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ace:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f000 f917 	bl	8000d0a <HAL_SYSTICK_Config>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e00e      	b.n	8000b04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2b0f      	cmp	r3, #15
 8000aea:	d80a      	bhi.n	8000b02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aec:	2200      	movs	r2, #0
 8000aee:	6879      	ldr	r1, [r7, #4]
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295
 8000af4:	f000 f8ed 	bl	8000cd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000af8:	4a06      	ldr	r2, [pc, #24]	; (8000b14 <HAL_InitTick+0x5c>)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000afe:	2300      	movs	r3, #0
 8000b00:	e000      	b.n	8000b04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000000 	.word	0x20000000
 8000b10:	20000008 	.word	0x20000008
 8000b14:	20000004 	.word	0x20000004

08000b18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <HAL_IncTick+0x20>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	461a      	mov	r2, r3
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_IncTick+0x24>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4413      	add	r3, r2
 8000b28:	4a04      	ldr	r2, [pc, #16]	; (8000b3c <HAL_IncTick+0x24>)
 8000b2a:	6013      	str	r3, [r2, #0]
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	20000008 	.word	0x20000008
 8000b3c:	20003fdc 	.word	0x20003fdc

08000b40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  return uwTick;
 8000b44:	4b03      	ldr	r3, [pc, #12]	; (8000b54 <HAL_GetTick+0x14>)
 8000b46:	681b      	ldr	r3, [r3, #0]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	20003fdc 	.word	0x20003fdc

08000b58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f003 0307 	and.w	r3, r3, #7
 8000b66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <__NVIC_SetPriorityGrouping+0x44>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b6e:	68ba      	ldr	r2, [r7, #8]
 8000b70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b74:	4013      	ands	r3, r2
 8000b76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b8a:	4a04      	ldr	r2, [pc, #16]	; (8000b9c <__NVIC_SetPriorityGrouping+0x44>)
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	60d3      	str	r3, [r2, #12]
}
 8000b90:	bf00      	nop
 8000b92:	3714      	adds	r7, #20
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba4:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	0a1b      	lsrs	r3, r3, #8
 8000baa:	f003 0307 	and.w	r3, r3, #7
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	6039      	str	r1, [r7, #0]
 8000bc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	db0a      	blt.n	8000be6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	b2da      	uxtb	r2, r3
 8000bd4:	490c      	ldr	r1, [pc, #48]	; (8000c08 <__NVIC_SetPriority+0x4c>)
 8000bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bda:	0112      	lsls	r2, r2, #4
 8000bdc:	b2d2      	uxtb	r2, r2
 8000bde:	440b      	add	r3, r1
 8000be0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000be4:	e00a      	b.n	8000bfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	b2da      	uxtb	r2, r3
 8000bea:	4908      	ldr	r1, [pc, #32]	; (8000c0c <__NVIC_SetPriority+0x50>)
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	f003 030f 	and.w	r3, r3, #15
 8000bf2:	3b04      	subs	r3, #4
 8000bf4:	0112      	lsls	r2, r2, #4
 8000bf6:	b2d2      	uxtb	r2, r2
 8000bf8:	440b      	add	r3, r1
 8000bfa:	761a      	strb	r2, [r3, #24]
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	e000e100 	.word	0xe000e100
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b089      	sub	sp, #36	; 0x24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	f003 0307 	and.w	r3, r3, #7
 8000c22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	f1c3 0307 	rsb	r3, r3, #7
 8000c2a:	2b04      	cmp	r3, #4
 8000c2c:	bf28      	it	cs
 8000c2e:	2304      	movcs	r3, #4
 8000c30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	3304      	adds	r3, #4
 8000c36:	2b06      	cmp	r3, #6
 8000c38:	d902      	bls.n	8000c40 <NVIC_EncodePriority+0x30>
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	3b03      	subs	r3, #3
 8000c3e:	e000      	b.n	8000c42 <NVIC_EncodePriority+0x32>
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c44:	f04f 32ff 	mov.w	r2, #4294967295
 8000c48:	69bb      	ldr	r3, [r7, #24]
 8000c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4e:	43da      	mvns	r2, r3
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	401a      	ands	r2, r3
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c58:	f04f 31ff 	mov.w	r1, #4294967295
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c62:	43d9      	mvns	r1, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c68:	4313      	orrs	r3, r2
         );
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3724      	adds	r7, #36	; 0x24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
	...

08000c78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3b01      	subs	r3, #1
 8000c84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c88:	d301      	bcc.n	8000c8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e00f      	b.n	8000cae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c8e:	4a0a      	ldr	r2, [pc, #40]	; (8000cb8 <SysTick_Config+0x40>)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3b01      	subs	r3, #1
 8000c94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c96:	210f      	movs	r1, #15
 8000c98:	f04f 30ff 	mov.w	r0, #4294967295
 8000c9c:	f7ff ff8e 	bl	8000bbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ca0:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <SysTick_Config+0x40>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ca6:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <SysTick_Config+0x40>)
 8000ca8:	2207      	movs	r2, #7
 8000caa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	e000e010 	.word	0xe000e010

08000cbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cc4:	6878      	ldr	r0, [r7, #4]
 8000cc6:	f7ff ff47 	bl	8000b58 <__NVIC_SetPriorityGrouping>
}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b086      	sub	sp, #24
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	4603      	mov	r3, r0
 8000cda:	60b9      	str	r1, [r7, #8]
 8000cdc:	607a      	str	r2, [r7, #4]
 8000cde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ce4:	f7ff ff5c 	bl	8000ba0 <__NVIC_GetPriorityGrouping>
 8000ce8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	68b9      	ldr	r1, [r7, #8]
 8000cee:	6978      	ldr	r0, [r7, #20]
 8000cf0:	f7ff ff8e 	bl	8000c10 <NVIC_EncodePriority>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cfa:	4611      	mov	r1, r2
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff ff5d 	bl	8000bbc <__NVIC_SetPriority>
}
 8000d02:	bf00      	nop
 8000d04:	3718      	adds	r7, #24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b082      	sub	sp, #8
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f7ff ffb0 	bl	8000c78 <SysTick_Config>
 8000d18:	4603      	mov	r3, r0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
	...

08000d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b089      	sub	sp, #36	; 0x24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d32:	2300      	movs	r3, #0
 8000d34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61fb      	str	r3, [r7, #28]
 8000d3e:	e16b      	b.n	8001018 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d40:	2201      	movs	r2, #1
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	697a      	ldr	r2, [r7, #20]
 8000d50:	4013      	ands	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	f040 815a 	bne.w	8001012 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d00b      	beq.n	8000d7e <HAL_GPIO_Init+0x5a>
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	2b02      	cmp	r3, #2
 8000d6c:	d007      	beq.n	8000d7e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d72:	2b11      	cmp	r3, #17
 8000d74:	d003      	beq.n	8000d7e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	2b12      	cmp	r3, #18
 8000d7c:	d130      	bne.n	8000de0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	2203      	movs	r2, #3
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	4013      	ands	r3, r2
 8000d94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	68da      	ldr	r2, [r3, #12]
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	69ba      	ldr	r2, [r7, #24]
 8000dac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000db4:	2201      	movs	r2, #1
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	091b      	lsrs	r3, r3, #4
 8000dca:	f003 0201 	and.w	r2, r3, #1
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	2203      	movs	r2, #3
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	43db      	mvns	r3, r3
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	4013      	ands	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	689a      	ldr	r2, [r3, #8]
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d003      	beq.n	8000e20 <HAL_GPIO_Init+0xfc>
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	2b12      	cmp	r3, #18
 8000e1e:	d123      	bne.n	8000e68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	08da      	lsrs	r2, r3, #3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3208      	adds	r2, #8
 8000e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	f003 0307 	and.w	r3, r3, #7
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	220f      	movs	r2, #15
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	4013      	ands	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	691a      	ldr	r2, [r3, #16]
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	08da      	lsrs	r2, r3, #3
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	3208      	adds	r2, #8
 8000e62:	69b9      	ldr	r1, [r7, #24]
 8000e64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	2203      	movs	r2, #3
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f003 0203 	and.w	r2, r3, #3
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	f000 80b4 	beq.w	8001012 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	4b5f      	ldr	r3, [pc, #380]	; (800102c <HAL_GPIO_Init+0x308>)
 8000eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb2:	4a5e      	ldr	r2, [pc, #376]	; (800102c <HAL_GPIO_Init+0x308>)
 8000eb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eba:	4b5c      	ldr	r3, [pc, #368]	; (800102c <HAL_GPIO_Init+0x308>)
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ec6:	4a5a      	ldr	r2, [pc, #360]	; (8001030 <HAL_GPIO_Init+0x30c>)
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	089b      	lsrs	r3, r3, #2
 8000ecc:	3302      	adds	r3, #2
 8000ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	f003 0303 	and.w	r3, r3, #3
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	220f      	movs	r2, #15
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a51      	ldr	r2, [pc, #324]	; (8001034 <HAL_GPIO_Init+0x310>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d02b      	beq.n	8000f4a <HAL_GPIO_Init+0x226>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a50      	ldr	r2, [pc, #320]	; (8001038 <HAL_GPIO_Init+0x314>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d025      	beq.n	8000f46 <HAL_GPIO_Init+0x222>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a4f      	ldr	r2, [pc, #316]	; (800103c <HAL_GPIO_Init+0x318>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d01f      	beq.n	8000f42 <HAL_GPIO_Init+0x21e>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a4e      	ldr	r2, [pc, #312]	; (8001040 <HAL_GPIO_Init+0x31c>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d019      	beq.n	8000f3e <HAL_GPIO_Init+0x21a>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a4d      	ldr	r2, [pc, #308]	; (8001044 <HAL_GPIO_Init+0x320>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d013      	beq.n	8000f3a <HAL_GPIO_Init+0x216>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a4c      	ldr	r2, [pc, #304]	; (8001048 <HAL_GPIO_Init+0x324>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d00d      	beq.n	8000f36 <HAL_GPIO_Init+0x212>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a4b      	ldr	r2, [pc, #300]	; (800104c <HAL_GPIO_Init+0x328>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d007      	beq.n	8000f32 <HAL_GPIO_Init+0x20e>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a4a      	ldr	r2, [pc, #296]	; (8001050 <HAL_GPIO_Init+0x32c>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d101      	bne.n	8000f2e <HAL_GPIO_Init+0x20a>
 8000f2a:	2307      	movs	r3, #7
 8000f2c:	e00e      	b.n	8000f4c <HAL_GPIO_Init+0x228>
 8000f2e:	2308      	movs	r3, #8
 8000f30:	e00c      	b.n	8000f4c <HAL_GPIO_Init+0x228>
 8000f32:	2306      	movs	r3, #6
 8000f34:	e00a      	b.n	8000f4c <HAL_GPIO_Init+0x228>
 8000f36:	2305      	movs	r3, #5
 8000f38:	e008      	b.n	8000f4c <HAL_GPIO_Init+0x228>
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	e006      	b.n	8000f4c <HAL_GPIO_Init+0x228>
 8000f3e:	2303      	movs	r3, #3
 8000f40:	e004      	b.n	8000f4c <HAL_GPIO_Init+0x228>
 8000f42:	2302      	movs	r3, #2
 8000f44:	e002      	b.n	8000f4c <HAL_GPIO_Init+0x228>
 8000f46:	2301      	movs	r3, #1
 8000f48:	e000      	b.n	8000f4c <HAL_GPIO_Init+0x228>
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	69fa      	ldr	r2, [r7, #28]
 8000f4e:	f002 0203 	and.w	r2, r2, #3
 8000f52:	0092      	lsls	r2, r2, #2
 8000f54:	4093      	lsls	r3, r2
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f5c:	4934      	ldr	r1, [pc, #208]	; (8001030 <HAL_GPIO_Init+0x30c>)
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	089b      	lsrs	r3, r3, #2
 8000f62:	3302      	adds	r3, #2
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f6a:	4b3a      	ldr	r3, [pc, #232]	; (8001054 <HAL_GPIO_Init+0x330>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	43db      	mvns	r3, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4013      	ands	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d003      	beq.n	8000f8e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f8e:	4a31      	ldr	r2, [pc, #196]	; (8001054 <HAL_GPIO_Init+0x330>)
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f94:	4b2f      	ldr	r3, [pc, #188]	; (8001054 <HAL_GPIO_Init+0x330>)
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d003      	beq.n	8000fb8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fb8:	4a26      	ldr	r2, [pc, #152]	; (8001054 <HAL_GPIO_Init+0x330>)
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fbe:	4b25      	ldr	r3, [pc, #148]	; (8001054 <HAL_GPIO_Init+0x330>)
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d003      	beq.n	8000fe2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fe2:	4a1c      	ldr	r2, [pc, #112]	; (8001054 <HAL_GPIO_Init+0x330>)
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fe8:	4b1a      	ldr	r3, [pc, #104]	; (8001054 <HAL_GPIO_Init+0x330>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001000:	2b00      	cmp	r3, #0
 8001002:	d003      	beq.n	800100c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	4313      	orrs	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800100c:	4a11      	ldr	r2, [pc, #68]	; (8001054 <HAL_GPIO_Init+0x330>)
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3301      	adds	r3, #1
 8001016:	61fb      	str	r3, [r7, #28]
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	2b0f      	cmp	r3, #15
 800101c:	f67f ae90 	bls.w	8000d40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001020:	bf00      	nop
 8001022:	3724      	adds	r7, #36	; 0x24
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	40023800 	.word	0x40023800
 8001030:	40013800 	.word	0x40013800
 8001034:	40020000 	.word	0x40020000
 8001038:	40020400 	.word	0x40020400
 800103c:	40020800 	.word	0x40020800
 8001040:	40020c00 	.word	0x40020c00
 8001044:	40021000 	.word	0x40021000
 8001048:	40021400 	.word	0x40021400
 800104c:	40021800 	.word	0x40021800
 8001050:	40021c00 	.word	0x40021c00
 8001054:	40013c00 	.word	0x40013c00

08001058 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	460b      	mov	r3, r1
 8001062:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	691a      	ldr	r2, [r3, #16]
 8001068:	887b      	ldrh	r3, [r7, #2]
 800106a:	4013      	ands	r3, r2
 800106c:	2b00      	cmp	r3, #0
 800106e:	d002      	beq.n	8001076 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001070:	2301      	movs	r3, #1
 8001072:	73fb      	strb	r3, [r7, #15]
 8001074:	e001      	b.n	800107a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001076:	2300      	movs	r3, #0
 8001078:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800107a:	7bfb      	ldrb	r3, [r7, #15]
}
 800107c:	4618      	mov	r0, r3
 800107e:	3714      	adds	r7, #20
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	460b      	mov	r3, r1
 8001092:	807b      	strh	r3, [r7, #2]
 8001094:	4613      	mov	r3, r2
 8001096:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001098:	787b      	ldrb	r3, [r7, #1]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d003      	beq.n	80010a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800109e:	887a      	ldrh	r2, [r7, #2]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010a4:	e003      	b.n	80010ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010a6:	887b      	ldrh	r3, [r7, #2]
 80010a8:	041a      	lsls	r2, r3, #16
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	619a      	str	r2, [r3, #24]
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
	...

080010bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d101      	bne.n	80010ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e25b      	b.n	8001586 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d075      	beq.n	80011c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010da:	4ba3      	ldr	r3, [pc, #652]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f003 030c 	and.w	r3, r3, #12
 80010e2:	2b04      	cmp	r3, #4
 80010e4:	d00c      	beq.n	8001100 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010e6:	4ba0      	ldr	r3, [pc, #640]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010ee:	2b08      	cmp	r3, #8
 80010f0:	d112      	bne.n	8001118 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010f2:	4b9d      	ldr	r3, [pc, #628]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010fe:	d10b      	bne.n	8001118 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001100:	4b99      	ldr	r3, [pc, #612]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d05b      	beq.n	80011c4 <HAL_RCC_OscConfig+0x108>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d157      	bne.n	80011c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001114:	2301      	movs	r3, #1
 8001116:	e236      	b.n	8001586 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001120:	d106      	bne.n	8001130 <HAL_RCC_OscConfig+0x74>
 8001122:	4b91      	ldr	r3, [pc, #580]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a90      	ldr	r2, [pc, #576]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 8001128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800112c:	6013      	str	r3, [r2, #0]
 800112e:	e01d      	b.n	800116c <HAL_RCC_OscConfig+0xb0>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001138:	d10c      	bne.n	8001154 <HAL_RCC_OscConfig+0x98>
 800113a:	4b8b      	ldr	r3, [pc, #556]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a8a      	ldr	r2, [pc, #552]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 8001140:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001144:	6013      	str	r3, [r2, #0]
 8001146:	4b88      	ldr	r3, [pc, #544]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a87      	ldr	r2, [pc, #540]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 800114c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001150:	6013      	str	r3, [r2, #0]
 8001152:	e00b      	b.n	800116c <HAL_RCC_OscConfig+0xb0>
 8001154:	4b84      	ldr	r3, [pc, #528]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a83      	ldr	r2, [pc, #524]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 800115a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800115e:	6013      	str	r3, [r2, #0]
 8001160:	4b81      	ldr	r3, [pc, #516]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a80      	ldr	r2, [pc, #512]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 8001166:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800116a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d013      	beq.n	800119c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001174:	f7ff fce4 	bl	8000b40 <HAL_GetTick>
 8001178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800117a:	e008      	b.n	800118e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800117c:	f7ff fce0 	bl	8000b40 <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	2b64      	cmp	r3, #100	; 0x64
 8001188:	d901      	bls.n	800118e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e1fb      	b.n	8001586 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800118e:	4b76      	ldr	r3, [pc, #472]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d0f0      	beq.n	800117c <HAL_RCC_OscConfig+0xc0>
 800119a:	e014      	b.n	80011c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800119c:	f7ff fcd0 	bl	8000b40 <HAL_GetTick>
 80011a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011a2:	e008      	b.n	80011b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011a4:	f7ff fccc 	bl	8000b40 <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2b64      	cmp	r3, #100	; 0x64
 80011b0:	d901      	bls.n	80011b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e1e7      	b.n	8001586 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011b6:	4b6c      	ldr	r3, [pc, #432]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d1f0      	bne.n	80011a4 <HAL_RCC_OscConfig+0xe8>
 80011c2:	e000      	b.n	80011c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d063      	beq.n	800129a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011d2:	4b65      	ldr	r3, [pc, #404]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	f003 030c 	and.w	r3, r3, #12
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d00b      	beq.n	80011f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011de:	4b62      	ldr	r3, [pc, #392]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011e6:	2b08      	cmp	r3, #8
 80011e8:	d11c      	bne.n	8001224 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011ea:	4b5f      	ldr	r3, [pc, #380]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d116      	bne.n	8001224 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011f6:	4b5c      	ldr	r3, [pc, #368]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d005      	beq.n	800120e <HAL_RCC_OscConfig+0x152>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	68db      	ldr	r3, [r3, #12]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d001      	beq.n	800120e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e1bb      	b.n	8001586 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800120e:	4b56      	ldr	r3, [pc, #344]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	691b      	ldr	r3, [r3, #16]
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	4952      	ldr	r1, [pc, #328]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 800121e:	4313      	orrs	r3, r2
 8001220:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001222:	e03a      	b.n	800129a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d020      	beq.n	800126e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800122c:	4b4f      	ldr	r3, [pc, #316]	; (800136c <HAL_RCC_OscConfig+0x2b0>)
 800122e:	2201      	movs	r2, #1
 8001230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001232:	f7ff fc85 	bl	8000b40 <HAL_GetTick>
 8001236:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001238:	e008      	b.n	800124c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800123a:	f7ff fc81 	bl	8000b40 <HAL_GetTick>
 800123e:	4602      	mov	r2, r0
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	2b02      	cmp	r3, #2
 8001246:	d901      	bls.n	800124c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001248:	2303      	movs	r3, #3
 800124a:	e19c      	b.n	8001586 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800124c:	4b46      	ldr	r3, [pc, #280]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 0302 	and.w	r3, r3, #2
 8001254:	2b00      	cmp	r3, #0
 8001256:	d0f0      	beq.n	800123a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001258:	4b43      	ldr	r3, [pc, #268]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	691b      	ldr	r3, [r3, #16]
 8001264:	00db      	lsls	r3, r3, #3
 8001266:	4940      	ldr	r1, [pc, #256]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 8001268:	4313      	orrs	r3, r2
 800126a:	600b      	str	r3, [r1, #0]
 800126c:	e015      	b.n	800129a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800126e:	4b3f      	ldr	r3, [pc, #252]	; (800136c <HAL_RCC_OscConfig+0x2b0>)
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001274:	f7ff fc64 	bl	8000b40 <HAL_GetTick>
 8001278:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800127a:	e008      	b.n	800128e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800127c:	f7ff fc60 	bl	8000b40 <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b02      	cmp	r3, #2
 8001288:	d901      	bls.n	800128e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e17b      	b.n	8001586 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800128e:	4b36      	ldr	r3, [pc, #216]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1f0      	bne.n	800127c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0308 	and.w	r3, r3, #8
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d030      	beq.n	8001308 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d016      	beq.n	80012dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012ae:	4b30      	ldr	r3, [pc, #192]	; (8001370 <HAL_RCC_OscConfig+0x2b4>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012b4:	f7ff fc44 	bl	8000b40 <HAL_GetTick>
 80012b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ba:	e008      	b.n	80012ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012bc:	f7ff fc40 	bl	8000b40 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e15b      	b.n	8001586 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ce:	4b26      	ldr	r3, [pc, #152]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 80012d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d0f0      	beq.n	80012bc <HAL_RCC_OscConfig+0x200>
 80012da:	e015      	b.n	8001308 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012dc:	4b24      	ldr	r3, [pc, #144]	; (8001370 <HAL_RCC_OscConfig+0x2b4>)
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012e2:	f7ff fc2d 	bl	8000b40 <HAL_GetTick>
 80012e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012e8:	e008      	b.n	80012fc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012ea:	f7ff fc29 	bl	8000b40 <HAL_GetTick>
 80012ee:	4602      	mov	r2, r0
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d901      	bls.n	80012fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80012f8:	2303      	movs	r3, #3
 80012fa:	e144      	b.n	8001586 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012fc:	4b1a      	ldr	r3, [pc, #104]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 80012fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001300:	f003 0302 	and.w	r3, r3, #2
 8001304:	2b00      	cmp	r3, #0
 8001306:	d1f0      	bne.n	80012ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0304 	and.w	r3, r3, #4
 8001310:	2b00      	cmp	r3, #0
 8001312:	f000 80a0 	beq.w	8001456 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001316:	2300      	movs	r3, #0
 8001318:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800131a:	4b13      	ldr	r3, [pc, #76]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d10f      	bne.n	8001346 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	60bb      	str	r3, [r7, #8]
 800132a:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	4a0e      	ldr	r2, [pc, #56]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 8001330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001334:	6413      	str	r3, [r2, #64]	; 0x40
 8001336:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001342:	2301      	movs	r3, #1
 8001344:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001346:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <HAL_RCC_OscConfig+0x2b8>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800134e:	2b00      	cmp	r3, #0
 8001350:	d121      	bne.n	8001396 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001352:	4b08      	ldr	r3, [pc, #32]	; (8001374 <HAL_RCC_OscConfig+0x2b8>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a07      	ldr	r2, [pc, #28]	; (8001374 <HAL_RCC_OscConfig+0x2b8>)
 8001358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800135c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800135e:	f7ff fbef 	bl	8000b40 <HAL_GetTick>
 8001362:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001364:	e011      	b.n	800138a <HAL_RCC_OscConfig+0x2ce>
 8001366:	bf00      	nop
 8001368:	40023800 	.word	0x40023800
 800136c:	42470000 	.word	0x42470000
 8001370:	42470e80 	.word	0x42470e80
 8001374:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001378:	f7ff fbe2 	bl	8000b40 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b02      	cmp	r3, #2
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e0fd      	b.n	8001586 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800138a:	4b81      	ldr	r3, [pc, #516]	; (8001590 <HAL_RCC_OscConfig+0x4d4>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001392:	2b00      	cmp	r3, #0
 8001394:	d0f0      	beq.n	8001378 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d106      	bne.n	80013ac <HAL_RCC_OscConfig+0x2f0>
 800139e:	4b7d      	ldr	r3, [pc, #500]	; (8001594 <HAL_RCC_OscConfig+0x4d8>)
 80013a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013a2:	4a7c      	ldr	r2, [pc, #496]	; (8001594 <HAL_RCC_OscConfig+0x4d8>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	6713      	str	r3, [r2, #112]	; 0x70
 80013aa:	e01c      	b.n	80013e6 <HAL_RCC_OscConfig+0x32a>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	2b05      	cmp	r3, #5
 80013b2:	d10c      	bne.n	80013ce <HAL_RCC_OscConfig+0x312>
 80013b4:	4b77      	ldr	r3, [pc, #476]	; (8001594 <HAL_RCC_OscConfig+0x4d8>)
 80013b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013b8:	4a76      	ldr	r2, [pc, #472]	; (8001594 <HAL_RCC_OscConfig+0x4d8>)
 80013ba:	f043 0304 	orr.w	r3, r3, #4
 80013be:	6713      	str	r3, [r2, #112]	; 0x70
 80013c0:	4b74      	ldr	r3, [pc, #464]	; (8001594 <HAL_RCC_OscConfig+0x4d8>)
 80013c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013c4:	4a73      	ldr	r2, [pc, #460]	; (8001594 <HAL_RCC_OscConfig+0x4d8>)
 80013c6:	f043 0301 	orr.w	r3, r3, #1
 80013ca:	6713      	str	r3, [r2, #112]	; 0x70
 80013cc:	e00b      	b.n	80013e6 <HAL_RCC_OscConfig+0x32a>
 80013ce:	4b71      	ldr	r3, [pc, #452]	; (8001594 <HAL_RCC_OscConfig+0x4d8>)
 80013d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013d2:	4a70      	ldr	r2, [pc, #448]	; (8001594 <HAL_RCC_OscConfig+0x4d8>)
 80013d4:	f023 0301 	bic.w	r3, r3, #1
 80013d8:	6713      	str	r3, [r2, #112]	; 0x70
 80013da:	4b6e      	ldr	r3, [pc, #440]	; (8001594 <HAL_RCC_OscConfig+0x4d8>)
 80013dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013de:	4a6d      	ldr	r2, [pc, #436]	; (8001594 <HAL_RCC_OscConfig+0x4d8>)
 80013e0:	f023 0304 	bic.w	r3, r3, #4
 80013e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d015      	beq.n	800141a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ee:	f7ff fba7 	bl	8000b40 <HAL_GetTick>
 80013f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013f4:	e00a      	b.n	800140c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013f6:	f7ff fba3 	bl	8000b40 <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	f241 3288 	movw	r2, #5000	; 0x1388
 8001404:	4293      	cmp	r3, r2
 8001406:	d901      	bls.n	800140c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e0bc      	b.n	8001586 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800140c:	4b61      	ldr	r3, [pc, #388]	; (8001594 <HAL_RCC_OscConfig+0x4d8>)
 800140e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d0ee      	beq.n	80013f6 <HAL_RCC_OscConfig+0x33a>
 8001418:	e014      	b.n	8001444 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800141a:	f7ff fb91 	bl	8000b40 <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001420:	e00a      	b.n	8001438 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001422:	f7ff fb8d 	bl	8000b40 <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001430:	4293      	cmp	r3, r2
 8001432:	d901      	bls.n	8001438 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e0a6      	b.n	8001586 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001438:	4b56      	ldr	r3, [pc, #344]	; (8001594 <HAL_RCC_OscConfig+0x4d8>)
 800143a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800143c:	f003 0302 	and.w	r3, r3, #2
 8001440:	2b00      	cmp	r3, #0
 8001442:	d1ee      	bne.n	8001422 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001444:	7dfb      	ldrb	r3, [r7, #23]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d105      	bne.n	8001456 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800144a:	4b52      	ldr	r3, [pc, #328]	; (8001594 <HAL_RCC_OscConfig+0x4d8>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	4a51      	ldr	r2, [pc, #324]	; (8001594 <HAL_RCC_OscConfig+0x4d8>)
 8001450:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001454:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	699b      	ldr	r3, [r3, #24]
 800145a:	2b00      	cmp	r3, #0
 800145c:	f000 8092 	beq.w	8001584 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001460:	4b4c      	ldr	r3, [pc, #304]	; (8001594 <HAL_RCC_OscConfig+0x4d8>)
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f003 030c 	and.w	r3, r3, #12
 8001468:	2b08      	cmp	r3, #8
 800146a:	d05c      	beq.n	8001526 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	2b02      	cmp	r3, #2
 8001472:	d141      	bne.n	80014f8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001474:	4b48      	ldr	r3, [pc, #288]	; (8001598 <HAL_RCC_OscConfig+0x4dc>)
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147a:	f7ff fb61 	bl	8000b40 <HAL_GetTick>
 800147e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001480:	e008      	b.n	8001494 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001482:	f7ff fb5d 	bl	8000b40 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d901      	bls.n	8001494 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e078      	b.n	8001586 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001494:	4b3f      	ldr	r3, [pc, #252]	; (8001594 <HAL_RCC_OscConfig+0x4d8>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d1f0      	bne.n	8001482 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	69da      	ldr	r2, [r3, #28]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6a1b      	ldr	r3, [r3, #32]
 80014a8:	431a      	orrs	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ae:	019b      	lsls	r3, r3, #6
 80014b0:	431a      	orrs	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b6:	085b      	lsrs	r3, r3, #1
 80014b8:	3b01      	subs	r3, #1
 80014ba:	041b      	lsls	r3, r3, #16
 80014bc:	431a      	orrs	r2, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c2:	061b      	lsls	r3, r3, #24
 80014c4:	4933      	ldr	r1, [pc, #204]	; (8001594 <HAL_RCC_OscConfig+0x4d8>)
 80014c6:	4313      	orrs	r3, r2
 80014c8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014ca:	4b33      	ldr	r3, [pc, #204]	; (8001598 <HAL_RCC_OscConfig+0x4dc>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d0:	f7ff fb36 	bl	8000b40 <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014d8:	f7ff fb32 	bl	8000b40 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e04d      	b.n	8001586 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ea:	4b2a      	ldr	r3, [pc, #168]	; (8001594 <HAL_RCC_OscConfig+0x4d8>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d0f0      	beq.n	80014d8 <HAL_RCC_OscConfig+0x41c>
 80014f6:	e045      	b.n	8001584 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014f8:	4b27      	ldr	r3, [pc, #156]	; (8001598 <HAL_RCC_OscConfig+0x4dc>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fe:	f7ff fb1f 	bl	8000b40 <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001506:	f7ff fb1b 	bl	8000b40 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e036      	b.n	8001586 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001518:	4b1e      	ldr	r3, [pc, #120]	; (8001594 <HAL_RCC_OscConfig+0x4d8>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d1f0      	bne.n	8001506 <HAL_RCC_OscConfig+0x44a>
 8001524:	e02e      	b.n	8001584 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d101      	bne.n	8001532 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e029      	b.n	8001586 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001532:	4b18      	ldr	r3, [pc, #96]	; (8001594 <HAL_RCC_OscConfig+0x4d8>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	69db      	ldr	r3, [r3, #28]
 8001542:	429a      	cmp	r2, r3
 8001544:	d11c      	bne.n	8001580 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001550:	429a      	cmp	r2, r3
 8001552:	d115      	bne.n	8001580 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001554:	68fa      	ldr	r2, [r7, #12]
 8001556:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800155a:	4013      	ands	r3, r2
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001560:	4293      	cmp	r3, r2
 8001562:	d10d      	bne.n	8001580 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800156e:	429a      	cmp	r2, r3
 8001570:	d106      	bne.n	8001580 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800157c:	429a      	cmp	r2, r3
 800157e:	d001      	beq.n	8001584 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e000      	b.n	8001586 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3718      	adds	r7, #24
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40007000 	.word	0x40007000
 8001594:	40023800 	.word	0x40023800
 8001598:	42470060 	.word	0x42470060

0800159c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d101      	bne.n	80015b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e0cc      	b.n	800174a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015b0:	4b68      	ldr	r3, [pc, #416]	; (8001754 <HAL_RCC_ClockConfig+0x1b8>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 030f 	and.w	r3, r3, #15
 80015b8:	683a      	ldr	r2, [r7, #0]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d90c      	bls.n	80015d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015be:	4b65      	ldr	r3, [pc, #404]	; (8001754 <HAL_RCC_ClockConfig+0x1b8>)
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	b2d2      	uxtb	r2, r2
 80015c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015c6:	4b63      	ldr	r3, [pc, #396]	; (8001754 <HAL_RCC_ClockConfig+0x1b8>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 030f 	and.w	r3, r3, #15
 80015ce:	683a      	ldr	r2, [r7, #0]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d001      	beq.n	80015d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e0b8      	b.n	800174a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d020      	beq.n	8001626 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0304 	and.w	r3, r3, #4
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d005      	beq.n	80015fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015f0:	4b59      	ldr	r3, [pc, #356]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	4a58      	ldr	r2, [pc, #352]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 80015f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0308 	and.w	r3, r3, #8
 8001604:	2b00      	cmp	r3, #0
 8001606:	d005      	beq.n	8001614 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001608:	4b53      	ldr	r3, [pc, #332]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	4a52      	ldr	r2, [pc, #328]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 800160e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001612:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001614:	4b50      	ldr	r3, [pc, #320]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	494d      	ldr	r1, [pc, #308]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 8001622:	4313      	orrs	r3, r2
 8001624:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	2b00      	cmp	r3, #0
 8001630:	d044      	beq.n	80016bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d107      	bne.n	800164a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800163a:	4b47      	ldr	r3, [pc, #284]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d119      	bne.n	800167a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e07f      	b.n	800174a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	2b02      	cmp	r3, #2
 8001650:	d003      	beq.n	800165a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001656:	2b03      	cmp	r3, #3
 8001658:	d107      	bne.n	800166a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800165a:	4b3f      	ldr	r3, [pc, #252]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d109      	bne.n	800167a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e06f      	b.n	800174a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800166a:	4b3b      	ldr	r3, [pc, #236]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d101      	bne.n	800167a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e067      	b.n	800174a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800167a:	4b37      	ldr	r3, [pc, #220]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f023 0203 	bic.w	r2, r3, #3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	4934      	ldr	r1, [pc, #208]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 8001688:	4313      	orrs	r3, r2
 800168a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800168c:	f7ff fa58 	bl	8000b40 <HAL_GetTick>
 8001690:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001692:	e00a      	b.n	80016aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001694:	f7ff fa54 	bl	8000b40 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e04f      	b.n	800174a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016aa:	4b2b      	ldr	r3, [pc, #172]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f003 020c 	and.w	r2, r3, #12
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d1eb      	bne.n	8001694 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016bc:	4b25      	ldr	r3, [pc, #148]	; (8001754 <HAL_RCC_ClockConfig+0x1b8>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 030f 	and.w	r3, r3, #15
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d20c      	bcs.n	80016e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ca:	4b22      	ldr	r3, [pc, #136]	; (8001754 <HAL_RCC_ClockConfig+0x1b8>)
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	b2d2      	uxtb	r2, r2
 80016d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016d2:	4b20      	ldr	r3, [pc, #128]	; (8001754 <HAL_RCC_ClockConfig+0x1b8>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 030f 	and.w	r3, r3, #15
 80016da:	683a      	ldr	r2, [r7, #0]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d001      	beq.n	80016e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e032      	b.n	800174a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0304 	and.w	r3, r3, #4
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d008      	beq.n	8001702 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016f0:	4b19      	ldr	r3, [pc, #100]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	4916      	ldr	r1, [pc, #88]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 80016fe:	4313      	orrs	r3, r2
 8001700:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0308 	and.w	r3, r3, #8
 800170a:	2b00      	cmp	r3, #0
 800170c:	d009      	beq.n	8001722 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800170e:	4b12      	ldr	r3, [pc, #72]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	691b      	ldr	r3, [r3, #16]
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	490e      	ldr	r1, [pc, #56]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 800171e:	4313      	orrs	r3, r2
 8001720:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001722:	f000 f821 	bl	8001768 <HAL_RCC_GetSysClockFreq>
 8001726:	4601      	mov	r1, r0
 8001728:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	091b      	lsrs	r3, r3, #4
 800172e:	f003 030f 	and.w	r3, r3, #15
 8001732:	4a0a      	ldr	r2, [pc, #40]	; (800175c <HAL_RCC_ClockConfig+0x1c0>)
 8001734:	5cd3      	ldrb	r3, [r2, r3]
 8001736:	fa21 f303 	lsr.w	r3, r1, r3
 800173a:	4a09      	ldr	r2, [pc, #36]	; (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 800173c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800173e:	4b09      	ldr	r3, [pc, #36]	; (8001764 <HAL_RCC_ClockConfig+0x1c8>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff f9b8 	bl	8000ab8 <HAL_InitTick>

  return HAL_OK;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40023c00 	.word	0x40023c00
 8001758:	40023800 	.word	0x40023800
 800175c:	08002b78 	.word	0x08002b78
 8001760:	20000000 	.word	0x20000000
 8001764:	20000004 	.word	0x20000004

08001768 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800176e:	2300      	movs	r3, #0
 8001770:	607b      	str	r3, [r7, #4]
 8001772:	2300      	movs	r3, #0
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	2300      	movs	r3, #0
 8001778:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800177a:	2300      	movs	r3, #0
 800177c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800177e:	4b63      	ldr	r3, [pc, #396]	; (800190c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f003 030c 	and.w	r3, r3, #12
 8001786:	2b04      	cmp	r3, #4
 8001788:	d007      	beq.n	800179a <HAL_RCC_GetSysClockFreq+0x32>
 800178a:	2b08      	cmp	r3, #8
 800178c:	d008      	beq.n	80017a0 <HAL_RCC_GetSysClockFreq+0x38>
 800178e:	2b00      	cmp	r3, #0
 8001790:	f040 80b4 	bne.w	80018fc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001794:	4b5e      	ldr	r3, [pc, #376]	; (8001910 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001796:	60bb      	str	r3, [r7, #8]
       break;
 8001798:	e0b3      	b.n	8001902 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800179a:	4b5e      	ldr	r3, [pc, #376]	; (8001914 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800179c:	60bb      	str	r3, [r7, #8]
      break;
 800179e:	e0b0      	b.n	8001902 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017a0:	4b5a      	ldr	r3, [pc, #360]	; (800190c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017a8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017aa:	4b58      	ldr	r3, [pc, #352]	; (800190c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d04a      	beq.n	800184c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017b6:	4b55      	ldr	r3, [pc, #340]	; (800190c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	099b      	lsrs	r3, r3, #6
 80017bc:	f04f 0400 	mov.w	r4, #0
 80017c0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80017c4:	f04f 0200 	mov.w	r2, #0
 80017c8:	ea03 0501 	and.w	r5, r3, r1
 80017cc:	ea04 0602 	and.w	r6, r4, r2
 80017d0:	4629      	mov	r1, r5
 80017d2:	4632      	mov	r2, r6
 80017d4:	f04f 0300 	mov.w	r3, #0
 80017d8:	f04f 0400 	mov.w	r4, #0
 80017dc:	0154      	lsls	r4, r2, #5
 80017de:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80017e2:	014b      	lsls	r3, r1, #5
 80017e4:	4619      	mov	r1, r3
 80017e6:	4622      	mov	r2, r4
 80017e8:	1b49      	subs	r1, r1, r5
 80017ea:	eb62 0206 	sbc.w	r2, r2, r6
 80017ee:	f04f 0300 	mov.w	r3, #0
 80017f2:	f04f 0400 	mov.w	r4, #0
 80017f6:	0194      	lsls	r4, r2, #6
 80017f8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80017fc:	018b      	lsls	r3, r1, #6
 80017fe:	1a5b      	subs	r3, r3, r1
 8001800:	eb64 0402 	sbc.w	r4, r4, r2
 8001804:	f04f 0100 	mov.w	r1, #0
 8001808:	f04f 0200 	mov.w	r2, #0
 800180c:	00e2      	lsls	r2, r4, #3
 800180e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001812:	00d9      	lsls	r1, r3, #3
 8001814:	460b      	mov	r3, r1
 8001816:	4614      	mov	r4, r2
 8001818:	195b      	adds	r3, r3, r5
 800181a:	eb44 0406 	adc.w	r4, r4, r6
 800181e:	f04f 0100 	mov.w	r1, #0
 8001822:	f04f 0200 	mov.w	r2, #0
 8001826:	0262      	lsls	r2, r4, #9
 8001828:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800182c:	0259      	lsls	r1, r3, #9
 800182e:	460b      	mov	r3, r1
 8001830:	4614      	mov	r4, r2
 8001832:	4618      	mov	r0, r3
 8001834:	4621      	mov	r1, r4
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f04f 0400 	mov.w	r4, #0
 800183c:	461a      	mov	r2, r3
 800183e:	4623      	mov	r3, r4
 8001840:	f7fe fcc6 	bl	80001d0 <__aeabi_uldivmod>
 8001844:	4603      	mov	r3, r0
 8001846:	460c      	mov	r4, r1
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	e049      	b.n	80018e0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800184c:	4b2f      	ldr	r3, [pc, #188]	; (800190c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	099b      	lsrs	r3, r3, #6
 8001852:	f04f 0400 	mov.w	r4, #0
 8001856:	f240 11ff 	movw	r1, #511	; 0x1ff
 800185a:	f04f 0200 	mov.w	r2, #0
 800185e:	ea03 0501 	and.w	r5, r3, r1
 8001862:	ea04 0602 	and.w	r6, r4, r2
 8001866:	4629      	mov	r1, r5
 8001868:	4632      	mov	r2, r6
 800186a:	f04f 0300 	mov.w	r3, #0
 800186e:	f04f 0400 	mov.w	r4, #0
 8001872:	0154      	lsls	r4, r2, #5
 8001874:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001878:	014b      	lsls	r3, r1, #5
 800187a:	4619      	mov	r1, r3
 800187c:	4622      	mov	r2, r4
 800187e:	1b49      	subs	r1, r1, r5
 8001880:	eb62 0206 	sbc.w	r2, r2, r6
 8001884:	f04f 0300 	mov.w	r3, #0
 8001888:	f04f 0400 	mov.w	r4, #0
 800188c:	0194      	lsls	r4, r2, #6
 800188e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001892:	018b      	lsls	r3, r1, #6
 8001894:	1a5b      	subs	r3, r3, r1
 8001896:	eb64 0402 	sbc.w	r4, r4, r2
 800189a:	f04f 0100 	mov.w	r1, #0
 800189e:	f04f 0200 	mov.w	r2, #0
 80018a2:	00e2      	lsls	r2, r4, #3
 80018a4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80018a8:	00d9      	lsls	r1, r3, #3
 80018aa:	460b      	mov	r3, r1
 80018ac:	4614      	mov	r4, r2
 80018ae:	195b      	adds	r3, r3, r5
 80018b0:	eb44 0406 	adc.w	r4, r4, r6
 80018b4:	f04f 0100 	mov.w	r1, #0
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	02a2      	lsls	r2, r4, #10
 80018be:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80018c2:	0299      	lsls	r1, r3, #10
 80018c4:	460b      	mov	r3, r1
 80018c6:	4614      	mov	r4, r2
 80018c8:	4618      	mov	r0, r3
 80018ca:	4621      	mov	r1, r4
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f04f 0400 	mov.w	r4, #0
 80018d2:	461a      	mov	r2, r3
 80018d4:	4623      	mov	r3, r4
 80018d6:	f7fe fc7b 	bl	80001d0 <__aeabi_uldivmod>
 80018da:	4603      	mov	r3, r0
 80018dc:	460c      	mov	r4, r1
 80018de:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018e0:	4b0a      	ldr	r3, [pc, #40]	; (800190c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	0c1b      	lsrs	r3, r3, #16
 80018e6:	f003 0303 	and.w	r3, r3, #3
 80018ea:	3301      	adds	r3, #1
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80018f0:	68fa      	ldr	r2, [r7, #12]
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f8:	60bb      	str	r3, [r7, #8]
      break;
 80018fa:	e002      	b.n	8001902 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018fc:	4b04      	ldr	r3, [pc, #16]	; (8001910 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80018fe:	60bb      	str	r3, [r7, #8]
      break;
 8001900:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001902:	68bb      	ldr	r3, [r7, #8]
}
 8001904:	4618      	mov	r0, r3
 8001906:	3714      	adds	r7, #20
 8001908:	46bd      	mov	sp, r7
 800190a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800190c:	40023800 	.word	0x40023800
 8001910:	00f42400 	.word	0x00f42400
 8001914:	007a1200 	.word	0x007a1200

08001918 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f103 0208 	add.w	r2, r3, #8
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f04f 32ff 	mov.w	r2, #4294967295
 8001930:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f103 0208 	add.w	r2, r3, #8
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f103 0208 	add.w	r2, r3, #8
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001972:	b480      	push	{r7}
 8001974:	b085      	sub	sp, #20
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
 800197a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	68fa      	ldr	r2, [r7, #12]
 8001986:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	689a      	ldr	r2, [r3, #8]
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	683a      	ldr	r2, [r7, #0]
 8001996:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	1c5a      	adds	r2, r3, #1
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	601a      	str	r2, [r3, #0]
}
 80019ae:	bf00      	nop
 80019b0:	3714      	adds	r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80019ba:	b480      	push	{r7}
 80019bc:	b085      	sub	sp, #20
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	6892      	ldr	r2, [r2, #8]
 80019d0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	6852      	ldr	r2, [r2, #4]
 80019da:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d103      	bne.n	80019ee <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689a      	ldr	r2, [r3, #8]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	1e5a      	subs	r2, r3, #1
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3714      	adds	r7, #20
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b08e      	sub	sp, #56	; 0x38
 8001a12:	af04      	add	r7, sp, #16
 8001a14:	60f8      	str	r0, [r7, #12]
 8001a16:	60b9      	str	r1, [r7, #8]
 8001a18:	607a      	str	r2, [r7, #4]
 8001a1a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d109      	bne.n	8001a36 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a26:	f383 8811 	msr	BASEPRI, r3
 8001a2a:	f3bf 8f6f 	isb	sy
 8001a2e:	f3bf 8f4f 	dsb	sy
 8001a32:	623b      	str	r3, [r7, #32]
 8001a34:	e7fe      	b.n	8001a34 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8001a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d109      	bne.n	8001a50 <xTaskCreateStatic+0x42>
 8001a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a40:	f383 8811 	msr	BASEPRI, r3
 8001a44:	f3bf 8f6f 	isb	sy
 8001a48:	f3bf 8f4f 	dsb	sy
 8001a4c:	61fb      	str	r3, [r7, #28]
 8001a4e:	e7fe      	b.n	8001a4e <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001a50:	2354      	movs	r3, #84	; 0x54
 8001a52:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	2b54      	cmp	r3, #84	; 0x54
 8001a58:	d009      	beq.n	8001a6e <xTaskCreateStatic+0x60>
 8001a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a5e:	f383 8811 	msr	BASEPRI, r3
 8001a62:	f3bf 8f6f 	isb	sy
 8001a66:	f3bf 8f4f 	dsb	sy
 8001a6a:	61bb      	str	r3, [r7, #24]
 8001a6c:	e7fe      	b.n	8001a6c <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8001a6e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d01e      	beq.n	8001ab4 <xTaskCreateStatic+0xa6>
 8001a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d01b      	beq.n	8001ab4 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a7e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a84:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a88:	2202      	movs	r2, #2
 8001a8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001a8e:	2300      	movs	r3, #0
 8001a90:	9303      	str	r3, [sp, #12]
 8001a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a94:	9302      	str	r3, [sp, #8]
 8001a96:	f107 0314 	add.w	r3, r7, #20
 8001a9a:	9301      	str	r3, [sp, #4]
 8001a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a9e:	9300      	str	r3, [sp, #0]
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	68b9      	ldr	r1, [r7, #8]
 8001aa6:	68f8      	ldr	r0, [r7, #12]
 8001aa8:	f000 f850 	bl	8001b4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001aac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001aae:	f000 f8d3 	bl	8001c58 <prvAddNewTaskToReadyList>
 8001ab2:	e001      	b.n	8001ab8 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001ab8:	697b      	ldr	r3, [r7, #20]
	}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3728      	adds	r7, #40	; 0x28
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b08c      	sub	sp, #48	; 0x30
 8001ac6:	af04      	add	r7, sp, #16
 8001ac8:	60f8      	str	r0, [r7, #12]
 8001aca:	60b9      	str	r1, [r7, #8]
 8001acc:	603b      	str	r3, [r7, #0]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001ad2:	88fb      	ldrh	r3, [r7, #6]
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f000 fe34 	bl	8002744 <pvPortMalloc>
 8001adc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d00e      	beq.n	8001b02 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001ae4:	2054      	movs	r0, #84	; 0x54
 8001ae6:	f000 fe2d 	bl	8002744 <pvPortMalloc>
 8001aea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	697a      	ldr	r2, [r7, #20]
 8001af6:	631a      	str	r2, [r3, #48]	; 0x30
 8001af8:	e005      	b.n	8001b06 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001afa:	6978      	ldr	r0, [r7, #20]
 8001afc:	f000 fee4 	bl	80028c8 <vPortFree>
 8001b00:	e001      	b.n	8001b06 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001b02:	2300      	movs	r3, #0
 8001b04:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d017      	beq.n	8001b3c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001b14:	88fa      	ldrh	r2, [r7, #6]
 8001b16:	2300      	movs	r3, #0
 8001b18:	9303      	str	r3, [sp, #12]
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	9302      	str	r3, [sp, #8]
 8001b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b20:	9301      	str	r3, [sp, #4]
 8001b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b24:	9300      	str	r3, [sp, #0]
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	68b9      	ldr	r1, [r7, #8]
 8001b2a:	68f8      	ldr	r0, [r7, #12]
 8001b2c:	f000 f80e 	bl	8001b4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001b30:	69f8      	ldr	r0, [r7, #28]
 8001b32:	f000 f891 	bl	8001c58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001b36:	2301      	movs	r3, #1
 8001b38:	61bb      	str	r3, [r7, #24]
 8001b3a:	e002      	b.n	8001b42 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b40:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001b42:	69bb      	ldr	r3, [r7, #24]
	}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3720      	adds	r7, #32
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b088      	sub	sp, #32
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
 8001b58:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b64:	3b01      	subs	r3, #1
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	4413      	add	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	f023 0307 	bic.w	r3, r3, #7
 8001b72:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	f003 0307 	and.w	r3, r3, #7
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d009      	beq.n	8001b92 <prvInitialiseNewTask+0x46>
 8001b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b82:	f383 8811 	msr	BASEPRI, r3
 8001b86:	f3bf 8f6f 	isb	sy
 8001b8a:	f3bf 8f4f 	dsb	sy
 8001b8e:	617b      	str	r3, [r7, #20]
 8001b90:	e7fe      	b.n	8001b90 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d01f      	beq.n	8001bd8 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001b98:	2300      	movs	r3, #0
 8001b9a:	61fb      	str	r3, [r7, #28]
 8001b9c:	e012      	b.n	8001bc4 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001b9e:	68ba      	ldr	r2, [r7, #8]
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	7819      	ldrb	r1, [r3, #0]
 8001ba6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	4413      	add	r3, r2
 8001bac:	3334      	adds	r3, #52	; 0x34
 8001bae:	460a      	mov	r2, r1
 8001bb0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001bb2:	68ba      	ldr	r2, [r7, #8]
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d006      	beq.n	8001bcc <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	61fb      	str	r3, [r7, #28]
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	2b0f      	cmp	r3, #15
 8001bc8:	d9e9      	bls.n	8001b9e <prvInitialiseNewTask+0x52>
 8001bca:	e000      	b.n	8001bce <prvInitialiseNewTask+0x82>
			{
				break;
 8001bcc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bd6:	e003      	b.n	8001be0 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001be2:	2b06      	cmp	r3, #6
 8001be4:	d901      	bls.n	8001bea <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001be6:	2306      	movs	r3, #6
 8001be8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001bee:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001bf4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bfe:	3304      	adds	r3, #4
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff fea9 	bl	8001958 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c08:	3318      	adds	r3, #24
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff fea4 	bl	8001958 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c14:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c18:	f1c3 0207 	rsb	r2, r3, #7
 8001c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c1e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c24:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c28:	2200      	movs	r2, #0
 8001c2a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	68f9      	ldr	r1, [r7, #12]
 8001c38:	69b8      	ldr	r0, [r7, #24]
 8001c3a:	f000 fb81 	bl	8002340 <pxPortInitialiseStack>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c42:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8001c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d002      	beq.n	8001c50 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c4e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001c50:	bf00      	nop
 8001c52:	3720      	adds	r7, #32
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001c60:	f000 fc94 	bl	800258c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001c64:	4b2a      	ldr	r3, [pc, #168]	; (8001d10 <prvAddNewTaskToReadyList+0xb8>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	4a29      	ldr	r2, [pc, #164]	; (8001d10 <prvAddNewTaskToReadyList+0xb8>)
 8001c6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001c6e:	4b29      	ldr	r3, [pc, #164]	; (8001d14 <prvAddNewTaskToReadyList+0xbc>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d109      	bne.n	8001c8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001c76:	4a27      	ldr	r2, [pc, #156]	; (8001d14 <prvAddNewTaskToReadyList+0xbc>)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001c7c:	4b24      	ldr	r3, [pc, #144]	; (8001d10 <prvAddNewTaskToReadyList+0xb8>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d110      	bne.n	8001ca6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001c84:	f000 fa84 	bl	8002190 <prvInitialiseTaskLists>
 8001c88:	e00d      	b.n	8001ca6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001c8a:	4b23      	ldr	r3, [pc, #140]	; (8001d18 <prvAddNewTaskToReadyList+0xc0>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d109      	bne.n	8001ca6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001c92:	4b20      	ldr	r3, [pc, #128]	; (8001d14 <prvAddNewTaskToReadyList+0xbc>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d802      	bhi.n	8001ca6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001ca0:	4a1c      	ldr	r2, [pc, #112]	; (8001d14 <prvAddNewTaskToReadyList+0xbc>)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001ca6:	4b1d      	ldr	r3, [pc, #116]	; (8001d1c <prvAddNewTaskToReadyList+0xc4>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	3301      	adds	r3, #1
 8001cac:	4a1b      	ldr	r2, [pc, #108]	; (8001d1c <prvAddNewTaskToReadyList+0xc4>)
 8001cae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	409a      	lsls	r2, r3
 8001cb8:	4b19      	ldr	r3, [pc, #100]	; (8001d20 <prvAddNewTaskToReadyList+0xc8>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	4a18      	ldr	r2, [pc, #96]	; (8001d20 <prvAddNewTaskToReadyList+0xc8>)
 8001cc0:	6013      	str	r3, [r2, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	4413      	add	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4a15      	ldr	r2, [pc, #84]	; (8001d24 <prvAddNewTaskToReadyList+0xcc>)
 8001cd0:	441a      	add	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4610      	mov	r0, r2
 8001cda:	f7ff fe4a 	bl	8001972 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001cde:	f000 fc83 	bl	80025e8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001ce2:	4b0d      	ldr	r3, [pc, #52]	; (8001d18 <prvAddNewTaskToReadyList+0xc0>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00e      	beq.n	8001d08 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001cea:	4b0a      	ldr	r3, [pc, #40]	; (8001d14 <prvAddNewTaskToReadyList+0xbc>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d207      	bcs.n	8001d08 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001cf8:	4b0b      	ldr	r3, [pc, #44]	; (8001d28 <prvAddNewTaskToReadyList+0xd0>)
 8001cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	f3bf 8f4f 	dsb	sy
 8001d04:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001d08:	bf00      	nop
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	20000388 	.word	0x20000388
 8001d14:	20000288 	.word	0x20000288
 8001d18:	20000394 	.word	0x20000394
 8001d1c:	200003a4 	.word	0x200003a4
 8001d20:	20000390 	.word	0x20000390
 8001d24:	2000028c 	.word	0x2000028c
 8001d28:	e000ed04 	.word	0xe000ed04

08001d2c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b08a      	sub	sp, #40	; 0x28
 8001d30:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001d36:	2300      	movs	r3, #0
 8001d38:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001d3a:	463a      	mov	r2, r7
 8001d3c:	1d39      	adds	r1, r7, #4
 8001d3e:	f107 0308 	add.w	r3, r7, #8
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7fe fbc4 	bl	80004d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001d48:	6839      	ldr	r1, [r7, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	68ba      	ldr	r2, [r7, #8]
 8001d4e:	9202      	str	r2, [sp, #8]
 8001d50:	9301      	str	r3, [sp, #4]
 8001d52:	2300      	movs	r3, #0
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	2300      	movs	r3, #0
 8001d58:	460a      	mov	r2, r1
 8001d5a:	491d      	ldr	r1, [pc, #116]	; (8001dd0 <vTaskStartScheduler+0xa4>)
 8001d5c:	481d      	ldr	r0, [pc, #116]	; (8001dd4 <vTaskStartScheduler+0xa8>)
 8001d5e:	f7ff fe56 	bl	8001a0e <xTaskCreateStatic>
 8001d62:	4602      	mov	r2, r0
 8001d64:	4b1c      	ldr	r3, [pc, #112]	; (8001dd8 <vTaskStartScheduler+0xac>)
 8001d66:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001d68:	4b1b      	ldr	r3, [pc, #108]	; (8001dd8 <vTaskStartScheduler+0xac>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d002      	beq.n	8001d76 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8001d70:	2301      	movs	r3, #1
 8001d72:	617b      	str	r3, [r7, #20]
 8001d74:	e001      	b.n	8001d7a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d115      	bne.n	8001dac <vTaskStartScheduler+0x80>
 8001d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d84:	f383 8811 	msr	BASEPRI, r3
 8001d88:	f3bf 8f6f 	isb	sy
 8001d8c:	f3bf 8f4f 	dsb	sy
 8001d90:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001d92:	4b12      	ldr	r3, [pc, #72]	; (8001ddc <vTaskStartScheduler+0xb0>)
 8001d94:	f04f 32ff 	mov.w	r2, #4294967295
 8001d98:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001d9a:	4b11      	ldr	r3, [pc, #68]	; (8001de0 <vTaskStartScheduler+0xb4>)
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001da0:	4b10      	ldr	r3, [pc, #64]	; (8001de4 <vTaskStartScheduler+0xb8>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001da6:	f000 fb53 	bl	8002450 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001daa:	e00d      	b.n	8001dc8 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db2:	d109      	bne.n	8001dc8 <vTaskStartScheduler+0x9c>
 8001db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001db8:	f383 8811 	msr	BASEPRI, r3
 8001dbc:	f3bf 8f6f 	isb	sy
 8001dc0:	f3bf 8f4f 	dsb	sy
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	e7fe      	b.n	8001dc6 <vTaskStartScheduler+0x9a>
}
 8001dc8:	bf00      	nop
 8001dca:	3718      	adds	r7, #24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	08002b70 	.word	0x08002b70
 8001dd4:	08002161 	.word	0x08002161
 8001dd8:	200003ac 	.word	0x200003ac
 8001ddc:	200003a8 	.word	0x200003a8
 8001de0:	20000394 	.word	0x20000394
 8001de4:	2000038c 	.word	0x2000038c

08001de8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001dec:	4b04      	ldr	r3, [pc, #16]	; (8001e00 <vTaskSuspendAll+0x18>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	3301      	adds	r3, #1
 8001df2:	4a03      	ldr	r2, [pc, #12]	; (8001e00 <vTaskSuspendAll+0x18>)
 8001df4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8001df6:	bf00      	nop
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	200003b0 	.word	0x200003b0

08001e04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001e12:	4b41      	ldr	r3, [pc, #260]	; (8001f18 <xTaskResumeAll+0x114>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d109      	bne.n	8001e2e <xTaskResumeAll+0x2a>
 8001e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e1e:	f383 8811 	msr	BASEPRI, r3
 8001e22:	f3bf 8f6f 	isb	sy
 8001e26:	f3bf 8f4f 	dsb	sy
 8001e2a:	603b      	str	r3, [r7, #0]
 8001e2c:	e7fe      	b.n	8001e2c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001e2e:	f000 fbad 	bl	800258c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001e32:	4b39      	ldr	r3, [pc, #228]	; (8001f18 <xTaskResumeAll+0x114>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	3b01      	subs	r3, #1
 8001e38:	4a37      	ldr	r2, [pc, #220]	; (8001f18 <xTaskResumeAll+0x114>)
 8001e3a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e3c:	4b36      	ldr	r3, [pc, #216]	; (8001f18 <xTaskResumeAll+0x114>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d161      	bne.n	8001f08 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001e44:	4b35      	ldr	r3, [pc, #212]	; (8001f1c <xTaskResumeAll+0x118>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d05d      	beq.n	8001f08 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001e4c:	e02e      	b.n	8001eac <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e4e:	4b34      	ldr	r3, [pc, #208]	; (8001f20 <xTaskResumeAll+0x11c>)
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	3318      	adds	r3, #24
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff fdad 	bl	80019ba <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	3304      	adds	r3, #4
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff fda8 	bl	80019ba <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6e:	2201      	movs	r2, #1
 8001e70:	409a      	lsls	r2, r3
 8001e72:	4b2c      	ldr	r3, [pc, #176]	; (8001f24 <xTaskResumeAll+0x120>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	4a2a      	ldr	r2, [pc, #168]	; (8001f24 <xTaskResumeAll+0x120>)
 8001e7a:	6013      	str	r3, [r2, #0]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e80:	4613      	mov	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	4413      	add	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4a27      	ldr	r2, [pc, #156]	; (8001f28 <xTaskResumeAll+0x124>)
 8001e8a:	441a      	add	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	3304      	adds	r3, #4
 8001e90:	4619      	mov	r1, r3
 8001e92:	4610      	mov	r0, r2
 8001e94:	f7ff fd6d 	bl	8001972 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e9c:	4b23      	ldr	r3, [pc, #140]	; (8001f2c <xTaskResumeAll+0x128>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d302      	bcc.n	8001eac <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8001ea6:	4b22      	ldr	r3, [pc, #136]	; (8001f30 <xTaskResumeAll+0x12c>)
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001eac:	4b1c      	ldr	r3, [pc, #112]	; (8001f20 <xTaskResumeAll+0x11c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d1cc      	bne.n	8001e4e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001eba:	f000 fa03 	bl	80022c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001ebe:	4b1d      	ldr	r3, [pc, #116]	; (8001f34 <xTaskResumeAll+0x130>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d010      	beq.n	8001eec <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001eca:	f000 f837 	bl	8001f3c <xTaskIncrementTick>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d002      	beq.n	8001eda <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8001ed4:	4b16      	ldr	r3, [pc, #88]	; (8001f30 <xTaskResumeAll+0x12c>)
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	3b01      	subs	r3, #1
 8001ede:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1f1      	bne.n	8001eca <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8001ee6:	4b13      	ldr	r3, [pc, #76]	; (8001f34 <xTaskResumeAll+0x130>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001eec:	4b10      	ldr	r3, [pc, #64]	; (8001f30 <xTaskResumeAll+0x12c>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d009      	beq.n	8001f08 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001ef8:	4b0f      	ldr	r3, [pc, #60]	; (8001f38 <xTaskResumeAll+0x134>)
 8001efa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	f3bf 8f4f 	dsb	sy
 8001f04:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001f08:	f000 fb6e 	bl	80025e8 <vPortExitCritical>

	return xAlreadyYielded;
 8001f0c:	68bb      	ldr	r3, [r7, #8]
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	200003b0 	.word	0x200003b0
 8001f1c:	20000388 	.word	0x20000388
 8001f20:	20000348 	.word	0x20000348
 8001f24:	20000390 	.word	0x20000390
 8001f28:	2000028c 	.word	0x2000028c
 8001f2c:	20000288 	.word	0x20000288
 8001f30:	2000039c 	.word	0x2000039c
 8001f34:	20000398 	.word	0x20000398
 8001f38:	e000ed04 	.word	0xe000ed04

08001f3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001f42:	2300      	movs	r3, #0
 8001f44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001f46:	4b4e      	ldr	r3, [pc, #312]	; (8002080 <xTaskIncrementTick+0x144>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f040 8087 	bne.w	800205e <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001f50:	4b4c      	ldr	r3, [pc, #304]	; (8002084 <xTaskIncrementTick+0x148>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	3301      	adds	r3, #1
 8001f56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001f58:	4a4a      	ldr	r2, [pc, #296]	; (8002084 <xTaskIncrementTick+0x148>)
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d11f      	bne.n	8001fa4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8001f64:	4b48      	ldr	r3, [pc, #288]	; (8002088 <xTaskIncrementTick+0x14c>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d009      	beq.n	8001f82 <xTaskIncrementTick+0x46>
 8001f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f72:	f383 8811 	msr	BASEPRI, r3
 8001f76:	f3bf 8f6f 	isb	sy
 8001f7a:	f3bf 8f4f 	dsb	sy
 8001f7e:	603b      	str	r3, [r7, #0]
 8001f80:	e7fe      	b.n	8001f80 <xTaskIncrementTick+0x44>
 8001f82:	4b41      	ldr	r3, [pc, #260]	; (8002088 <xTaskIncrementTick+0x14c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	4b40      	ldr	r3, [pc, #256]	; (800208c <xTaskIncrementTick+0x150>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a3e      	ldr	r2, [pc, #248]	; (8002088 <xTaskIncrementTick+0x14c>)
 8001f8e:	6013      	str	r3, [r2, #0]
 8001f90:	4a3e      	ldr	r2, [pc, #248]	; (800208c <xTaskIncrementTick+0x150>)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6013      	str	r3, [r2, #0]
 8001f96:	4b3e      	ldr	r3, [pc, #248]	; (8002090 <xTaskIncrementTick+0x154>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	4a3c      	ldr	r2, [pc, #240]	; (8002090 <xTaskIncrementTick+0x154>)
 8001f9e:	6013      	str	r3, [r2, #0]
 8001fa0:	f000 f990 	bl	80022c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001fa4:	4b3b      	ldr	r3, [pc, #236]	; (8002094 <xTaskIncrementTick+0x158>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d348      	bcc.n	8002040 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001fae:	4b36      	ldr	r3, [pc, #216]	; (8002088 <xTaskIncrementTick+0x14c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d104      	bne.n	8001fc2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001fb8:	4b36      	ldr	r3, [pc, #216]	; (8002094 <xTaskIncrementTick+0x158>)
 8001fba:	f04f 32ff 	mov.w	r2, #4294967295
 8001fbe:	601a      	str	r2, [r3, #0]
					break;
 8001fc0:	e03e      	b.n	8002040 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001fc2:	4b31      	ldr	r3, [pc, #196]	; (8002088 <xTaskIncrementTick+0x14c>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d203      	bcs.n	8001fe2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001fda:	4a2e      	ldr	r2, [pc, #184]	; (8002094 <xTaskIncrementTick+0x158>)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001fe0:	e02e      	b.n	8002040 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff fce7 	bl	80019ba <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d004      	beq.n	8001ffe <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	3318      	adds	r3, #24
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff fcde 	bl	80019ba <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002002:	2201      	movs	r2, #1
 8002004:	409a      	lsls	r2, r3
 8002006:	4b24      	ldr	r3, [pc, #144]	; (8002098 <xTaskIncrementTick+0x15c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4313      	orrs	r3, r2
 800200c:	4a22      	ldr	r2, [pc, #136]	; (8002098 <xTaskIncrementTick+0x15c>)
 800200e:	6013      	str	r3, [r2, #0]
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002014:	4613      	mov	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	4a1f      	ldr	r2, [pc, #124]	; (800209c <xTaskIncrementTick+0x160>)
 800201e:	441a      	add	r2, r3
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	3304      	adds	r3, #4
 8002024:	4619      	mov	r1, r3
 8002026:	4610      	mov	r0, r2
 8002028:	f7ff fca3 	bl	8001972 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002030:	4b1b      	ldr	r3, [pc, #108]	; (80020a0 <xTaskIncrementTick+0x164>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002036:	429a      	cmp	r2, r3
 8002038:	d3b9      	bcc.n	8001fae <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800203a:	2301      	movs	r3, #1
 800203c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800203e:	e7b6      	b.n	8001fae <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002040:	4b17      	ldr	r3, [pc, #92]	; (80020a0 <xTaskIncrementTick+0x164>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002046:	4915      	ldr	r1, [pc, #84]	; (800209c <xTaskIncrementTick+0x160>)
 8002048:	4613      	mov	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	4413      	add	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	440b      	add	r3, r1
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d907      	bls.n	8002068 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8002058:	2301      	movs	r3, #1
 800205a:	617b      	str	r3, [r7, #20]
 800205c:	e004      	b.n	8002068 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800205e:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <xTaskIncrementTick+0x168>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	3301      	adds	r3, #1
 8002064:	4a0f      	ldr	r2, [pc, #60]	; (80020a4 <xTaskIncrementTick+0x168>)
 8002066:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002068:	4b0f      	ldr	r3, [pc, #60]	; (80020a8 <xTaskIncrementTick+0x16c>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8002070:	2301      	movs	r3, #1
 8002072:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002074:	697b      	ldr	r3, [r7, #20]
}
 8002076:	4618      	mov	r0, r3
 8002078:	3718      	adds	r7, #24
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	200003b0 	.word	0x200003b0
 8002084:	2000038c 	.word	0x2000038c
 8002088:	20000340 	.word	0x20000340
 800208c:	20000344 	.word	0x20000344
 8002090:	200003a0 	.word	0x200003a0
 8002094:	200003a8 	.word	0x200003a8
 8002098:	20000390 	.word	0x20000390
 800209c:	2000028c 	.word	0x2000028c
 80020a0:	20000288 	.word	0x20000288
 80020a4:	20000398 	.word	0x20000398
 80020a8:	2000039c 	.word	0x2000039c

080020ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80020ac:	b480      	push	{r7}
 80020ae:	b087      	sub	sp, #28
 80020b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80020b2:	4b26      	ldr	r3, [pc, #152]	; (800214c <vTaskSwitchContext+0xa0>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80020ba:	4b25      	ldr	r3, [pc, #148]	; (8002150 <vTaskSwitchContext+0xa4>)
 80020bc:	2201      	movs	r2, #1
 80020be:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80020c0:	e03e      	b.n	8002140 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80020c2:	4b23      	ldr	r3, [pc, #140]	; (8002150 <vTaskSwitchContext+0xa4>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80020c8:	4b22      	ldr	r3, [pc, #136]	; (8002154 <vTaskSwitchContext+0xa8>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	fab3 f383 	clz	r3, r3
 80020d4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80020d6:	7afb      	ldrb	r3, [r7, #11]
 80020d8:	f1c3 031f 	rsb	r3, r3, #31
 80020dc:	617b      	str	r3, [r7, #20]
 80020de:	491e      	ldr	r1, [pc, #120]	; (8002158 <vTaskSwitchContext+0xac>)
 80020e0:	697a      	ldr	r2, [r7, #20]
 80020e2:	4613      	mov	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	440b      	add	r3, r1
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d109      	bne.n	8002106 <vTaskSwitchContext+0x5a>
	__asm volatile
 80020f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020f6:	f383 8811 	msr	BASEPRI, r3
 80020fa:	f3bf 8f6f 	isb	sy
 80020fe:	f3bf 8f4f 	dsb	sy
 8002102:	607b      	str	r3, [r7, #4]
 8002104:	e7fe      	b.n	8002104 <vTaskSwitchContext+0x58>
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	4613      	mov	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4a11      	ldr	r2, [pc, #68]	; (8002158 <vTaskSwitchContext+0xac>)
 8002112:	4413      	add	r3, r2
 8002114:	613b      	str	r3, [r7, #16]
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	685a      	ldr	r2, [r3, #4]
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	605a      	str	r2, [r3, #4]
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	685a      	ldr	r2, [r3, #4]
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	3308      	adds	r3, #8
 8002128:	429a      	cmp	r2, r3
 800212a:	d104      	bne.n	8002136 <vTaskSwitchContext+0x8a>
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	685a      	ldr	r2, [r3, #4]
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	4a07      	ldr	r2, [pc, #28]	; (800215c <vTaskSwitchContext+0xb0>)
 800213e:	6013      	str	r3, [r2, #0]
}
 8002140:	bf00      	nop
 8002142:	371c      	adds	r7, #28
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	200003b0 	.word	0x200003b0
 8002150:	2000039c 	.word	0x2000039c
 8002154:	20000390 	.word	0x20000390
 8002158:	2000028c 	.word	0x2000028c
 800215c:	20000288 	.word	0x20000288

08002160 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002168:	f000 f852 	bl	8002210 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800216c:	4b06      	ldr	r3, [pc, #24]	; (8002188 <prvIdleTask+0x28>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d9f9      	bls.n	8002168 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002174:	4b05      	ldr	r3, [pc, #20]	; (800218c <prvIdleTask+0x2c>)
 8002176:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	f3bf 8f4f 	dsb	sy
 8002180:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002184:	e7f0      	b.n	8002168 <prvIdleTask+0x8>
 8002186:	bf00      	nop
 8002188:	2000028c 	.word	0x2000028c
 800218c:	e000ed04 	.word	0xe000ed04

08002190 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002196:	2300      	movs	r3, #0
 8002198:	607b      	str	r3, [r7, #4]
 800219a:	e00c      	b.n	80021b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	4613      	mov	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4a12      	ldr	r2, [pc, #72]	; (80021f0 <prvInitialiseTaskLists+0x60>)
 80021a8:	4413      	add	r3, r2
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff fbb4 	bl	8001918 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3301      	adds	r3, #1
 80021b4:	607b      	str	r3, [r7, #4]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2b06      	cmp	r3, #6
 80021ba:	d9ef      	bls.n	800219c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80021bc:	480d      	ldr	r0, [pc, #52]	; (80021f4 <prvInitialiseTaskLists+0x64>)
 80021be:	f7ff fbab 	bl	8001918 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80021c2:	480d      	ldr	r0, [pc, #52]	; (80021f8 <prvInitialiseTaskLists+0x68>)
 80021c4:	f7ff fba8 	bl	8001918 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80021c8:	480c      	ldr	r0, [pc, #48]	; (80021fc <prvInitialiseTaskLists+0x6c>)
 80021ca:	f7ff fba5 	bl	8001918 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80021ce:	480c      	ldr	r0, [pc, #48]	; (8002200 <prvInitialiseTaskLists+0x70>)
 80021d0:	f7ff fba2 	bl	8001918 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80021d4:	480b      	ldr	r0, [pc, #44]	; (8002204 <prvInitialiseTaskLists+0x74>)
 80021d6:	f7ff fb9f 	bl	8001918 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80021da:	4b0b      	ldr	r3, [pc, #44]	; (8002208 <prvInitialiseTaskLists+0x78>)
 80021dc:	4a05      	ldr	r2, [pc, #20]	; (80021f4 <prvInitialiseTaskLists+0x64>)
 80021de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80021e0:	4b0a      	ldr	r3, [pc, #40]	; (800220c <prvInitialiseTaskLists+0x7c>)
 80021e2:	4a05      	ldr	r2, [pc, #20]	; (80021f8 <prvInitialiseTaskLists+0x68>)
 80021e4:	601a      	str	r2, [r3, #0]
}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	2000028c 	.word	0x2000028c
 80021f4:	20000318 	.word	0x20000318
 80021f8:	2000032c 	.word	0x2000032c
 80021fc:	20000348 	.word	0x20000348
 8002200:	2000035c 	.word	0x2000035c
 8002204:	20000374 	.word	0x20000374
 8002208:	20000340 	.word	0x20000340
 800220c:	20000344 	.word	0x20000344

08002210 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002216:	e019      	b.n	800224c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002218:	f000 f9b8 	bl	800258c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800221c:	4b0f      	ldr	r3, [pc, #60]	; (800225c <prvCheckTasksWaitingTermination+0x4c>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3304      	adds	r3, #4
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff fbc6 	bl	80019ba <uxListRemove>
				--uxCurrentNumberOfTasks;
 800222e:	4b0c      	ldr	r3, [pc, #48]	; (8002260 <prvCheckTasksWaitingTermination+0x50>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	3b01      	subs	r3, #1
 8002234:	4a0a      	ldr	r2, [pc, #40]	; (8002260 <prvCheckTasksWaitingTermination+0x50>)
 8002236:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002238:	4b0a      	ldr	r3, [pc, #40]	; (8002264 <prvCheckTasksWaitingTermination+0x54>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	3b01      	subs	r3, #1
 800223e:	4a09      	ldr	r2, [pc, #36]	; (8002264 <prvCheckTasksWaitingTermination+0x54>)
 8002240:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002242:	f000 f9d1 	bl	80025e8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 f80e 	bl	8002268 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800224c:	4b05      	ldr	r3, [pc, #20]	; (8002264 <prvCheckTasksWaitingTermination+0x54>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1e1      	bne.n	8002218 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002254:	bf00      	nop
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	2000035c 	.word	0x2000035c
 8002260:	20000388 	.word	0x20000388
 8002264:	20000370 	.word	0x20000370

08002268 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002276:	2b00      	cmp	r3, #0
 8002278:	d108      	bne.n	800228c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	4618      	mov	r0, r3
 8002280:	f000 fb22 	bl	80028c8 <vPortFree>
				vPortFree( pxTCB );
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f000 fb1f 	bl	80028c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800228a:	e017      	b.n	80022bc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002292:	2b01      	cmp	r3, #1
 8002294:	d103      	bne.n	800229e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 fb16 	bl	80028c8 <vPortFree>
	}
 800229c:	e00e      	b.n	80022bc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d009      	beq.n	80022bc <prvDeleteTCB+0x54>
 80022a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ac:	f383 8811 	msr	BASEPRI, r3
 80022b0:	f3bf 8f6f 	isb	sy
 80022b4:	f3bf 8f4f 	dsb	sy
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	e7fe      	b.n	80022ba <prvDeleteTCB+0x52>
	}
 80022bc:	bf00      	nop
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80022ca:	4b0c      	ldr	r3, [pc, #48]	; (80022fc <prvResetNextTaskUnblockTime+0x38>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d104      	bne.n	80022de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80022d4:	4b0a      	ldr	r3, [pc, #40]	; (8002300 <prvResetNextTaskUnblockTime+0x3c>)
 80022d6:	f04f 32ff 	mov.w	r2, #4294967295
 80022da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80022dc:	e008      	b.n	80022f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80022de:	4b07      	ldr	r3, [pc, #28]	; (80022fc <prvResetNextTaskUnblockTime+0x38>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	4a04      	ldr	r2, [pc, #16]	; (8002300 <prvResetNextTaskUnblockTime+0x3c>)
 80022ee:	6013      	str	r3, [r2, #0]
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	20000340 	.word	0x20000340
 8002300:	200003a8 	.word	0x200003a8

08002304 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800230a:	4b0b      	ldr	r3, [pc, #44]	; (8002338 <xTaskGetSchedulerState+0x34>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d102      	bne.n	8002318 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002312:	2301      	movs	r3, #1
 8002314:	607b      	str	r3, [r7, #4]
 8002316:	e008      	b.n	800232a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002318:	4b08      	ldr	r3, [pc, #32]	; (800233c <xTaskGetSchedulerState+0x38>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d102      	bne.n	8002326 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002320:	2302      	movs	r3, #2
 8002322:	607b      	str	r3, [r7, #4]
 8002324:	e001      	b.n	800232a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002326:	2300      	movs	r3, #0
 8002328:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800232a:	687b      	ldr	r3, [r7, #4]
	}
 800232c:	4618      	mov	r0, r3
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	20000394 	.word	0x20000394
 800233c:	200003b0 	.word	0x200003b0

08002340 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	3b04      	subs	r3, #4
 8002350:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002358:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	3b04      	subs	r3, #4
 800235e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	f023 0201 	bic.w	r2, r3, #1
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	3b04      	subs	r3, #4
 800236e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002370:	4a0c      	ldr	r2, [pc, #48]	; (80023a4 <pxPortInitialiseStack+0x64>)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	3b14      	subs	r3, #20
 800237a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	3b04      	subs	r3, #4
 8002386:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f06f 0202 	mvn.w	r2, #2
 800238e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	3b20      	subs	r3, #32
 8002394:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002396:	68fb      	ldr	r3, [r7, #12]
}
 8002398:	4618      	mov	r0, r3
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	080023a9 	.word	0x080023a9

080023a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80023ae:	2300      	movs	r3, #0
 80023b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80023b2:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <prvTaskExitError+0x50>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ba:	d009      	beq.n	80023d0 <prvTaskExitError+0x28>
 80023bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023c0:	f383 8811 	msr	BASEPRI, r3
 80023c4:	f3bf 8f6f 	isb	sy
 80023c8:	f3bf 8f4f 	dsb	sy
 80023cc:	60fb      	str	r3, [r7, #12]
 80023ce:	e7fe      	b.n	80023ce <prvTaskExitError+0x26>
 80023d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023d4:	f383 8811 	msr	BASEPRI, r3
 80023d8:	f3bf 8f6f 	isb	sy
 80023dc:	f3bf 8f4f 	dsb	sy
 80023e0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80023e2:	bf00      	nop
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d0fc      	beq.n	80023e4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80023ea:	bf00      	nop
 80023ec:	3714      	adds	r7, #20
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	2000000c 	.word	0x2000000c
 80023fc:	00000000 	.word	0x00000000

08002400 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002400:	4b07      	ldr	r3, [pc, #28]	; (8002420 <pxCurrentTCBConst2>)
 8002402:	6819      	ldr	r1, [r3, #0]
 8002404:	6808      	ldr	r0, [r1, #0]
 8002406:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800240a:	f380 8809 	msr	PSP, r0
 800240e:	f3bf 8f6f 	isb	sy
 8002412:	f04f 0000 	mov.w	r0, #0
 8002416:	f380 8811 	msr	BASEPRI, r0
 800241a:	4770      	bx	lr
 800241c:	f3af 8000 	nop.w

08002420 <pxCurrentTCBConst2>:
 8002420:	20000288 	.word	0x20000288
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002424:	bf00      	nop
 8002426:	bf00      	nop

08002428 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002428:	4808      	ldr	r0, [pc, #32]	; (800244c <prvPortStartFirstTask+0x24>)
 800242a:	6800      	ldr	r0, [r0, #0]
 800242c:	6800      	ldr	r0, [r0, #0]
 800242e:	f380 8808 	msr	MSP, r0
 8002432:	f04f 0000 	mov.w	r0, #0
 8002436:	f380 8814 	msr	CONTROL, r0
 800243a:	b662      	cpsie	i
 800243c:	b661      	cpsie	f
 800243e:	f3bf 8f4f 	dsb	sy
 8002442:	f3bf 8f6f 	isb	sy
 8002446:	df00      	svc	0
 8002448:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800244a:	bf00      	nop
 800244c:	e000ed08 	.word	0xe000ed08

08002450 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002456:	4b44      	ldr	r3, [pc, #272]	; (8002568 <xPortStartScheduler+0x118>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a44      	ldr	r2, [pc, #272]	; (800256c <xPortStartScheduler+0x11c>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d109      	bne.n	8002474 <xPortStartScheduler+0x24>
 8002460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002464:	f383 8811 	msr	BASEPRI, r3
 8002468:	f3bf 8f6f 	isb	sy
 800246c:	f3bf 8f4f 	dsb	sy
 8002470:	613b      	str	r3, [r7, #16]
 8002472:	e7fe      	b.n	8002472 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002474:	4b3c      	ldr	r3, [pc, #240]	; (8002568 <xPortStartScheduler+0x118>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a3d      	ldr	r2, [pc, #244]	; (8002570 <xPortStartScheduler+0x120>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d109      	bne.n	8002492 <xPortStartScheduler+0x42>
 800247e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002482:	f383 8811 	msr	BASEPRI, r3
 8002486:	f3bf 8f6f 	isb	sy
 800248a:	f3bf 8f4f 	dsb	sy
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	e7fe      	b.n	8002490 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002492:	4b38      	ldr	r3, [pc, #224]	; (8002574 <xPortStartScheduler+0x124>)
 8002494:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	b2db      	uxtb	r3, r3
 800249c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	22ff      	movs	r2, #255	; 0xff
 80024a2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80024ac:	78fb      	ldrb	r3, [r7, #3]
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80024b4:	b2da      	uxtb	r2, r3
 80024b6:	4b30      	ldr	r3, [pc, #192]	; (8002578 <xPortStartScheduler+0x128>)
 80024b8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80024ba:	4b30      	ldr	r3, [pc, #192]	; (800257c <xPortStartScheduler+0x12c>)
 80024bc:	2207      	movs	r2, #7
 80024be:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80024c0:	e009      	b.n	80024d6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80024c2:	4b2e      	ldr	r3, [pc, #184]	; (800257c <xPortStartScheduler+0x12c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	3b01      	subs	r3, #1
 80024c8:	4a2c      	ldr	r2, [pc, #176]	; (800257c <xPortStartScheduler+0x12c>)
 80024ca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80024cc:	78fb      	ldrb	r3, [r7, #3]
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80024d6:	78fb      	ldrb	r3, [r7, #3]
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024de:	2b80      	cmp	r3, #128	; 0x80
 80024e0:	d0ef      	beq.n	80024c2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80024e2:	4b26      	ldr	r3, [pc, #152]	; (800257c <xPortStartScheduler+0x12c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f1c3 0307 	rsb	r3, r3, #7
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	d009      	beq.n	8002502 <xPortStartScheduler+0xb2>
 80024ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024f2:	f383 8811 	msr	BASEPRI, r3
 80024f6:	f3bf 8f6f 	isb	sy
 80024fa:	f3bf 8f4f 	dsb	sy
 80024fe:	60bb      	str	r3, [r7, #8]
 8002500:	e7fe      	b.n	8002500 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002502:	4b1e      	ldr	r3, [pc, #120]	; (800257c <xPortStartScheduler+0x12c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	021b      	lsls	r3, r3, #8
 8002508:	4a1c      	ldr	r2, [pc, #112]	; (800257c <xPortStartScheduler+0x12c>)
 800250a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800250c:	4b1b      	ldr	r3, [pc, #108]	; (800257c <xPortStartScheduler+0x12c>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002514:	4a19      	ldr	r2, [pc, #100]	; (800257c <xPortStartScheduler+0x12c>)
 8002516:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	b2da      	uxtb	r2, r3
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002520:	4b17      	ldr	r3, [pc, #92]	; (8002580 <xPortStartScheduler+0x130>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a16      	ldr	r2, [pc, #88]	; (8002580 <xPortStartScheduler+0x130>)
 8002526:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800252a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800252c:	4b14      	ldr	r3, [pc, #80]	; (8002580 <xPortStartScheduler+0x130>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a13      	ldr	r2, [pc, #76]	; (8002580 <xPortStartScheduler+0x130>)
 8002532:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002536:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002538:	f000 f8d6 	bl	80026e8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800253c:	4b11      	ldr	r3, [pc, #68]	; (8002584 <xPortStartScheduler+0x134>)
 800253e:	2200      	movs	r2, #0
 8002540:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002542:	f000 f8f5 	bl	8002730 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002546:	4b10      	ldr	r3, [pc, #64]	; (8002588 <xPortStartScheduler+0x138>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a0f      	ldr	r2, [pc, #60]	; (8002588 <xPortStartScheduler+0x138>)
 800254c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002550:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002552:	f7ff ff69 	bl	8002428 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002556:	f7ff fda9 	bl	80020ac <vTaskSwitchContext>
	prvTaskExitError();
 800255a:	f7ff ff25 	bl	80023a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800255e:	2300      	movs	r3, #0
}
 8002560:	4618      	mov	r0, r3
 8002562:	3718      	adds	r7, #24
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	e000ed00 	.word	0xe000ed00
 800256c:	410fc271 	.word	0x410fc271
 8002570:	410fc270 	.word	0x410fc270
 8002574:	e000e400 	.word	0xe000e400
 8002578:	200003b4 	.word	0x200003b4
 800257c:	200003b8 	.word	0x200003b8
 8002580:	e000ed20 	.word	0xe000ed20
 8002584:	2000000c 	.word	0x2000000c
 8002588:	e000ef34 	.word	0xe000ef34

0800258c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002596:	f383 8811 	msr	BASEPRI, r3
 800259a:	f3bf 8f6f 	isb	sy
 800259e:	f3bf 8f4f 	dsb	sy
 80025a2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80025a4:	4b0e      	ldr	r3, [pc, #56]	; (80025e0 <vPortEnterCritical+0x54>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	3301      	adds	r3, #1
 80025aa:	4a0d      	ldr	r2, [pc, #52]	; (80025e0 <vPortEnterCritical+0x54>)
 80025ac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80025ae:	4b0c      	ldr	r3, [pc, #48]	; (80025e0 <vPortEnterCritical+0x54>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d10e      	bne.n	80025d4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80025b6:	4b0b      	ldr	r3, [pc, #44]	; (80025e4 <vPortEnterCritical+0x58>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d009      	beq.n	80025d4 <vPortEnterCritical+0x48>
 80025c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025c4:	f383 8811 	msr	BASEPRI, r3
 80025c8:	f3bf 8f6f 	isb	sy
 80025cc:	f3bf 8f4f 	dsb	sy
 80025d0:	603b      	str	r3, [r7, #0]
 80025d2:	e7fe      	b.n	80025d2 <vPortEnterCritical+0x46>
	}
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	2000000c 	.word	0x2000000c
 80025e4:	e000ed04 	.word	0xe000ed04

080025e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80025ee:	4b11      	ldr	r3, [pc, #68]	; (8002634 <vPortExitCritical+0x4c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d109      	bne.n	800260a <vPortExitCritical+0x22>
 80025f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025fa:	f383 8811 	msr	BASEPRI, r3
 80025fe:	f3bf 8f6f 	isb	sy
 8002602:	f3bf 8f4f 	dsb	sy
 8002606:	607b      	str	r3, [r7, #4]
 8002608:	e7fe      	b.n	8002608 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800260a:	4b0a      	ldr	r3, [pc, #40]	; (8002634 <vPortExitCritical+0x4c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	3b01      	subs	r3, #1
 8002610:	4a08      	ldr	r2, [pc, #32]	; (8002634 <vPortExitCritical+0x4c>)
 8002612:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002614:	4b07      	ldr	r3, [pc, #28]	; (8002634 <vPortExitCritical+0x4c>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d104      	bne.n	8002626 <vPortExitCritical+0x3e>
 800261c:	2300      	movs	r3, #0
 800261e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8002626:	bf00      	nop
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	2000000c 	.word	0x2000000c
	...

08002640 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002640:	f3ef 8009 	mrs	r0, PSP
 8002644:	f3bf 8f6f 	isb	sy
 8002648:	4b15      	ldr	r3, [pc, #84]	; (80026a0 <pxCurrentTCBConst>)
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	f01e 0f10 	tst.w	lr, #16
 8002650:	bf08      	it	eq
 8002652:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002656:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800265a:	6010      	str	r0, [r2, #0]
 800265c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002660:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002664:	f380 8811 	msr	BASEPRI, r0
 8002668:	f3bf 8f4f 	dsb	sy
 800266c:	f3bf 8f6f 	isb	sy
 8002670:	f7ff fd1c 	bl	80020ac <vTaskSwitchContext>
 8002674:	f04f 0000 	mov.w	r0, #0
 8002678:	f380 8811 	msr	BASEPRI, r0
 800267c:	bc09      	pop	{r0, r3}
 800267e:	6819      	ldr	r1, [r3, #0]
 8002680:	6808      	ldr	r0, [r1, #0]
 8002682:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002686:	f01e 0f10 	tst.w	lr, #16
 800268a:	bf08      	it	eq
 800268c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002690:	f380 8809 	msr	PSP, r0
 8002694:	f3bf 8f6f 	isb	sy
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	f3af 8000 	nop.w

080026a0 <pxCurrentTCBConst>:
 80026a0:	20000288 	.word	0x20000288
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80026a4:	bf00      	nop
 80026a6:	bf00      	nop

080026a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
	__asm volatile
 80026ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b2:	f383 8811 	msr	BASEPRI, r3
 80026b6:	f3bf 8f6f 	isb	sy
 80026ba:	f3bf 8f4f 	dsb	sy
 80026be:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80026c0:	f7ff fc3c 	bl	8001f3c <xTaskIncrementTick>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d003      	beq.n	80026d2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80026ca:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <xPortSysTickHandler+0x3c>)
 80026cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	2300      	movs	r3, #0
 80026d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80026dc:	bf00      	nop
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	e000ed04 	.word	0xe000ed04

080026e8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80026ec:	4b0b      	ldr	r3, [pc, #44]	; (800271c <vPortSetupTimerInterrupt+0x34>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80026f2:	4b0b      	ldr	r3, [pc, #44]	; (8002720 <vPortSetupTimerInterrupt+0x38>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80026f8:	4b0a      	ldr	r3, [pc, #40]	; (8002724 <vPortSetupTimerInterrupt+0x3c>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a0a      	ldr	r2, [pc, #40]	; (8002728 <vPortSetupTimerInterrupt+0x40>)
 80026fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002702:	099b      	lsrs	r3, r3, #6
 8002704:	4a09      	ldr	r2, [pc, #36]	; (800272c <vPortSetupTimerInterrupt+0x44>)
 8002706:	3b01      	subs	r3, #1
 8002708:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800270a:	4b04      	ldr	r3, [pc, #16]	; (800271c <vPortSetupTimerInterrupt+0x34>)
 800270c:	2207      	movs	r2, #7
 800270e:	601a      	str	r2, [r3, #0]
}
 8002710:	bf00      	nop
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	e000e010 	.word	0xe000e010
 8002720:	e000e018 	.word	0xe000e018
 8002724:	20000000 	.word	0x20000000
 8002728:	10624dd3 	.word	0x10624dd3
 800272c:	e000e014 	.word	0xe000e014

08002730 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002730:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002740 <vPortEnableVFP+0x10>
 8002734:	6801      	ldr	r1, [r0, #0]
 8002736:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800273a:	6001      	str	r1, [r0, #0]
 800273c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800273e:	bf00      	nop
 8002740:	e000ed88 	.word	0xe000ed88

08002744 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b08a      	sub	sp, #40	; 0x28
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800274c:	2300      	movs	r3, #0
 800274e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002750:	f7ff fb4a 	bl	8001de8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002754:	4b57      	ldr	r3, [pc, #348]	; (80028b4 <pvPortMalloc+0x170>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800275c:	f000 f90c 	bl	8002978 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002760:	4b55      	ldr	r3, [pc, #340]	; (80028b8 <pvPortMalloc+0x174>)
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4013      	ands	r3, r2
 8002768:	2b00      	cmp	r3, #0
 800276a:	f040 808c 	bne.w	8002886 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d01c      	beq.n	80027ae <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8002774:	2208      	movs	r2, #8
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4413      	add	r3, r2
 800277a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f003 0307 	and.w	r3, r3, #7
 8002782:	2b00      	cmp	r3, #0
 8002784:	d013      	beq.n	80027ae <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f023 0307 	bic.w	r3, r3, #7
 800278c:	3308      	adds	r3, #8
 800278e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f003 0307 	and.w	r3, r3, #7
 8002796:	2b00      	cmp	r3, #0
 8002798:	d009      	beq.n	80027ae <pvPortMalloc+0x6a>
	__asm volatile
 800279a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800279e:	f383 8811 	msr	BASEPRI, r3
 80027a2:	f3bf 8f6f 	isb	sy
 80027a6:	f3bf 8f4f 	dsb	sy
 80027aa:	617b      	str	r3, [r7, #20]
 80027ac:	e7fe      	b.n	80027ac <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d068      	beq.n	8002886 <pvPortMalloc+0x142>
 80027b4:	4b41      	ldr	r3, [pc, #260]	; (80028bc <pvPortMalloc+0x178>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d863      	bhi.n	8002886 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80027be:	4b40      	ldr	r3, [pc, #256]	; (80028c0 <pvPortMalloc+0x17c>)
 80027c0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80027c2:	4b3f      	ldr	r3, [pc, #252]	; (80028c0 <pvPortMalloc+0x17c>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80027c8:	e004      	b.n	80027d4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80027ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027cc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80027ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80027d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d903      	bls.n	80027e6 <pvPortMalloc+0xa2>
 80027de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1f1      	bne.n	80027ca <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80027e6:	4b33      	ldr	r3, [pc, #204]	; (80028b4 <pvPortMalloc+0x170>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d04a      	beq.n	8002886 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80027f0:	6a3b      	ldr	r3, [r7, #32]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2208      	movs	r2, #8
 80027f6:	4413      	add	r3, r2
 80027f8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80027fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	6a3b      	ldr	r3, [r7, #32]
 8002800:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	685a      	ldr	r2, [r3, #4]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	1ad2      	subs	r2, r2, r3
 800280a:	2308      	movs	r3, #8
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	429a      	cmp	r2, r3
 8002810:	d91e      	bls.n	8002850 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4413      	add	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	2b00      	cmp	r3, #0
 8002822:	d009      	beq.n	8002838 <pvPortMalloc+0xf4>
 8002824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002828:	f383 8811 	msr	BASEPRI, r3
 800282c:	f3bf 8f6f 	isb	sy
 8002830:	f3bf 8f4f 	dsb	sy
 8002834:	613b      	str	r3, [r7, #16]
 8002836:	e7fe      	b.n	8002836 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	1ad2      	subs	r2, r2, r3
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800284a:	69b8      	ldr	r0, [r7, #24]
 800284c:	f000 f8f6 	bl	8002a3c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002850:	4b1a      	ldr	r3, [pc, #104]	; (80028bc <pvPortMalloc+0x178>)
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	4a18      	ldr	r2, [pc, #96]	; (80028bc <pvPortMalloc+0x178>)
 800285c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800285e:	4b17      	ldr	r3, [pc, #92]	; (80028bc <pvPortMalloc+0x178>)
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	4b18      	ldr	r3, [pc, #96]	; (80028c4 <pvPortMalloc+0x180>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	429a      	cmp	r2, r3
 8002868:	d203      	bcs.n	8002872 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800286a:	4b14      	ldr	r3, [pc, #80]	; (80028bc <pvPortMalloc+0x178>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a15      	ldr	r2, [pc, #84]	; (80028c4 <pvPortMalloc+0x180>)
 8002870:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	4b10      	ldr	r3, [pc, #64]	; (80028b8 <pvPortMalloc+0x174>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	431a      	orrs	r2, r3
 800287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002882:	2200      	movs	r2, #0
 8002884:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002886:	f7ff fabd 	bl	8001e04 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	f003 0307 	and.w	r3, r3, #7
 8002890:	2b00      	cmp	r3, #0
 8002892:	d009      	beq.n	80028a8 <pvPortMalloc+0x164>
 8002894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002898:	f383 8811 	msr	BASEPRI, r3
 800289c:	f3bf 8f6f 	isb	sy
 80028a0:	f3bf 8f4f 	dsb	sy
 80028a4:	60fb      	str	r3, [r7, #12]
 80028a6:	e7fe      	b.n	80028a6 <pvPortMalloc+0x162>
	return pvReturn;
 80028a8:	69fb      	ldr	r3, [r7, #28]
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3728      	adds	r7, #40	; 0x28
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	20003fc4 	.word	0x20003fc4
 80028b8:	20003fd0 	.word	0x20003fd0
 80028bc:	20003fc8 	.word	0x20003fc8
 80028c0:	20003fbc 	.word	0x20003fbc
 80028c4:	20003fcc 	.word	0x20003fcc

080028c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d046      	beq.n	8002968 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80028da:	2308      	movs	r3, #8
 80028dc:	425b      	negs	r3, r3
 80028de:	697a      	ldr	r2, [r7, #20]
 80028e0:	4413      	add	r3, r2
 80028e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	4b20      	ldr	r3, [pc, #128]	; (8002970 <vPortFree+0xa8>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4013      	ands	r3, r2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d109      	bne.n	800290a <vPortFree+0x42>
 80028f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028fa:	f383 8811 	msr	BASEPRI, r3
 80028fe:	f3bf 8f6f 	isb	sy
 8002902:	f3bf 8f4f 	dsb	sy
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	e7fe      	b.n	8002908 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d009      	beq.n	8002926 <vPortFree+0x5e>
 8002912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002916:	f383 8811 	msr	BASEPRI, r3
 800291a:	f3bf 8f6f 	isb	sy
 800291e:	f3bf 8f4f 	dsb	sy
 8002922:	60bb      	str	r3, [r7, #8]
 8002924:	e7fe      	b.n	8002924 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	685a      	ldr	r2, [r3, #4]
 800292a:	4b11      	ldr	r3, [pc, #68]	; (8002970 <vPortFree+0xa8>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4013      	ands	r3, r2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d019      	beq.n	8002968 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d115      	bne.n	8002968 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	4b0b      	ldr	r3, [pc, #44]	; (8002970 <vPortFree+0xa8>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	43db      	mvns	r3, r3
 8002946:	401a      	ands	r2, r3
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800294c:	f7ff fa4c 	bl	8001de8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	4b07      	ldr	r3, [pc, #28]	; (8002974 <vPortFree+0xac>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4413      	add	r3, r2
 800295a:	4a06      	ldr	r2, [pc, #24]	; (8002974 <vPortFree+0xac>)
 800295c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800295e:	6938      	ldr	r0, [r7, #16]
 8002960:	f000 f86c 	bl	8002a3c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002964:	f7ff fa4e 	bl	8001e04 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002968:	bf00      	nop
 800296a:	3718      	adds	r7, #24
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	20003fd0 	.word	0x20003fd0
 8002974:	20003fc8 	.word	0x20003fc8

08002978 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800297e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002982:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002984:	4b27      	ldr	r3, [pc, #156]	; (8002a24 <prvHeapInit+0xac>)
 8002986:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f003 0307 	and.w	r3, r3, #7
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00c      	beq.n	80029ac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	3307      	adds	r3, #7
 8002996:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f023 0307 	bic.w	r3, r3, #7
 800299e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80029a0:	68ba      	ldr	r2, [r7, #8]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	4a1f      	ldr	r2, [pc, #124]	; (8002a24 <prvHeapInit+0xac>)
 80029a8:	4413      	add	r3, r2
 80029aa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80029b0:	4a1d      	ldr	r2, [pc, #116]	; (8002a28 <prvHeapInit+0xb0>)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80029b6:	4b1c      	ldr	r3, [pc, #112]	; (8002a28 <prvHeapInit+0xb0>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	68ba      	ldr	r2, [r7, #8]
 80029c0:	4413      	add	r3, r2
 80029c2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80029c4:	2208      	movs	r2, #8
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	1a9b      	subs	r3, r3, r2
 80029ca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f023 0307 	bic.w	r3, r3, #7
 80029d2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	4a15      	ldr	r2, [pc, #84]	; (8002a2c <prvHeapInit+0xb4>)
 80029d8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80029da:	4b14      	ldr	r3, [pc, #80]	; (8002a2c <prvHeapInit+0xb4>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2200      	movs	r2, #0
 80029e0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80029e2:	4b12      	ldr	r3, [pc, #72]	; (8002a2c <prvHeapInit+0xb4>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2200      	movs	r2, #0
 80029e8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	1ad2      	subs	r2, r2, r3
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80029f8:	4b0c      	ldr	r3, [pc, #48]	; (8002a2c <prvHeapInit+0xb4>)
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	4a0a      	ldr	r2, [pc, #40]	; (8002a30 <prvHeapInit+0xb8>)
 8002a06:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	4a09      	ldr	r2, [pc, #36]	; (8002a34 <prvHeapInit+0xbc>)
 8002a0e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002a10:	4b09      	ldr	r3, [pc, #36]	; (8002a38 <prvHeapInit+0xc0>)
 8002a12:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002a16:	601a      	str	r2, [r3, #0]
}
 8002a18:	bf00      	nop
 8002a1a:	3714      	adds	r7, #20
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr
 8002a24:	200003bc 	.word	0x200003bc
 8002a28:	20003fbc 	.word	0x20003fbc
 8002a2c:	20003fc4 	.word	0x20003fc4
 8002a30:	20003fcc 	.word	0x20003fcc
 8002a34:	20003fc8 	.word	0x20003fc8
 8002a38:	20003fd0 	.word	0x20003fd0

08002a3c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002a44:	4b28      	ldr	r3, [pc, #160]	; (8002ae8 <prvInsertBlockIntoFreeList+0xac>)
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	e002      	b.n	8002a50 <prvInsertBlockIntoFreeList+0x14>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d8f7      	bhi.n	8002a4a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	4413      	add	r3, r2
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d108      	bne.n	8002a7e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	441a      	add	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	68ba      	ldr	r2, [r7, #8]
 8002a88:	441a      	add	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d118      	bne.n	8002ac4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	4b15      	ldr	r3, [pc, #84]	; (8002aec <prvInsertBlockIntoFreeList+0xb0>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d00d      	beq.n	8002aba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685a      	ldr	r2, [r3, #4]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	441a      	add	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	e008      	b.n	8002acc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002aba:	4b0c      	ldr	r3, [pc, #48]	; (8002aec <prvInsertBlockIntoFreeList+0xb0>)
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	e003      	b.n	8002acc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d002      	beq.n	8002ada <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002ada:	bf00      	nop
 8002adc:	3714      	adds	r7, #20
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	20003fbc 	.word	0x20003fbc
 8002aec:	20003fc4 	.word	0x20003fc4

08002af0 <__libc_init_array>:
 8002af0:	b570      	push	{r4, r5, r6, lr}
 8002af2:	4e0d      	ldr	r6, [pc, #52]	; (8002b28 <__libc_init_array+0x38>)
 8002af4:	4c0d      	ldr	r4, [pc, #52]	; (8002b2c <__libc_init_array+0x3c>)
 8002af6:	1ba4      	subs	r4, r4, r6
 8002af8:	10a4      	asrs	r4, r4, #2
 8002afa:	2500      	movs	r5, #0
 8002afc:	42a5      	cmp	r5, r4
 8002afe:	d109      	bne.n	8002b14 <__libc_init_array+0x24>
 8002b00:	4e0b      	ldr	r6, [pc, #44]	; (8002b30 <__libc_init_array+0x40>)
 8002b02:	4c0c      	ldr	r4, [pc, #48]	; (8002b34 <__libc_init_array+0x44>)
 8002b04:	f000 f820 	bl	8002b48 <_init>
 8002b08:	1ba4      	subs	r4, r4, r6
 8002b0a:	10a4      	asrs	r4, r4, #2
 8002b0c:	2500      	movs	r5, #0
 8002b0e:	42a5      	cmp	r5, r4
 8002b10:	d105      	bne.n	8002b1e <__libc_init_array+0x2e>
 8002b12:	bd70      	pop	{r4, r5, r6, pc}
 8002b14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b18:	4798      	blx	r3
 8002b1a:	3501      	adds	r5, #1
 8002b1c:	e7ee      	b.n	8002afc <__libc_init_array+0xc>
 8002b1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b22:	4798      	blx	r3
 8002b24:	3501      	adds	r5, #1
 8002b26:	e7f2      	b.n	8002b0e <__libc_init_array+0x1e>
 8002b28:	08002b90 	.word	0x08002b90
 8002b2c:	08002b90 	.word	0x08002b90
 8002b30:	08002b90 	.word	0x08002b90
 8002b34:	08002b94 	.word	0x08002b94

08002b38 <memset>:
 8002b38:	4402      	add	r2, r0
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d100      	bne.n	8002b42 <memset+0xa>
 8002b40:	4770      	bx	lr
 8002b42:	f803 1b01 	strb.w	r1, [r3], #1
 8002b46:	e7f9      	b.n	8002b3c <memset+0x4>

08002b48 <_init>:
 8002b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b4a:	bf00      	nop
 8002b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b4e:	bc08      	pop	{r3}
 8002b50:	469e      	mov	lr, r3
 8002b52:	4770      	bx	lr

08002b54 <_fini>:
 8002b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b56:	bf00      	nop
 8002b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b5a:	bc08      	pop	{r3}
 8002b5c:	469e      	mov	lr, r3
 8002b5e:	4770      	bx	lr
